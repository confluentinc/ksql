commit 3c9ad638229e9ba5210abb1ebcc04ff3ade3f50e
Author: Tim Fox <tfox@confluent.io>
Date:   Mon Oct 21 21:49:37 2019 +0100

    refactor: PlanNode now encapsulates select expressions as these can change

diff --git a/ksql-engine/src/main/java/io/confluent/ksql/analyzer/QueryAnalyzer.java b/ksql-engine/src/main/java/io/confluent/ksql/analyzer/QueryAnalyzer.java
index 54d88d903..fe86b90e1 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/analyzer/QueryAnalyzer.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/analyzer/QueryAnalyzer.java
@@ -197,7 +197,10 @@ public class QueryAnalyzer {
       tableFunctionAnalyzer.processSelect(exp);
 
       tableFunctionAnalysis.addFinalSelectExpression(
-          ExpressionTreeRewriter.rewriteWith(tableFunctionExpressionRewriter::process, exp));
+          SelectExpression.of(
+              select.getAlias(),
+              ExpressionTreeRewriter.rewriteWith(
+                  tableFunctionExpressionRewriter::process, exp)));
     }
   }
 
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/analyzer/TableFunctionAnalysis.java b/ksql-engine/src/main/java/io/confluent/ksql/analyzer/TableFunctionAnalysis.java
index f8d80b252..d6a05155e 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/analyzer/TableFunctionAnalysis.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/analyzer/TableFunctionAnalysis.java
@@ -14,8 +14,8 @@
 
 package io.confluent.ksql.analyzer;
 
-import io.confluent.ksql.execution.expression.tree.Expression;
 import io.confluent.ksql.execution.expression.tree.FunctionCall;
+import io.confluent.ksql.execution.plan.SelectExpression;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -27,13 +27,13 @@ import java.util.Objects;
 public class TableFunctionAnalysis {
 
   private final List<FunctionCall> tableFunctions = new ArrayList<>();
-  private final List<Expression> selectExpressions = new ArrayList<>();
+  private final List<SelectExpression> selectExpressions = new ArrayList<>();
 
   public List<FunctionCall> getTableFunctions() {
     return Collections.unmodifiableList(tableFunctions);
   }
 
-  public List<Expression> getFinalSelectExpressions() {
+  public List<SelectExpression> getFinalSelectExpressions() {
     return selectExpressions;
   }
 
@@ -41,7 +41,7 @@ public class TableFunctionAnalysis {
     tableFunctions.add(Objects.requireNonNull(functionCall));
   }
 
-  void addFinalSelectExpression(final Expression selectExpression) {
+  void addFinalSelectExpression(final SelectExpression selectExpression) {
     this.selectExpressions.add(Objects.requireNonNull(selectExpression));
   }
 }
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java
index 38628dde4..5003e2792 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java
@@ -50,7 +50,6 @@ import io.confluent.ksql.util.KsqlException;
 import io.confluent.ksql.util.SchemaUtil;
 import io.confluent.ksql.util.timestamp.TimestampExtractionPolicy;
 import io.confluent.ksql.util.timestamp.TimestampExtractionPolicyFactory;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
 import java.util.function.BiFunction;
@@ -222,43 +221,16 @@ public class LogicalPlanner {
         sourcePlanNode,
         schema,
         keyFieldName.map(ColumnRef::withoutSource),
-        getFinalSelectExpressions(schema)
+        sourcePlanNode.getSelectExpressions()
     );
   }
 
-  private List<SelectExpression> getFinalSelectExpressions(final LogicalSchema schema) {
-    if (!tableFunctionAnalysis.getTableFunctions().isEmpty()) {
-
-      final List<Expression> finalSelectExpressions =
-          tableFunctionAnalysis.getFinalSelectExpressions();
-
-      final List<SelectExpression> finalSelectExpressionList = new ArrayList<>();
-      if (finalSelectExpressions.size() != schema.value().size()) {
-        throw new RuntimeException(
-            "Incompatible aggregate schema, field count must match, "
-                + "selected field count:"
-                + finalSelectExpressions.size()
-                + " schema field count:"
-                + schema.value().size());
-      }
-      for (int i = 0; i < finalSelectExpressions.size(); i++) {
-        finalSelectExpressionList.add(SelectExpression.of(
-            schema.value().get(i).name(),
-            finalSelectExpressions.get(i)
-        ));
-      }
-
-      return finalSelectExpressionList;
-    } else {
-      return analysis.getSelectExpressions();
-    }
-  }
-
   private static FilterNode buildFilterNode(
       final PlanNode sourcePlanNode,
       final Expression filterExpression
   ) {
-    return new FilterNode(new PlanNodeId("Filter"), sourcePlanNode, filterExpression);
+    return new FilterNode(new PlanNodeId("Filter"), sourcePlanNode, filterExpression,
+        sourcePlanNode.getSelectExpressions());
   }
 
   private FlatMapNode buildFlatMapNode(
@@ -287,17 +259,20 @@ public class LogicalPlanner {
     final DataSourceNode leftSourceNode = new DataSourceNode(
         new PlanNodeId("KafkaTopic_Left"),
         left.getDataSource(),
-        left.getAlias()
+        left.getAlias(),
+        analysis.getSelectExpressions()
     );
 
     final DataSourceNode rightSourceNode = new DataSourceNode(
         new PlanNodeId("KafkaTopic_Right"),
         right.getDataSource(),
-        right.getAlias()
+        right.getAlias(),
+        analysis.getSelectExpressions()
     );
 
     return new JoinNode(
         new PlanNodeId("Join"),
+        analysis.getSelectExpressions(),
         joinInfo.get().getType(),
         leftSourceNode,
         rightSourceNode,
@@ -316,7 +291,8 @@ public class LogicalPlanner {
     return new DataSourceNode(
         new PlanNodeId("KsqlTopic"),
         dataSource.getDataSource(),
-        dataSource.getAlias()
+        dataSource.getAlias(),
+        analysis.getSelectExpressions()
     );
   }
 
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/AggregateNode.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/AggregateNode.java
index 7a9a5d71e..6f5a43b47 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/AggregateNode.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/AggregateNode.java
@@ -176,6 +176,11 @@ public class AggregateNode extends PlanNode {
     return finalSelectExpressionList;
   }
 
+  @Override
+  public List<SelectExpression> getSelectExpressions() {
+    return Collections.emptyList();
+  }
+
   @Override
   public <C, R> R accept(final PlanVisitor<C, R> visitor, final C context) {
     return visitor.visitAggregate(this, context);
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/DataSourceNode.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/DataSourceNode.java
index 50754440d..6a4b3c25d 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/DataSourceNode.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/DataSourceNode.java
@@ -22,6 +22,7 @@ import io.confluent.ksql.execution.builder.KsqlQueryBuilder;
 import io.confluent.ksql.execution.context.QueryContext;
 import io.confluent.ksql.execution.context.QueryContext.Stacker;
 import io.confluent.ksql.execution.plan.LogicalSchemaWithMetaAndKeyFields;
+import io.confluent.ksql.execution.plan.SelectExpression;
 import io.confluent.ksql.execution.plan.StreamSource;
 import io.confluent.ksql.metastore.model.DataSource;
 import io.confluent.ksql.metastore.model.DataSource.DataSourceType;
@@ -51,24 +52,28 @@ public class DataSourceNode extends PlanNode {
   private final LogicalSchemaWithMetaAndKeyFields schema;
   private final KeyField keyField;
   private final SchemaKStreamFactory schemaKStreamFactory;
+  private final List<SelectExpression> selectExpressions;
 
   public DataSourceNode(
       final PlanNodeId id,
       final DataSource<?> dataSource,
-      final SourceName alias
+      final SourceName alias,
+      final List<SelectExpression> selectExpressions
   ) {
-    this(id, dataSource, alias, SchemaKStream::forSource);
+    this(id, dataSource, alias, selectExpressions, SchemaKStream::forSource);
   }
 
   DataSourceNode(
       final PlanNodeId id,
       final DataSource<?> dataSource,
       final SourceName alias,
+      final List<SelectExpression> selectExpressions,
       final SchemaKStreamFactory schemaKStreamFactory
   ) {
     super(id, dataSource.getDataSourceType());
     this.dataSource = requireNonNull(dataSource, "dataSource");
     this.alias = requireNonNull(alias, "alias");
+    this.selectExpressions = selectExpressions;
 
     // DataSourceNode copies implicit and key fields into the value schema
     // It users a KS valueMapper to add the key fields
@@ -121,6 +126,11 @@ public class DataSourceNode extends PlanNode {
     return ImmutableList.of();
   }
 
+  @Override
+  public List<SelectExpression> getSelectExpressions() {
+    return selectExpressions;
+  }
+
   @Override
   public <C, R> R accept(final PlanVisitor<C, R> visitor, final C context) {
     return visitor.visitDataSourceNode(this, context);
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/FilterNode.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/FilterNode.java
index 9259b5c14..bad278608 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/FilterNode.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/FilterNode.java
@@ -18,6 +18,7 @@ package io.confluent.ksql.planner.plan;
 import com.google.common.collect.ImmutableList;
 import io.confluent.ksql.execution.builder.KsqlQueryBuilder;
 import io.confluent.ksql.execution.expression.tree.Expression;
+import io.confluent.ksql.execution.plan.SelectExpression;
 import io.confluent.ksql.metastore.model.KeyField;
 import io.confluent.ksql.schema.ksql.LogicalSchema;
 import io.confluent.ksql.services.KafkaTopicClient;
@@ -31,16 +32,19 @@ public class FilterNode extends PlanNode {
 
   private final PlanNode source;
   private final Expression predicate;
+  private final List<SelectExpression> selectExpressions;
 
   public FilterNode(
       final PlanNodeId id,
       final PlanNode source,
-      final Expression predicate
+      final Expression predicate,
+      final List<SelectExpression> selectExpressions
   ) {
     super(id, source.getNodeOutputType());
 
     this.source = Objects.requireNonNull(source, "source");
     this.predicate = Objects.requireNonNull(predicate, "predicate");
+    this.selectExpressions = selectExpressions;
   }
 
   public Expression getPredicate() {
@@ -62,6 +66,11 @@ public class FilterNode extends PlanNode {
     return ImmutableList.of(source);
   }
 
+  @Override
+  public List<SelectExpression> getSelectExpressions() {
+    return selectExpressions;
+  }
+
   public PlanNode getSource() {
     return source;
   }
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/FlatMapNode.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/FlatMapNode.java
index e712666ff..8e9069dbf 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/FlatMapNode.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/FlatMapNode.java
@@ -20,6 +20,7 @@ import io.confluent.ksql.analyzer.TableFunctionAnalysis;
 import io.confluent.ksql.execution.builder.KsqlQueryBuilder;
 import io.confluent.ksql.execution.context.QueryContext;
 import io.confluent.ksql.execution.function.UdtfUtil;
+import io.confluent.ksql.execution.plan.SelectExpression;
 import io.confluent.ksql.function.FunctionRegistry;
 import io.confluent.ksql.function.KsqlTableFunction;
 import io.confluent.ksql.metastore.model.KeyField;
@@ -77,6 +78,11 @@ public class FlatMapNode extends PlanNode {
     return source;
   }
 
+  @Override
+  public List<SelectExpression> getSelectExpressions() {
+    return tableFunctionAnalysis.getFinalSelectExpressions();
+  }
+
   @Override
   public <C, R> R accept(final PlanVisitor<C, R> visitor, final C context) {
     return visitor.visitFlatMap(this, context);
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java
index 6723aac56..3689a01db 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/JoinNode.java
@@ -19,6 +19,7 @@ import com.google.common.collect.ImmutableMap;
 import io.confluent.ksql.execution.builder.KsqlQueryBuilder;
 import io.confluent.ksql.execution.context.QueryContext;
 import io.confluent.ksql.execution.context.QueryContext.Stacker;
+import io.confluent.ksql.execution.plan.SelectExpression;
 import io.confluent.ksql.metastore.model.DataSource.DataSourceType;
 import io.confluent.ksql.metastore.model.KeyField;
 import io.confluent.ksql.metastore.model.KeyField.LegacyField;
@@ -59,9 +60,11 @@ public class JoinNode extends PlanNode {
   private final ColumnRef rightJoinFieldName;
   private final KeyField keyField;
   private final Optional<WithinExpression> withinExpression;
+  private final List<SelectExpression> selectExpressions;
 
   public JoinNode(
       final PlanNodeId id,
+      final List<SelectExpression> selectExpressions,
       final JoinType joinType,
       final DataSourceNode left,
       final DataSourceNode right,
@@ -76,6 +79,7 @@ public class JoinNode extends PlanNode {
     this.leftJoinFieldName = Objects.requireNonNull(leftJoinFieldName, "leftJoinFieldName");
     this.rightJoinFieldName = Objects.requireNonNull(rightJoinFieldName, "rightJoinFieldName");
     this.withinExpression = Objects.requireNonNull(withinExpression, "withinExpression");
+    this.selectExpressions = selectExpressions;
 
     final Column leftKeyCol = validateSchemaColumn(leftJoinFieldName, left.getSchema());
     validateSchemaColumn(rightJoinFieldName, right.getSchema());
@@ -107,6 +111,11 @@ public class JoinNode extends PlanNode {
     return visitor.visitJoin(this, context);
   }
 
+  @Override
+  public List<SelectExpression> getSelectExpressions() {
+    return selectExpressions;
+  }
+
   public DataSourceNode getLeft() {
     return left;
   }
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/OutputNode.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/OutputNode.java
index 7089f93b1..effb3fee0 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/OutputNode.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/OutputNode.java
@@ -18,11 +18,13 @@ package io.confluent.ksql.planner.plan;
 import static java.util.Objects.requireNonNull;
 
 import com.google.common.collect.ImmutableList;
+import io.confluent.ksql.execution.plan.SelectExpression;
 import io.confluent.ksql.query.QueryId;
 import io.confluent.ksql.query.id.QueryIdGenerator;
 import io.confluent.ksql.schema.ksql.LogicalSchema;
 import io.confluent.ksql.services.KafkaTopicClient;
 import io.confluent.ksql.util.timestamp.TimestampExtractionPolicy;
+import java.util.Collections;
 import java.util.List;
 import java.util.OptionalInt;
 import javax.annotation.concurrent.Immutable;
@@ -76,6 +78,11 @@ public abstract class OutputNode
     return source.getPartitions(kafkaTopicClient);
   }
 
+  @Override
+  public List<SelectExpression> getSelectExpressions() {
+    return Collections.emptyList();
+  }
+
   @Override
   public <C, R> R accept(final PlanVisitor<C, R> visitor, final C context) {
     return visitor.visitOutput(this, context);
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/PlanNode.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/PlanNode.java
index 9f83890f7..0a686e2ac 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/PlanNode.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/PlanNode.java
@@ -18,6 +18,7 @@ package io.confluent.ksql.planner.plan;
 import static java.util.Objects.requireNonNull;
 
 import io.confluent.ksql.execution.builder.KsqlQueryBuilder;
+import io.confluent.ksql.execution.plan.SelectExpression;
 import io.confluent.ksql.metastore.model.DataSource.DataSourceType;
 import io.confluent.ksql.metastore.model.KeyField;
 import io.confluent.ksql.schema.ksql.LogicalSchema;
@@ -52,6 +53,8 @@ public abstract class PlanNode {
 
   public abstract List<PlanNode> getSources();
 
+  public abstract List<SelectExpression> getSelectExpressions();
+
   public <C, R> R accept(final PlanVisitor<C, R> visitor, final C context) {
     return visitor.visitPlan(this, context);
   }
diff --git a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/ProjectNode.java b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/ProjectNode.java
index bcbe0de30..af264aefd 100644
--- a/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/ProjectNode.java
+++ b/ksql-engine/src/main/java/io/confluent/ksql/planner/plan/ProjectNode.java
@@ -89,7 +89,8 @@ public class ProjectNode extends PlanNode {
     return keyField;
   }
 
-  public List<SelectExpression> getProjectSelectExpressions() {
+  @Override
+  public List<SelectExpression> getSelectExpressions() {
     return projectExpressions;
   }
 
@@ -102,7 +103,7 @@ public class ProjectNode extends PlanNode {
   public SchemaKStream<?> buildStream(final KsqlQueryBuilder builder) {
     return getSource().buildStream(builder)
         .select(
-            getProjectSelectExpressions(),
+            getSelectExpressions(),
             builder.buildNodeContext(getId().toString()),
             builder
         );
diff --git a/ksql-engine/src/test/java/io/confluent/ksql/integration/SelectValueMapperIntegrationTest.java b/ksql-engine/src/test/java/io/confluent/ksql/integration/SelectValueMapperIntegrationTest.java
index a0897560a..985080fb6 100644
--- a/ksql-engine/src/test/java/io/confluent/ksql/integration/SelectValueMapperIntegrationTest.java
+++ b/ksql-engine/src/test/java/io/confluent/ksql/integration/SelectValueMapperIntegrationTest.java
@@ -83,7 +83,7 @@ public class SelectValueMapperIntegrationTest {
     final PlanNode planNode = AnalysisTestUtil.buildLogicalPlan(ksqlConfig, query, metaStore);
     final ProjectNode projectNode = (ProjectNode) planNode.getSources().get(0);
     final LogicalSchema schema = planNode.getTheSourceNode().getSchema();
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     return SelectValueMapperFactory.create(
         selectExpressions,
diff --git a/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/DataSourceNodeTest.java b/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/DataSourceNodeTest.java
index 455c59c08..008cb79ff 100644
--- a/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/DataSourceNodeTest.java
+++ b/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/DataSourceNodeTest.java
@@ -138,7 +138,8 @@ public class DataSourceNodeTest {
   private final DataSourceNode node = new DataSourceNode(
       PLAN_NODE_ID,
       SOME_SOURCE,
-      SOME_SOURCE.getName()
+      SOME_SOURCE.getName(),
+      Collections.emptyList()
   );
 
   private final QueryId queryId = new QueryId("source-test");
@@ -285,7 +286,8 @@ public class DataSourceNodeTest {
     final DataSourceNode node = new DataSourceNode(
         PLAN_NODE_ID,
         table,
-        table.getName());
+        table.getName(),
+        Collections.emptyList());
 
     final SchemaKStream result = buildStream(node);
     assertThat(result.getClass(), equalTo(SchemaKTable.class));
@@ -438,7 +440,8 @@ public class DataSourceNodeTest {
     return new DataSourceNode(
         realNodeId,
         dataSource,
-        SourceName.of("t")
+        SourceName.of("t"),
+        Collections.emptyList()
     );
   }
 
@@ -449,6 +452,7 @@ public class DataSourceNodeTest {
         PLAN_NODE_ID,
         dataSource,
         SourceName.of("name"),
+        Collections.emptyList(),
         schemaKStreamFactory
     );
   }
diff --git a/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/FilterNodeTest.java b/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/FilterNodeTest.java
index 842802126..98d25e7a3 100644
--- a/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/FilterNodeTest.java
+++ b/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/FilterNodeTest.java
@@ -24,6 +24,7 @@ import io.confluent.ksql.execution.builder.KsqlQueryBuilder;
 import io.confluent.ksql.execution.context.QueryContext.Stacker;
 import io.confluent.ksql.execution.expression.tree.Expression;
 import io.confluent.ksql.structured.SchemaKStream;
+import java.util.Collections;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -61,7 +62,7 @@ public class FilterNodeTest {
 
     when(ksqlStreamBuilder.buildNodeContext(nodeId.toString())).thenReturn(stacker);
 
-    node = new FilterNode(nodeId, sourceNode, predicate);
+    node = new FilterNode(nodeId, sourceNode, predicate, Collections.emptyList());
   }
 
   @Test
diff --git a/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/JoinNodeTest.java b/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/JoinNodeTest.java
index b936eeccf..1b60a80db 100644
--- a/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/JoinNodeTest.java
+++ b/ksql-engine/src/test/java/io/confluent/ksql/planner/plan/JoinNodeTest.java
@@ -213,6 +213,7 @@ public class JoinNodeTest {
     // When:
     new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -231,6 +232,7 @@ public class JoinNodeTest {
     // When:
     new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -245,6 +247,7 @@ public class JoinNodeTest {
     // When:
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinType.LEFT,
         left,
         right,
@@ -333,6 +336,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -364,6 +368,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.INNER,
         left,
         right,
@@ -395,6 +400,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.OUTER,
         left,
         right,
@@ -426,6 +432,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.INNER,
         left,
         right,
@@ -451,6 +458,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.OUTER,
         left,
         right,
@@ -480,6 +488,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -510,6 +519,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -537,6 +547,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -566,6 +577,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -595,6 +607,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.INNER,
         left,
         right,
@@ -624,6 +637,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.OUTER,
         left,
         right,
@@ -652,6 +666,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.OUTER,
         left,
         right,
@@ -681,6 +696,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -714,6 +730,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -744,6 +761,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.INNER,
         left,
         right,
@@ -771,6 +789,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
@@ -798,6 +817,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.OUTER,
         left,
         right,
@@ -827,6 +847,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.OUTER,
         left,
         right,
@@ -850,6 +871,7 @@ public class JoinNodeTest {
     // When:
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.OUTER,
         left,
         right,
@@ -880,6 +902,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.OUTER,
         left,
         right,
@@ -907,6 +930,7 @@ public class JoinNodeTest {
 
     final JoinNode joinNode = new JoinNode(
         nodeId,
+        Collections.emptyList(),
         JoinNode.JoinType.LEFT,
         left,
         right,
diff --git a/ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKStreamTest.java b/ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKStreamTest.java
index 2bd66a9df..b8c0a4a28 100644
--- a/ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKStreamTest.java
+++ b/ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKStreamTest.java
@@ -168,7 +168,7 @@ public class SchemaKStreamTest {
 
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
 
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream projectedSchemaKStream = initialSchemaKStream.select(
@@ -191,7 +191,7 @@ public class SchemaKStreamTest {
     final PlanNode logicalPlan = givenInitialKStreamOf(
         "SELECT col0, col2, col3 FROM test1 WHERE col0 > 100 EMIT CHANGES;");
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream projectedSchemaKStream = initialSchemaKStream.select(
@@ -219,7 +219,7 @@ public class SchemaKStreamTest {
     final PlanNode logicalPlan = givenInitialKStreamOf(
         "SELECT col0 as NEWKEY, col2, col3 FROM test1 EMIT CHANGES;");
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream result = initialSchemaKStream
@@ -238,7 +238,7 @@ public class SchemaKStreamTest {
     final PlanNode logicalPlan = givenInitialKStreamOf(
         "SELECT test1.col0 as NEWKEY, col2, col3 FROM test1 EMIT CHANGES;");
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream result = initialSchemaKStream
@@ -257,7 +257,7 @@ public class SchemaKStreamTest {
     final PlanNode logicalPlan = givenInitialKStreamOf(
         "SELECT t.col0 as NEWKEY, col2, col3 FROM test1 t EMIT CHANGES;");
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream result = initialSchemaKStream
@@ -275,7 +275,7 @@ public class SchemaKStreamTest {
     // Given:
     final PlanNode logicalPlan = givenInitialKStreamOf("SELECT * FROM test1 EMIT CHANGES;");
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream result = initialSchemaKStream
@@ -292,7 +292,7 @@ public class SchemaKStreamTest {
     // Given:
     final PlanNode logicalPlan = givenInitialKStreamOf("SELECT col2, col0, col3 FROM test1 EMIT CHANGES;");
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream result = initialSchemaKStream
@@ -310,7 +310,7 @@ public class SchemaKStreamTest {
     // Given:
     final PlanNode logicalPlan = givenInitialKStreamOf("SELECT col2, col3 FROM test1 EMIT CHANGES;");
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream result = initialSchemaKStream
@@ -325,7 +325,7 @@ public class SchemaKStreamTest {
     // Given:
     final PlanNode logicalPlan = givenInitialKStreamOf("SELECT * FROM test4 EMIT CHANGES;");
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    final List<SelectExpression> selectExpressions = projectNode.getProjectSelectExpressions();
+    final List<SelectExpression> selectExpressions = projectNode.getSelectExpressions();
 
     // When:
     final SchemaKStream result = initialSchemaKStream
@@ -344,7 +344,7 @@ public class SchemaKStreamTest {
 
     // When:
     final SchemaKStream projectedSchemaKStream = initialSchemaKStream.select(
-        projectNode.getProjectSelectExpressions(),
+        projectNode.getSelectExpressions(),
         childContextStacker,
         queryBuilder);
 
diff --git a/ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKTableTest.java b/ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKTableTest.java
index 1773307d5..07da5a061 100644
--- a/ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKTableTest.java
+++ b/ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKTableTest.java
@@ -283,7 +283,7 @@ public class SchemaKTableTest {
 
     // When:
     final SchemaKTable projectedSchemaKStream = initialSchemaKTable.select(
-        projectNode.getProjectSelectExpressions(),
+        projectNode.getSelectExpressions(),
         childContextStacker,
         queryBuilder
     );
@@ -308,7 +308,7 @@ public class SchemaKTableTest {
 
     // When:
     final SchemaKTable projectedSchemaKStream = initialSchemaKTable.select(
-        projectNode.getProjectSelectExpressions(),
+        projectNode.getSelectExpressions(),
         childContextStacker,
         queryBuilder
     );
@@ -320,7 +320,7 @@ public class SchemaKTableTest {
             ExecutionStepFactory.tableMapValues(
                 childContextStacker,
                 initialSchemaKTable.getSourceTableStep(),
-                projectNode.getProjectSelectExpressions(),
+                projectNode.getSelectExpressions(),
                 queryBuilder
             )
         )
@@ -337,7 +337,7 @@ public class SchemaKTableTest {
 
     // When:
     final SchemaKTable projectedSchemaKStream = initialSchemaKTable.select(
-        projectNode.getProjectSelectExpressions(),
+        projectNode.getSelectExpressions(),
         childContextStacker,
         queryBuilder
     );
@@ -846,7 +846,7 @@ public class SchemaKTableTest {
     );
 
     final ProjectNode projectNode = (ProjectNode) logicalPlan.getSources().get(0);
-    return projectNode.getProjectSelectExpressions();
+    return projectNode.getSelectExpressions();
   }
 
   private PlanNode buildLogicalPlan(final String query) {
