/*
 * Copyright 2019 Confluent Inc.
 *
 * Licensed under the Confluent Community License (the "License"); you may not use
 * this file except in compliance with the License.  You may obtain a copy of the
 * License at
 *
 * http://www.confluent.io/confluent-community-license
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

package io.confluent.ksql.engine;

import io.confluent.ksql.parser.tree.CreateAsSelect;
import io.confluent.ksql.parser.tree.InsertInto;
import io.confluent.ksql.parser.tree.Statement;
import io.confluent.ksql.planner.plan.PlanNode;
import io.confluent.ksql.services.ServiceContext;
import io.confluent.ksql.util.KsqlTopicAccessException;
import java.util.Set;
import org.apache.kafka.common.acl.AclOperation;

/**
 * Wraps a {@link ServiceContext} to validate access to Kafka topics.
 */
public final class TopicAccessValidator {
  private final ServiceContext serviceContext;

  private TopicAccessValidator(final ServiceContext serviceContext) {
    this.serviceContext = serviceContext;
  }

  /**
   * Creates a {@code TopicAccessValidator} that uses the specified {@code ServiceContext}
   * to check Kafka topic access.
   *
   * @param serviceContext The {@code ServiceContext} to use.
   * @return A {@code TopicAccessValidator} object.
   */
  public static TopicAccessValidator from(final ServiceContext serviceContext) {
    return new TopicAccessValidator(serviceContext);
  }

  /**
   * Verifies if all query source topics have read access.
   *
   * @param node The node generated by the {@code QueryEngine#buildLogicalPlan}.
   * @throws KsqlTopicAccessException If a topic does not exist or does not have permissions.
   */
  public void checkSourceTopicsPermissions(final PlanNode node) throws KsqlTopicAccessException {
    for (String kafkaTopic : node.getAllSourceKafkaTopics()) {
      checkAccess(kafkaTopic, AclOperation.READ);
    }
  }

  /**
   * Verifies if a non-query KSQL statement has permissions to access the required topics.
   *
   * @param statement The statement to verify for permissions.
   * @throws KsqlTopicAccessException If a topic does not exist or does not have permissions.
   */
  public void checkTargetTopicsPermissions(final Statement statement)
      throws KsqlTopicAccessException {
    if (statement instanceof InsertInto) {
      verifyInsertIntoPermissions((InsertInto) statement);
    } else if (statement instanceof CreateAsSelect) {
      verifyCreateAsSelectPermissions((CreateAsSelect) statement);
    }
  }

  private void verifyCreateAsSelectPermissions(final CreateAsSelect createAsSelect) {
    /*
     * Check permissions for CREATE STREAM and CREATE TABLE statements that will be persisted.
     *
     * This only validates the user can WRITE to the target topic if exists. If the topic does
     * not exist, the CREATE will be validated when KSQL attempts to create the topic using
     * the user ServiceContext (see TopicCreateInjector).
     *
     * The statement query should be validated by verifyQuerySourcesPermissions() when the
     * logical plan is created (see EngineExecutor.execute).
     */

    final String kafkaTopic = createAsSelect.getName().getSuffix();
    if (serviceContext.getTopicClient().isTopicExists(kafkaTopic)) {
      checkAccess(kafkaTopic, AclOperation.WRITE);
    }
  }

  private void verifyInsertIntoPermissions(final InsertInto insertInto) {
    /*
     * Check permissions for INSERT INTO statements that will be persisted.
     *
     * This only validates the user can WRITE to the target topic. The statement query
     * should be validated by verifyQuerySourcesPermissions() when the logical plan is
     * created (see EngineExecutor.execute)
     */

    final String kafkaTopic = insertInto.getTarget().getSuffix();
    checkAccess(kafkaTopic, AclOperation.WRITE);
  }

  /**
   * Checks if the ServiceContext has access to the topic with the specified AclOperation.
   */
  private void checkAccess(final String topicName, final AclOperation operation) {
    if (!topicAuthorizedOperations(topicName).contains(operation)) {
      throw new KsqlTopicAccessException(topicName);
    }
  }

  private Set<AclOperation> topicAuthorizedOperations(final String topicName) {
    return serviceContext.getTopicClient().describeTopic(topicName).authorizedOperations();
  }
}
