{
  "tests": [
    {
      "name": "validate JSON fails without elements",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='test_topic', value_format='JSON');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "The statement does not define any columns."
      }
    },
    {
      "name": "validate DELIMITED fails without elements",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='test_topic', value_format='DELIMITED');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "The statement does not define any columns."
      }
    },
    {
      "name": "validate AVRO ok without elements",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='input', value_format='AVRO');",
        "CREATE STREAM S WITH(PARTITIONS = 4) as SELECT * FROM test;"
      ],
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "c1", "type": "int"}]},
          "format": "AVRO"
        },
        {
          "name": "S",
          "format": "AVRO",
          "partitions": 4
        }
      ],
      "inputs": [{"topic": "input", "value": {"c1": 4}}],
      "outputs": [{"topic": "S", "value": {"C1": 4}}]
    },
    {
      "name": "validate AVRO ok with elements",
      "statements": [
        "CREATE STREAM TEST (c1 INT) WITH (kafka_topic='input', value_format='AVRO');",
        "CREATE STREAM S WITH(PARTITIONS = 4) as SELECT * FROM test;"
      ],
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "c1", "type": "int"}]},
          "format": "AVRO"
        },
        {
          "name": "S",
          "format": "AVRO",
          "partitions": 4
        }
      ],
      "inputs": [{"topic": "input", "value": {"c1": 4}}],
      "outputs": [{"topic": "S", "value": {"C1": 4}}]
    },
    {
      "name": "validate AVRO uses null for unknown element",
      "statements": [
        "CREATE STREAM TEST (c1 INT, unknown INT) WITH (kafka_topic='input', value_format='AVRO');",
        "CREATE STREAM S WITH(PARTITIONS = 4) as SELECT * FROM test;"
      ],
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "c1", "type": "int"}]},
          "format": "AVRO"
        },
        {
          "name": "S",
          "format": "AVRO",
          "partitions": 4
        }
      ],
      "inputs": [{"topic": "input", "value": {"c1": 4}}],
      "outputs": [{"topic": "S", "value": {"UNKNOWN": null, "C1": 4}}]
    },
    {
      "name": "validate AVRO fails on incompatible schema evolution",
      "statements": [
        "CREATE STREAM TEST (c1 INT) WITH (kafka_topic='input', value_format='AVRO');",
        "CREATE STREAM S WITH(PARTITIONS = 4) as SELECT * FROM test;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Cannot register avro schema for S as the schema registry rejected it, (maybe schema evolution issues?)"
      },
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "C1", "type": "int"}]},
          "format": "AVRO",
          "partitions": 4
        },
        {
          "name": "S",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "C1", "type": "double"}]},
          "format": "AVRO",
          "partitions": 4
        }
      ]
    },
    {
      "name": "non-join with only ROWKEY and ROWTIME in projection",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ROWTIME, ROWKEY FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"F0": 4}}],
      "outputs": [{"topic": "OUTPUT", "value": {}}]
    },
    {
      "name": "non-join removes ROWKEY and ROWTIME from output's value schema",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT F0, ROWTIME, ROWKEY FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"F0": 4}}],
      "outputs": [{"topic": "OUTPUT", "value": {"F0": 4}}]
    },
    {
      "name": "non-join leaves aliased ROWKEY and ROWTIME in output's value schema",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT F0, ROWTIME AS TIME, ROWKEY AS KEY FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "key": "k", "value": {"F0": 4}, "timestamp": 1}],
      "outputs": [{"topic": "OUTPUT", "key": "k", "value": {"F0": 4, "TIME": 1, "KEY": "k"}, "timestamp": 1}]
    },
    {
      "name": "join removes ROWKEY and ROWTIME from output's value schema",
      "statements": [
        "CREATE STREAM LEFT_STREAM (F0 INT) WITH (kafka_topic='left', value_format='JSON');",
        "CREATE STREAM RIGHT_STREAM (F1 INT) WITH (kafka_topic='right', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT l.ROWTIME AS ROWTIME, l.ROWKEY AS ROWKEY, f0, f1 FROM left_stream l join right_stream r WITHIN 1 seconds ON l.rowkey = r.rowkey;"
      ],
      "inputs": [
        {"topic": "left", "value": {"F0": 4}},
        {"topic": "right", "value": {"F1": 6}}
      ],
      "outputs": [{"topic": "OUTPUT", "value": {"F0": 4, "F1": 6}}]
    },
    {
      "name": "join leaves aliased ROWKEY and ROWTIME in output's value schema",
      "statements": [
        "CREATE STREAM LEFT_STREAM (F0 INT) WITH (kafka_topic='left', value_format='JSON');",
        "CREATE STREAM RIGHT_STREAM (F1 INT) WITH (kafka_topic='right', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT l.ROWTIME AS TIME, l.ROWKEY AS KEY, f0, f1 FROM left_stream l join right_stream r WITHIN 1 seconds ON l.rowkey = r.rowkey;"
      ],
      "inputs": [
        {"topic": "left", "key": "k", "value": {"F0": 4}, "timestamp": 1},
        {"topic": "right", "key": "k", "value": {"F1": 6}, "timestamp": 1}
      ],
      "outputs": [{"topic": "OUTPUT", "key": "k", "value": {"F0": 4, "F1": 6, "TIME": 1, "KEY": "k"}, "timestamp": 1}]
    },
    {
      "name": "group-by removes ROWKEY from output's value schema",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT ROWKEY, COUNT(*) AS COUNT FROM INPUT GROUP BY ROWKEY;"
      ],
      "inputs": [{"topic": "input", "key": "3" ,"value": {"F0": 4}}],
      "outputs": [{"topic": "OUTPUT", "key": "3" ,"value": {"COUNT": 1}}]
    },
    {
      "name": "group-by removes ROWTIME from output's value schema",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT ROWTIME, COUNT(*) AS COUNT FROM INPUT GROUP BY ROWTIME;"
      ],
      "inputs": [{"topic": "input", "value": {"F0": 4}, "timestamp": 10}],
      "outputs": [{"topic": "OUTPUT", "key": 10, "value": {"COUNT": 1}, "timestamp": 10}]
    },
    {
      "name": "non-join qualified select star",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT i.* FROM INPUT i;"
      ],
      "inputs": [{"topic": "input", "value": {"F0": 4}}],
      "outputs": [{"topic": "OUTPUT", "value": {"F0": 4}}]
    },
    {
      "name": "non-join select star with unknown qualifier",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT unknown.* FROM INPUT i;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "'UNKNOWN' is not a valid stream/table name or alias."
      }
    },
    {
      "name": "join qualified select star left",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT i1.* FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "inputs": [
        {"topic": "input_1", "key": 1, "value": {"F0": 4}, "timestamp": 10},
        {"topic": "input_2", "key": 1, "value": {"F0": 4}, "timestamp": 11}
      ],
      "outputs": [{"topic": "OUTPUT", "key": 1, "value": {"I1_ROWTIME": 10, "I1_ROWKEY": "1", "I1_F0": 4}, "timestamp": 11}]
    },
    {
      "name": "join qualified select star right",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT i2.* FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "inputs": [
        {"topic": "input_1", "key": 1, "value": {"F0": 4}, "timestamp": 10},
        {"topic": "input_2", "key": 1, "value": {"F0": 4}, "timestamp": 11}
      ],
      "outputs": [{"topic": "OUTPUT", "key": 1, "value": {"I2_ROWTIME": 11, "I2_ROWKEY": "1", "I2_F0": 4}, "timestamp": 11}]
    },
    {
      "name": "join unqualified select star",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT * FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "inputs": [
        {"topic": "input_1", "key": 1, "value": {"F0": 4}, "timestamp": 10},
        {"topic": "input_2", "key": 1, "value": {"F0": 4}, "timestamp": 11}
      ],
      "outputs": [{"topic": "OUTPUT", "key": 1, "value": {"I1_ROWTIME": 10, "I1_ROWKEY": "1", "I1_F0": 4, "I2_ROWTIME": 11, "I2_ROWKEY": "1", "I2_F0": 4}, "timestamp": 11}]
    },
    {
      "name": "join unknown qualified select star",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT unknown.* FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "'UNKNOWN' is not a valid stream/table name or alias."
      }
    },
    {
      "name": "non-join unknown field",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT unknown FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Field 'UNKNOWN' cannot be resolved."
      }
    },
    {
      "name": "join unknown field",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT unknown FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Field 'UNKNOWN' cannot be resolved."
      }
    },
    {
      "name": "join ambiguous field",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT F0 FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Field 'F0' is ambiguous."
      }
    }
  ]
}
