{
  "tests": [
    {
      "name": "validate without elements FAILS",
      "format": ["DELIMITED", "JSON", "KAFKA"],
      "statements": [
        "CREATE STREAM INPUT WITH (kafka_topic='input', value_format='{FORMAT}');"
      ],
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "c1", "type": "int"}]},
          "format": "AVRO"
        }
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "The statement does not define any columns."
      }
    },
    {
      "name": "validate without elements OK - AVRO",
      "statements": [
        "CREATE STREAM INPUT WITH (kafka_topic='input', value_format='AvRo');",
        "CREATE STREAM OUTPUT WITH(PARTITIONS = 4) as SELECT * FROM input;"
      ],
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "c1", "type": "int"}]},
          "format": "AVRO"
        },
        {
          "name": "OUTPUT",
          "format": "AVRO",
          "partitions": 4
        }
      ],
      "inputs": [{"topic": "input", "value": {"c1": 4}}],
      "outputs": [{"topic": "OUTPUT", "value": {"C1": 4}}]
    },
    {
      "name": "validate with elements OK",
      "format": ["JSON"],
      "statements": [
        "CREATE STREAM INPUT (V0 INT) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": 4}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": 4}}]
    },
    {
      "name": "validate with elements OK - AVRO",
      "statements": [
        "CREATE STREAM INPUT (V0 INT) WITH (kafka_topic='input', value_format='AVRO');",
        "CREATE STREAM OUTPUT WITH(PARTITIONS = 4) as SELECT * FROM input;"
      ],
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "v0", "type": "int"}]},
          "format": "AVRO"
        },
        {
          "name": "OUTPUT",
          "format": "AVRO",
          "partitions": 4
        }
      ],
      "inputs": [{"topic": "input", "value": {"v0": 4}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": 4}}]
    },
    {
      "name": "validate multiple value elements in C* FAILS - KAFKA",
      "statements": [
        "CREATE STREAM INPUT (V0 INT, V1 STRING) WITH (kafka_topic='input', value_format='KafkA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "The 'KAFKA' format only supports a single field. Got: V0 INT, V1 VARCHAR"
      }
    },
    {
      "name": "validate multiple value elements in C*AS FAILS - KAFKA",
      "statements": [
        "CREATE STREAM INPUT (V0 INT, V1 STRING) WITH (kafka_topic='input', value_format='DELIMITED');",
        "CREATE STREAM OUTPUT WITH (value_format='kafka') AS SELECT * FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "The 'KAFKA' format only supports a single field. Got: V0 INT, V1 VARCHAR"
      }
    },
    {
      "name": "validate boolean elements FAILS - KAFKA",
      "statements": [
        "CREATE STREAM INPUT (V0 BOOLEAN) WITH (kafka_topic='input', value_format='KAFKA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "The 'KAFKA' format does not support type 'BOOLEAN'"
      }
    },
    {
      "name": "validate boolean elements OK",
      "format": ["DELIMITED"],
      "statements": [
        "CREATE STREAM INPUT (V0 BOOLEAN) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": "true"}],
      "outputs": [{"topic": "OUTPUT", "value": "true"}]
    },
    {
      "name": "validate boolean elements OK",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (V0 BOOLEAN) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": true}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": true}}]
    },
    {
      "name": "validate int elements OK",
      "format": ["DELIMITED"],
      "statements": [
        "CREATE STREAM INPUT (V0 INT) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": "10"}],
      "outputs": [{"topic": "OUTPUT", "value": "10"}]
    },
    {
      "name": "validate int elements OK",
      "format": ["KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 INT) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": 10}],
      "outputs": [{"topic": "OUTPUT", "value": 10}]
    },
    {
      "name": "validate int elements OK",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (V0 INT) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": 10}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": 10}}]
    },
    {
      "name": "validate bigint elements OK",
      "format": ["DELIMITED"],
      "statements": [
        "CREATE STREAM INPUT (V0 BIGINT) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": "10000000000"}],
      "outputs": [{"topic": "OUTPUT", "value": "10000000000"}]
    },
    {
      "name": "validate bigint elements OK",
      "format": ["KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 BIGINT) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": 10000000000}],
      "outputs": [{"topic": "OUTPUT", "value": 10000000000}]
    },
    {
      "name": "validate bigint elements OK",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (V0 BIGINT) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": 10000000000}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": 10000000000}}]
    },
    {
      "name": "validate double elements OK",
      "format": ["DELIMITED"],
      "statements": [
        "CREATE STREAM INPUT (V0 DOUBLE) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": "10.1"}],
      "outputs": [{"topic": "OUTPUT", "value": "10.1"}]
    },
    {
      "name": "validate double elements OK",
      "format": ["KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 DOUBLE) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": 10.1}],
      "outputs": [{"topic": "OUTPUT", "value": 10.1}]
    },
    {
      "name": "validate double elements OK",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (V0 DOUBLE) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": 10.1}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": 10.1}}]
    },
    {
      "name": "validate string elements OK",
      "format": ["DELIMITED", "KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 STRING) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": "Hello"}],
      "outputs": [{"topic": "OUTPUT", "value": "Hello"}]
    },
    {
      "name": "validate string elements OK",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (V0 STRING) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": "Hello"}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": "Hello"}}]
    },
    {
      "name": "validate array element in C* FAILS",
      "format": ["DELIMITED", "KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 ARRAY<INT>) WITH (kafka_topic='input', value_format='{FORMAT}');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "format does not support type 'ARRAY'"
      }
    },
    {
      "name": "validate array element in C*AS FAILS",
      "format": ["DELIMITED", "KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 ARRAY<INT>) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT WITH (value_format='{FORMAT}') AS SELECT * FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "format does not support type 'ARRAY'"
      }
    },
    {
      "name": "validate array element OK",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (V0 ARRAY<INT>) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": [1]}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": [1]}}]
    },
    {
      "name": "validate map element in C* FAILS",
      "format": ["DELIMITED", "KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 MAP<STRING, INT>) WITH (kafka_topic='input', value_format='{FORMAT}');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "format does not support type 'MAP'"
      }
    },
    {
      "name": "validate map element in C*AS FAILS",
      "format": ["DELIMITED", "KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 MAP<STRING, INT>) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT WITH(value_format='{FORMAT}') AS SELECT * FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "format does not support type 'MAP'"
      }
    },
    {
      "name": "validate map element OK",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (V0 MAP<STRING, INT>) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": {"k1": 1}}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": {"k1": 1}}}]
    },
    {
      "name": "validate struct element in C* FAILS",
      "format": ["DELIMITED", "KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 STRUCT<F0 STRING>) WITH (kafka_topic='input', value_format='{FORMAT}');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "format does not support type 'STRUCT'"
      }
    },
    {
      "name": "validate struct element in C*AS FAILS",
      "format": ["DELIMITED", "KAFKA"],
      "statements": [
        "CREATE STREAM INPUT (V0 STRUCT<F0 STRING>) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT WITH(value_format='{FORMAT}') AS SELECT * FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "format does not support type 'STRUCT'"
      }
    },
    {
      "name": "validate struct element OK",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (V0 STRUCT<F0 STRING, F1 INT>) WITH (kafka_topic='input', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "value": {"V0": {"f0": "bob", "f1": 1}}}],
      "outputs": [{"topic": "OUTPUT", "value": {"V0": {"F0": "bob", "F1": 1}}}]
    },
    {
      "name": "validate AVRO uses null for unknown element",
      "statements": [
        "CREATE STREAM INPUT (c1 INT, unknown INT) WITH (kafka_topic='input', value_format='AVRO');",
        "CREATE STREAM S WITH(PARTITIONS = 4) as SELECT * FROM input;"
      ],
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "c1", "type": "int"}]},
          "format": "AVRO"
        },
        {
          "name": "S",
          "format": "AVRO",
          "partitions": 4
        }
      ],
      "inputs": [{"topic": "input", "value": {"c1": 4}}],
      "outputs": [{"topic": "S", "value": {"UNKNOWN": null, "C1": 4}}]
    },
    {
      "name": "validate AVRO fails on incompatible schema evolution",
      "statements": [
        "CREATE STREAM INPUT (c1 INT) WITH (kafka_topic='input', value_format='AVRO');",
        "CREATE STREAM OUTPUT WITH(PARTITIONS = 4) as SELECT * FROM input;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Cannot register avro schema for OUTPUT as the schema is incompatible with the current schema version registered for the topic.\nKSQL schema: {\"type\":\"record\",\"name\":\"KsqlDataSourceSchema\",\"namespace\":\"io.confluent.ksql.avro_schemas\",\"fields\":[{\"name\":\"C1\",\"type\":[\"null\",\"int\"],\"default\":null}],\"connect.name\":\"io.confluent.ksql.avro_schemas.KsqlDataSourceSchema\"}\nRegistered schema: {\"type\":\"record\",\"name\":\"blah\",\"fields\":[{\"name\":\"C1\",\"type\":\"double\"}]}"
      },
      "topics": [
        {
          "name": "input",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "C1", "type": "int"}]},
          "format": "AVRO",
          "partitions": 4
        },
        {
          "name": "OUTPUT",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "C1", "type": "double"}]},
          "format": "AVRO",
          "partitions": 4
        }
      ]
    },
    {
      "name": "non-join should reject ROWTIME in projection",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ROWTIME FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Reserved column name in select: `ROWTIME`. Please remove or alias the column."
      }
    },
    {
      "name": "non-join should reject ROWKEY in projection",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ROWKEY FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Reserved column name in select: `ROWKEY`. Please remove or alias the column."
      }
    },
    {
      "name": "non-join leaves aliased ROWKEY and ROWTIME in output's value schema",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT F0, ROWTIME AS TIME, ROWKEY AS KEY FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "key": "k", "value": {"F0": 4}, "timestamp": 1}],
      "outputs": [{"topic": "OUTPUT", "key": "k", "value": {"F0": 4, "TIME": 1, "KEY": "k"}, "timestamp": 1}]
    },
    {
      "name": "join should reject ROWTIME in projection",
      "statements": [
        "CREATE STREAM LEFT_STREAM (F0 INT) WITH (kafka_topic='left', value_format='JSON');",
        "CREATE STREAM RIGHT_STREAM (F1 INT) WITH (kafka_topic='right', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT l.ROWTIME AS ROWTIME, f0, f1 FROM left_stream l join right_stream r WITHIN 1 seconds ON l.rowkey = r.rowkey;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Reserved column name in select: `ROWTIME`. Please remove or alias the column."
      }
    },
    {
      "name": "join should reject ROWKEY in projection",
      "statements": [
        "CREATE STREAM LEFT_STREAM (F0 INT) WITH (kafka_topic='left', value_format='JSON');",
        "CREATE STREAM RIGHT_STREAM (F1 INT) WITH (kafka_topic='right', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT l.ROWKEY AS ROWKEY, f0, f1 FROM left_stream l join right_stream r WITHIN 1 seconds ON l.rowkey = r.rowkey;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Reserved column name in select: `ROWKEY`. Please remove or alias the column."
      }
    },
    {
      "name": "join leaves aliased ROWKEY and ROWTIME in output's value schema",
      "statements": [
        "CREATE STREAM LEFT_STREAM (F0 INT) WITH (kafka_topic='left', value_format='JSON');",
        "CREATE STREAM RIGHT_STREAM (F1 INT) WITH (kafka_topic='right', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT l.ROWTIME AS TIME, l.ROWKEY AS KEY, f0, f1 FROM left_stream l join right_stream r WITHIN 1 seconds ON l.rowkey = r.rowkey;"
      ],
      "inputs": [
        {"topic": "left", "key": "k", "value": {"F0": 4}, "timestamp": 1},
        {"topic": "right", "key": "k", "value": {"F1": 6}, "timestamp": 1}
      ],
      "outputs": [{"topic": "OUTPUT", "key": "k", "value": {"F0": 4, "F1": 6, "TIME": 1, "KEY": "k"}, "timestamp": 1}]
    },
    {
      "name": "group-by rejects ROWKEY in projection",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT ROWKEY, COUNT(*) AS COUNT FROM INPUT GROUP BY ROWKEY;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Reserved column name in select: `ROWKEY`. Please remove or alias the column."
      }
    },
    {
      "name": "non-join qualified select star",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT i.* FROM INPUT i;"
      ],
      "inputs": [{"topic": "input", "value": {"F0": 4}}],
      "outputs": [{"topic": "OUTPUT", "value": {"F0": 4}}]
    },
    {
      "name": "non-join select star with unknown qualifier",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT unknown.* FROM INPUT i;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "'UNKNOWN' is not a valid stream/table name or alias."
      }
    },
    {
      "name": "join qualified select star left",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT i1.* FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "inputs": [
        {"topic": "input_1", "key": "1", "value": {"F0": 4}, "timestamp": 10},
        {"topic": "input_2", "key": "1", "value": {"F0": 4}, "timestamp": 11}
      ],
      "outputs": [{"topic": "OUTPUT", "key": "1", "value": {"I1_ROWTIME": 10, "I1_ROWKEY": "1", "I1_F0": 4}, "timestamp": 11}]
    },
    {
      "name": "join qualified select star right",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT i2.* FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "inputs": [
        {"topic": "input_1", "key": "1", "value": {"F0": 4}, "timestamp": 10},
        {"topic": "input_2", "key": "1", "value": {"F0": 4}, "timestamp": 11}
      ],
      "outputs": [{"topic": "OUTPUT", "key": "1", "value": {"I2_ROWTIME": 11, "I2_ROWKEY": "1", "I2_F0": 4}, "timestamp": 11}]
    },
    {
      "name": "join unqualified select star",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT * FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "inputs": [
        {"topic": "input_1", "key": "1", "value": {"F0": 4}, "timestamp": 10},
        {"topic": "input_2", "key": "1", "value": {"F0": 4}, "timestamp": 11}
      ],
      "outputs": [{"topic": "OUTPUT", "key": "1", "value": {"I1_ROWTIME": 10, "I1_ROWKEY": "1", "I1_F0": 4, "I2_ROWTIME": 11, "I2_ROWKEY": "1", "I2_F0": 4}, "timestamp": 11}]
    },
    {
      "name": "join unknown qualified select star",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT unknown.* FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "'UNKNOWN' is not a valid stream/table name or alias."
      }
    },
    {
      "name": "non-join unknown field",
      "statements": [
        "CREATE STREAM INPUT (F0 INT) WITH (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT unknown FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Column 'INPUT.UNKNOWN' cannot be resolved."
      }
    },
    {
      "name": "join unknown field",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT unknown FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Column 'UNKNOWN' cannot be resolved"
      }
    },
    {
      "name": "join unknown field source",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT * FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON unknown.ROWKEY = i2.ROWKEY;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "'UNKNOWN' is not a valid stream/table name or alias."
      }
    },
    {
      "name": "join ambiguous field",
      "statements": [
        "CREATE STREAM INPUT_1 (F0 INT) WITH (kafka_topic='input_1', value_format='JSON');",
        "CREATE STREAM INPUT_2 (F0 INT) WITH (kafka_topic='input_2', value_format='JSON');",
        "CREATE STREAM OUTPUT as SELECT F0 FROM INPUT_1 i1 JOIN INPUT_2 i2 WITHIN 10 SECONDS ON i1.ROWKEY = i2.ROWKEY;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Column 'F0' is ambiguous."
      }
    }
  ]
}
