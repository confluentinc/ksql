{
  "comments": [
    "Tests for the EXPLODE table function"
  ],
  "tests": [
    {
      "name": "explode array with values",
      "statements": [
        "CREATE STREAM TEST (MY_ARR ARRAY<BIGINT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT EXPLODE(MY_ARR) VAL FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": {"MY_ARR": [1, 2]}},
        {"topic": "test_topic", "key": "1", "value": {"MY_ARR": [3, 4]}},
        {"topic": "test_topic", "key": "2", "value": {"MY_ARR": [5]}},
        {"topic": "test_topic", "key": "3", "value": {"MY_ARR": []}},
        {"topic": "test_topic", "key": "4", "value": {"MY_ARR": [6]}},
        {"topic": "test_topic", "key": "5", "value": {"MY_ARR":  null}},
        {"topic": "test_topic", "key": "6", "value": {"MY_ARR": [7]}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "0", "value": {"VAL": 1}},
        {"topic": "OUTPUT", "key": "0", "value": {"VAL": 2}},
        {"topic": "OUTPUT", "key": "1", "value": {"VAL": 3}},
        {"topic": "OUTPUT", "key": "1", "value": {"VAL": 4}},
        {"topic": "OUTPUT", "key": "2", "value": {"VAL": 5}},
        {"topic": "OUTPUT", "key": "4", "value": {"VAL": 6}},
        {"topic": "OUTPUT", "key": "6", "value": {"VAL": 7}}
      ]
    },
    {
      "name": "udfs with table functions and no aliases, verifies intermediate generated column names don't clash with aliases",
      "statements": [
        "CREATE STREAM TEST (MY_ARR ARRAY<BIGINT>, F1 BIGINT, F2 BIGINT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ABS(F1), EXPLODE(MY_ARR), ABS(F2) FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": {"F1": 1, "F2": 2, "MY_ARR": [1, 2]}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "0", "value": {"KSQL_COL_0": 1, "KSQL_COL_1": 1, "KSQL_COL_2": 2}},
        {"topic": "OUTPUT", "key": "0", "value": {"KSQL_COL_0": 1, "KSQL_COL_1": 2, "KSQL_COL_2": 2}}
      ]
    },
    {
      "name": "explode shouldn't accept map",
      "statements": [
        "CREATE STREAM TEST (MY_MAP MAP<INT, INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT EXPLODE(MY_MAP) FROM TEST;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Function 'explode' does not accept parameters of types:[MAP<STRING, INTEGER>]"
      }
    },
    {
      "name": "shouldn't be able to have table functions with aggregation",
      "statements": [
        "CREATE STREAM TEST (VAL INT, MY_MAP MAP<INT, INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT VAL, EXPLODE(MY_MAP), COUNT(*) FROM TEST GROUP BY VAL;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Table functions cannot be used with aggregations."
      }
    },
    {
      "name": "explode different types",
      "statements": [
        "CREATE STREAM TEST (F0 ARRAY<INT>, F1 ARRAY<BIGINT>, F2 ARRAY<DOUBLE>, F3 ARRAY<BOOLEAN>, F4 ARRAY<STRING>, F5 ARRAY<DECIMAL(20, 10)>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT EXPLODE(F0), EXPLODE(F1), EXPLODE(F2), EXPLODE(F3), EXPLODE(F4), EXPLODE(F5) FROM TEST;"
      ],
      "inputs": [
        {
          "topic": "test_topic", "key": "0", "value": {"F0": [1, 2], "F1": [2, 3], "F2": [3.1, 4.1], "F3": [true, false], "F4": ["foo", "bar"], "F5": [123.456, 456.123]}
        }
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "0", "value": {"KSQL_COL_0": 1, "KSQL_COL_1": 2, "KSQL_COL_2": 3.1, "KSQL_COL_3": true, "KSQL_COL_4": "foo", "KSQL_COL_5": 123.456}},
        {"topic": "OUTPUT", "key": "0", "value": {"KSQL_COL_0": 2, "KSQL_COL_1": 3, "KSQL_COL_2": 4.1, "KSQL_COL_3": false, "KSQL_COL_4": "bar", "KSQL_COL_5": 456.123}}
      ]
    }
  ]
}