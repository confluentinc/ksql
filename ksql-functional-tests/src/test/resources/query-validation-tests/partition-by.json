{
  "tests": [
    {
      "name": "partition by with projection select some",
      "statements": [
        "CREATE STREAM TEST (ID bigint, NAME varchar, VALUE bigint) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select name,id from TEST partition by name;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,zero,50"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "zero", "value": "zero,0"}
      ]
    },{
      "name": "partition by - KAFKA",
      "statements": [
        "CREATE STREAM INPUT (ID int) with (kafka_topic='input', value_format = 'KAFKA');",
        "CREATE STREAM OUTPUT AS select ID from INPUT partition by ID;"
      ],
      "inputs": [
        {"topic": "input", "key": "0", "value": 10}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "10", "value": 10}
      ]
    },
    {
      "name": "partition by with projection select all",
      "statements": [
        "CREATE STREAM TEST (ID bigint, NAME varchar, VALUE bigint) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select * from TEST partition by name;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,zero,50"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "zero", "value": "0,zero,50"}
      ]
    },
    {
      "name": "partition by with null value",
      "statements": [
        "CREATE STREAM TEST (ID bigint, NAME varchar, VALUE bigint) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select name,id from TEST partition by name;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": null},
        {"topic": "test_topic", "key": "0", "value": "0,zero,50"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "zero", "value": "zero,0"}
      ]
    },
    {
      "name": "partition by with null partition by value",
      "statements": [
        "CREATE STREAM TEST (ID bigint, NAME varchar, VALUE bigint) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select name,id from TEST partition by name;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,,1"},
        {"topic": "test_topic", "key": "0", "value": "0,zero,50"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "zero", "value": "zero,0"}
      ]
    },
    {
      "name": "aliased key field - different name",
      "statements": [
        "CREATE STREAM TEST (ID varchar, NAME varchar) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select ID + '_new' AS ID_new, NAME from TEST partition by ID_NEW;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Invalid identifier for PARTITION BY clause: 'ID_NEW'"
      }
    },
    {
      "name": "aliased key field - same name",
      "comments": [
        "See https://github.com/confluentinc/ksql/issues/2525"
      ],
      "statements": [
        "CREATE STREAM TEST (ID varchar, NAME varchar) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select ID + '_new' AS ID, NAME from TEST partition by ID;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,a"},
        {"topic": "test_topic", "key": "1", "value": "1,b"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "0", "value": "0_new,a"},
        {"topic": "REPARTITIONED", "key": "1", "value": "1_new,b"}
      ],
      "post": {
        "sources": [
          {"name": "REPARTITIONED", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "partition by project ROWKEY",
      "statements": [
        "CREATE STREAM INPUT (ID bigint) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select ROWKEY AS OLDKEY from INPUT partition by ID;"
      ],
      "inputs": [{"topic": "input", "key": "foo", "value": {"ID":  10}}],
      "outputs": [{"topic": "OUTPUT", "key": "10", "value": {"OLDKEY": "foo"}}]
    },
    {
      "name": "partition by ROWKEY",
      "statements": [
        "CREATE STREAM INPUT (ID bigint) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by ROWKEY;"
      ],
      "inputs": [{"topic": "input", "key": "10", "value": {"ID":  22}}],
      "outputs": [{"topic": "OUTPUT", "key": "10", "value": {"ID":  22}}],
      "post": {
        "topics": {
          "blacklist": ".*-repartition"
        }
      }
    },
    {
      "name": "partition by ROWTIME",
      "statements": [
        "CREATE STREAM INPUT (ID bigint) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by ROWTIME;"
      ],
      "inputs": [{"topic": "input", "value": {"ID":  22}, "timestamp": 10}],
      "outputs": [{"topic": "OUTPUT", "key": "10", "value": {"ID":  22}, "timestamp": 10}]
    },
    {
      "name": "partition by ROWKEY in join on non-ROWKEY",
      "statements": [
        "CREATE STREAM L (A STRING, B STRING) WITH (kafka_topic='LEFT', value_format='JSON', KEY='A');",
        "CREATE STREAM R (C STRING, D STRING) WITH (kafka_topic='RIGHT', value_format='JSON', KEY='C');",
        "CREATE STREAM OUTPUT AS SELECT L.A, L.B, R.C, R.D, L.ROWKEY, R.ROWKEY FROM L JOIN R WITHIN 10 SECONDS ON L.B = R.D PARTITION BY L.ROWKEY;"
      ],
      "comments": [
        "This test demonstrates a problem when we JOIN on a non-ROWKEY field and then PARTITION BY ",
        "a ROWKEY field. Note that the key is 'join' when it should be 'a' and the key-field is 'B' ",
        "when it should be 'L_ROWKEY'"
      ],
      "inputs": [
        {"topic": "LEFT", "key": "a", "value": {"A": "a", "B": "join"}},
        {"topic": "RIGHT", "key": "c", "value": {"C": "c", "D": "join"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "join", "value": {"A": "a", "B": "join", "C": "c", "D": "join", "L_ROWKEY": "a", "R_ROWKEY": "c"}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": "B"}
        ]
      }
    }
  ]
}
