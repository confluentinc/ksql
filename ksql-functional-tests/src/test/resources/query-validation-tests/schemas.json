{
  "comments": [
    "Test cases covering the different schemas supported."
  ],
  "tests": [
    {
      "name": "top level primitive - value",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "topics": [
        {
          "name": "input_topic",
          "schema": {"type": "int"},
          "format": "{FORMAT}"
        }
      ],
      "inputs": [
        {"topic": "input_topic", "value": 10}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"FOO": 10}}
      ]
    },
    {
      "name": "coerce top level primitive - value",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (foo STRING) WITH (kafka_topic='input_topic', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "topics": [
        {
          "name": "input_topic",
          "schema": {"type": "int"},
          "format": "{FORMAT}"
        }
      ],
      "inputs": [
        {"topic": "input_topic", "value": 10}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"FOO": "10"}}
      ]
    },
    {
      "name": "top level array - value",
      "comments": [
        "see github issue https://github.com/confluentinc/ksql/issues/1351"
      ],
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (foo ARRAY<STRING>) WITH (kafka_topic='input_topic', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "topics": [
        {
          "name": "input_topic",
          "schema": {"type": "array", "items": {"type": "string"}},
          "format": "{FORMAT}"
        }
      ],
      "inputs": [
        {"topic": "input_topic", "value": ["a", "b", "c"]}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"FOO": ["a", "b", "c"]}}
      ]
    },
    {
      "name": "coerce top level array - value",
      "format": ["JSON", "AVRO"],
      "statements": [
        "CREATE STREAM INPUT (foo ARRAY<STRING>) WITH (kafka_topic='input_topic', value_format='{FORMAT}');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "topics": [
        {
          "name": "input_topic",
          "schema": {"type": "array", "items": {"type": "string"}},
          "format": "{FORMAT}"
        }
      ],
      "inputs": [
        {"topic": "input_topic", "value": [1, 2, 3]}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"FOO": ["1", "2", "3"]}}
      ]
    },
    {
      "name": "top level map - value - AVRO",
      "comments": [
        "Note: top level maps are not supported in JSON, as it has no map type,",
        "and DELIMITED, as it does not support complex types",
        "Note: Because JSON does not support maps and this test case is written in Json, the test",
        "asserts the output schema is indeed a map, and not a record, by seeding the schema",
        "registry with a map schema. The test would fail with a schema evolution error if the OUTPUT",
        "schema had a record field as opposed to an map"
      ],
      "statements": [
        "CREATE STREAM INPUT (foo MAP<STRING, INT>) WITH (kafka_topic='input_topic', value_format='AVRO');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "topics": [
        {
          "name": "input_topic",
          "schema": {"type": "map", "values": "int"},
          "format": "AVRO"
        },
        {
          "name": "OUTPUT",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "FOO", "type": {"type": "map", "values": "int"}}]},
          "format": "AVRO"
        }
      ],
      "inputs": [
        {"topic": "input_topic", "value": {"a": 1, "b": 2, "c": 3}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"FOO": {"a": 1, "b": 2, "c": 3}}}
      ],
      "post": {
        "sources": [
          {
            "name": "INPUT",
            "type": "stream",
            "valueSchema": "STRUCT<ROWTIME BIGINT, ROWKEY STRING, FOO MAP<STRING, INT>>"
          }
        ]
      }
    },
    {
      "name": "coerce top level map - value - AVRO",
      "comments": [
        "Note: top level maps are not supported in JSON, as it has no map type,",
        "and DELIMITED, as it does not support complex types",
        "Note: Because JSON does not support maps and this test case is written in Json, the test",
        "asserts the output schema is indeed a map, and not a record, by seeding the schema",
        "registry with a map schema. The test would fail with a schema evolution error if the OUTPUT",
        "schema had a record field as opposed to an map"
      ],
      "statements": [
        "CREATE STREAM INPUT (foo MAP<STRING, STRING>) WITH (kafka_topic='input_topic', value_format='AVRO');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "topics": [
        {
          "name": "input_topic",
          "schema": {"type": "map", "values": "int"},
          "format": "AVRO"
        },
        {
          "name": "OUTPUT",
          "schema": {"name": "blah", "type": "record", "fields": [{"name": "FOO", "type": {"type": "map", "values": "int"}}]},
          "format": "AVRO"
        }
      ],
      "inputs": [
        {"topic": "input_topic", "value": {"a": 1, "b": 2, "c": 3}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"FOO": {"a": "1", "b": "2", "c": "3"}}}
      ],
      "post": {
        "sources": [
          {
            "name": "INPUT",
            "type": "stream",
            "valueSchema": "STRUCT<ROWTIME BIGINT, ROWKEY STRING, FOO MAP<STRING, STRING>>"
          }
        ]
      }
    }
  ]
}