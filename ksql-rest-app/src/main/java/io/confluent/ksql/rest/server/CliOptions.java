/**
 * Copyright 2017 Confluent Inc.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

package io.confluent.ksql.rest.server;

import com.github.rvesse.airline.HelpOption;
import com.github.rvesse.airline.SingleCommand;
import com.github.rvesse.airline.annotations.Command;
import com.github.rvesse.airline.annotations.Option;
import com.github.rvesse.airline.help.Help;
import com.github.rvesse.airline.parser.errors.ParseException;
import io.confluent.ksql.util.KsqlConfig;
import org.apache.kafka.streams.StreamsConfig;

import javax.inject.Inject;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

// TODO: Enable specification of properties here so that useful defaults for bootstrap server, port,
// etc. can be established in the ksql-server-start script

@Command(name = "KSQL-Server", description = "KSQL Cluster")
public class CliOptions {

    private static final String PROPERTIES_FILE_OPTION_NAME = "--properties-file";
    private static final String PROPERTIES_FILE_OPTION_DEFAULT = "/etc/ksql/ksqlserver.properties";

    private static final String QUICKSTART_OPTION_NAME = "--quickstart";
    private static final boolean QUICKSTART_OPTION_DEFAULT = false;

    private static final String KAFKA_BOOTSTRAP_SERVER_OPTION_NAME = "--bootstrap-server";
    private static final String KAFKA_BOOTSTRAP_SERVER_OPTION_DEFAULT = "localhost:9092";

    private static final String COMMAND_TOPIC_SUFFIX_OPTION_NAME = "--command-topic-suffix";
    private static final String COMMAND_TOPIC_SUFFIX_OPTION_DEFAULT = "commands";

    private static final String SERVICE_ID_OPTION_NAME = "--service-id";
    private static final String SERVICE_ID_OPTION_DEFAULT = KsqlConfig.KSQL_SERVICE_ID_DEFAULT;

    // Only here so that the help message generated by Help.help() is accurate
    @Inject
    public HelpOption help;

    @Option(
          name = PROPERTIES_FILE_OPTION_NAME,
      description = "A file specifying properties for the KSQL Server, KSQL, "
          + "and its underlying Kafka Streams instance(s)"
    )
    String propertiesFile = PROPERTIES_FILE_OPTION_DEFAULT;

    @Option(
            name = QUICKSTART_OPTION_NAME,
            description = "Whether to serve a quickstart file (located in the resources directory) "
                    + "at /quickstart.html"
    )
    boolean quickstart = QUICKSTART_OPTION_DEFAULT;

    @Option(
            name = KAFKA_BOOTSTRAP_SERVER_OPTION_NAME,
            description = "The Kafka server to connect to (defaults to "
                    + KAFKA_BOOTSTRAP_SERVER_OPTION_DEFAULT
                    + ")"
    )
    String bootstrapServer;

    @Option(
            name = COMMAND_TOPIC_SUFFIX_OPTION_NAME,
            description = "The suffix to append to the end of the name of the command topic "
                    + "(defaults to '"
                    + COMMAND_TOPIC_SUFFIX_OPTION_DEFAULT
                    + "')"
    )
    String commandTopicSuffix;

    @Option(
            name = SERVICE_ID_OPTION_NAME,
            description = "The application ID to use for the created Kafka Streams instance(s) "
                    + "(defaults to '"
                    + SERVICE_ID_OPTION_DEFAULT
                    + "')"
    )
    String serviceId;

    public String getPropertiesFile() {
        return propertiesFile;
    }


    public boolean getQuickstart() {
        return quickstart;
    }

    public Properties getStandaloneProperties() throws IOException {
        Properties properties = new Properties();
        addDefaultProperties(properties);
        addFileProperties(properties);
        addEnvironmentProperties(properties);
        addFlagProperties(properties);
        return properties;
    }

    private void addDefaultProperties(Properties properties) {
        properties.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, KAFKA_BOOTSTRAP_SERVER_OPTION_DEFAULT);
        properties.put(KsqlConfig.KSQL_SERVICE_ID_CONFIG, KsqlConfig.KSQL_SERVICE_ID_DEFAULT);
        properties.put(
                KsqlRestConfig.COMMAND_TOPIC_SUFFIX_CONFIG,
                COMMAND_TOPIC_SUFFIX_OPTION_DEFAULT
        );
        properties.put(StreamsConfig.APPLICATION_ID_CONFIG, KsqlConfig.KSQL_SERVICE_ID_DEFAULT);
    }

    private void addFileProperties(Properties properties) throws IOException {
        if (propertiesFile != null  && new File(propertiesFile).isFile()) {
                properties.load(new FileInputStream(propertiesFile));
            if (properties.containsKey(KsqlConfig.KSQL_SERVICE_ID_CONFIG)) {
                properties
                        .put(StreamsConfig.APPLICATION_ID_CONFIG,
                                properties.getProperty(KsqlConfig.KSQL_SERVICE_ID_CONFIG));
            } else {
                properties.put(StreamsConfig.APPLICATION_ID_CONFIG, KsqlConfig.KSQL_SERVICE_ID_DEFAULT);
            }
        }
    }

    private void addEnvironmentProperties(Properties properties) {
        String bootstrapServer = System.getenv("STREAMS_BOOTSTRAP_SERVERS");
        String listeners = System.getenv("KSQL_SERVER_LISTENERS");
        if ( bootstrapServer != null) {
            properties.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);
        }
        if ( listeners != null) {
            properties.put(KsqlRestConfig.LISTENERS_CONFIG, listeners);
        }
    }


    private void addFlagProperties(Properties properties) {
        if (bootstrapServer != null) {
            properties.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServer);
        }
        if (serviceId != null) {
            properties.put(StreamsConfig.APPLICATION_ID_CONFIG, serviceId);
            properties.put(KsqlConfig.KSQL_SERVICE_ID_CONFIG, serviceId);
        }
        if (commandTopicSuffix != null) {
            properties.put(KsqlRestConfig.COMMAND_TOPIC_SUFFIX_CONFIG, commandTopicSuffix);
        }
    }

    public static CliOptions parse(String[] args) throws IOException {

        SingleCommand<CliOptions> optionsParser = SingleCommand.singleCommand(CliOptions.class);

        // If just a help flag is given, an exception will be thrown due to missing required options;
        // hence, this workaround
        for (String arg : args) {
            if ("--help".equals(arg) || "-h".equals(arg)) {
                Help.help(optionsParser.getCommandMetadata());
                return null;
            }
        }

        try {
            return optionsParser.parse(args);
        } catch (ParseException exception) {
            if (exception.getMessage() != null) {
                System.err.println(exception.getMessage());
            } else {
                System.err.println("Options parsing failed for an unknown reason");
            }
            System.err.println("See the -h or --help flags for usage information");
            return null;
        }
    }
}
