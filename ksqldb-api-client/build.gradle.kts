import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.confluent.ksql.java-conventions")
}

dependencies {
    implementation(project(":ksqldb-rest-model"))
    implementation(project(":ksqldb-common"))
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.2")
    implementation("io.vertx:vertx-core:4.3.2")
    implementation("io.vertx:vertx-codegen:4.3.2")
    implementation("org.reactivestreams:reactive-streams:1.0.3")
    implementation("com.google.guava:guava:30.1.1-jre")
    implementation("com.github.spotbugs:spotbugs-annotations:4.7.1")
    testImplementation(project(":ksqldb-rest-app"))
    testImplementation(project(mapOf("path" to ":ksqldb-rest-app", "configuration" to "testOutput")))
    testImplementation(project(":ksqldb-test-util"))
    testImplementation(project(mapOf("path" to ":ksqldb-engine", "configuration" to "testOutput")))
    testImplementation(project(":ksqldb-execution")) // TODO: find transitive source
    testImplementation(project(":ksqldb-parser")) // TODO: find transitive source
    testImplementation(project(":ksqldb-rest-client")) // TODO: find transitive source
    testImplementation(project(":ksqldb-engine")) // TODO: find transitive source
    testImplementation("org.apache.kafka:kafka-streams:7.4.0-27-ccs")
    testImplementation("org.eclipse.jetty:jetty-jaas:9.4.44.v20210927")
}

description = "ksqldb-api-client"

val testsJar by tasks.registering(Jar::class) {
    archiveClassifier.set("tests")
    from(sourceSets["test"].output)
}

(publishing.publications["maven"] as MavenPublication).artifact(testsJar)

// shaded jar
tasks.named<ShadowJar>("shadowJar") {
    relocate("com.fasterxml", "io.confluent.shaded.com.fasterxml")
    relocate("com.google", "io.confluent.shaded.com.google")
    relocate("com.googlecode", "io.confluent.shaded.com.googlecode")
    relocate("org.reactivestreams", "io.confluent.shaded.org.reactivestreams")
    relocate("io.netty", "io.confluent.shaded.io.netty")
    relocate("io.vertx", "io.confluent.shaded.io.vertx")
    relocate("org.slf4j", "io.confluent.shaded.org.slf4j")
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer())
    classifier = "with-dependencies"
}

// incomplete javadoc task
tasks.named<Javadoc>("javadoc") {
    source = sourceSets.main.get().allJava
    exclude("**/util/**", "**/impl/**")
    options {
        source = "8"
//        stylesheetFile =
        destinationDirectory = File("../docs/developer-guide/ksqldb-clients/java-client/api")
        header = "<a class=\"docs-home\" href=\"https://docs.ksqldb.io\"><img src=\"https://docs.ksqldb.io/img/logo.png\" alt=\"logo\"><span>ksqlDB</span></a>\n" +
                "<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n" +
                "-new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n" +
                "-j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n" +
                "-'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n" +
                "-})(window,document,'script','dataLayer','GTM-WRL2Z8Z');</script>"
//        footer = "&#xA0;"
    }
}