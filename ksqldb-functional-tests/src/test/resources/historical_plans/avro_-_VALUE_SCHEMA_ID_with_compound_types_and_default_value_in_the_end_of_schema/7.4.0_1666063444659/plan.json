{
  "plan" : [ {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM TXS (`id` STRING, `transaction` STRING) WITH (KAFKA_TOPIC='transaction', KEY_FORMAT='KAFKA', VALUE_FORMAT='JSON');",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "TXS",
      "schema" : "`id` STRING, `transaction` STRING",
      "timestampColumn" : null,
      "topicName" : "transaction",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA",
          "properties" : { }
        },
        "valueFormat" : {
          "format" : "JSON",
          "properties" : { }
        }
      },
      "windowInfo" : null,
      "orReplace" : false,
      "isSource" : false
    },
    "queryPlan" : null
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM TXS_REKEY WITH (KAFKA_TOPIC='transaction-rekey', KEY_FORMAT='KAFKA', VALUE_FORMAT='JSON') AS SELECT\n  TXS.`id` `id`,\n  TXS.`transaction` `transaction`\nFROM TXS TXS\nPARTITION BY TXS.`id`\nEMIT CHANGES",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "TXS_REKEY",
      "schema" : "`id` STRING KEY, `transaction` STRING",
      "timestampColumn" : null,
      "topicName" : "transaction-rekey",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA",
          "properties" : { }
        },
        "valueFormat" : {
          "format" : "JSON",
          "properties" : { }
        }
      },
      "windowInfo" : null,
      "orReplace" : false,
      "isSource" : false
    },
    "queryPlan" : {
      "sources" : [ "TXS" ],
      "sink" : "TXS_REKEY",
      "physicalPlan" : {
        "@type" : "streamSinkV1",
        "properties" : {
          "queryContext" : "TXS_REKEY"
        },
        "source" : {
          "@type" : "streamSelectV1",
          "properties" : {
            "queryContext" : "Project"
          },
          "source" : {
            "@type" : "streamSelectKeyV2",
            "properties" : {
              "queryContext" : "PartitionBy"
            },
            "source" : {
              "@type" : "streamSourceV1",
              "properties" : {
                "queryContext" : "KsqlTopic/Source"
              },
              "topicName" : "transaction",
              "formats" : {
                "keyFormat" : {
                  "format" : "KAFKA",
                  "properties" : { }
                },
                "valueFormat" : {
                  "format" : "JSON",
                  "properties" : { }
                }
              },
              "timestampColumn" : null,
              "sourceSchema" : "`id` STRING, `transaction` STRING",
              "pseudoColumnVersion" : 1
            },
            "keyExpression" : [ "`id`" ]
          },
          "keyColumnNames" : [ "id" ],
          "selectedKeys" : null,
          "selectExpressions" : [ "`transaction` AS `transaction`" ]
        },
        "formats" : {
          "keyFormat" : {
            "format" : "KAFKA",
            "properties" : { }
          },
          "valueFormat" : {
            "format" : "JSON",
            "properties" : { }
          }
        },
        "topicName" : "transaction-rekey",
        "timestampColumn" : null
      },
      "queryId" : "CSAS_TXS_REKEY_0",
      "runtimeId" : null
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM MODEL_TXS_EVENT WITH (KAFKA_TOPIC='model-transaction', KEY_FORMAT='KAFKA', VALUE_FORMAT='AVRO', VALUE_SCHEMA_FULL_NAME='com.acme.namespace.Transaction', VALUE_SCHEMA_ID=102) AS SELECT\n  TXS.`id` `id`,\n  AS_VALUE(TXS.`id`) `eventID`,\n  STRUCT(`num_shares`:=CAST(EXTRACTJSONFIELD(TXS.`transaction`, '$.num_shares') AS INTEGER), `amount`:=CAST(EXTRACTJSONFIELD(TXS.`transaction`, '$.amount') AS INTEGER), `customer`:=STRUCT(`first_name`:=EXTRACTJSONFIELD(TXS.`transaction`, '$.customer.first_name'), `last_name`:=EXTRACTJSONFIELD(TXS.`transaction`, '$.customer.last_name'), `email`:=EXTRACTJSONFIELD(TXS.`transaction`, '$.customer.email'))) `transaction`\nFROM TXS_REKEY TXS\nEMIT CHANGES",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "MODEL_TXS_EVENT",
      "schema" : "`id` STRING KEY, `eventID` STRING, `transaction` STRUCT<`num_shares` INTEGER, `amount` INTEGER, `customer` STRUCT<`first_name` STRING, `last_name` STRING, `email` STRING>>",
      "timestampColumn" : null,
      "topicName" : "model-transaction",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA",
          "properties" : { }
        },
        "valueFormat" : {
          "format" : "AVRO",
          "properties" : {
            "fullSchemaName" : "com.acme.namespace.Transaction",
            "schemaId" : "102"
          }
        }
      },
      "windowInfo" : null,
      "orReplace" : false,
      "isSource" : false
    },
    "queryPlan" : {
      "sources" : [ "TXS_REKEY" ],
      "sink" : "MODEL_TXS_EVENT",
      "physicalPlan" : {
        "@type" : "streamSinkV1",
        "properties" : {
          "queryContext" : "MODEL_TXS_EVENT"
        },
        "source" : {
          "@type" : "streamSelectV1",
          "properties" : {
            "queryContext" : "Project"
          },
          "source" : {
            "@type" : "streamSourceV1",
            "properties" : {
              "queryContext" : "KsqlTopic/Source"
            },
            "topicName" : "transaction-rekey",
            "formats" : {
              "keyFormat" : {
                "format" : "KAFKA",
                "properties" : { }
              },
              "valueFormat" : {
                "format" : "JSON",
                "properties" : { }
              }
            },
            "timestampColumn" : null,
            "sourceSchema" : "`id` STRING KEY, `transaction` STRING",
            "pseudoColumnVersion" : 1
          },
          "keyColumnNames" : [ "id" ],
          "selectedKeys" : null,
          "selectExpressions" : [ "AS_VALUE(`id`) AS `eventID`", "STRUCT(`num_shares`:=CAST(EXTRACTJSONFIELD(`transaction`, '$.num_shares') AS INTEGER), `amount`:=CAST(EXTRACTJSONFIELD(`transaction`, '$.amount') AS INTEGER), `customer`:=STRUCT(`first_name`:=EXTRACTJSONFIELD(`transaction`, '$.customer.first_name'), `last_name`:=EXTRACTJSONFIELD(`transaction`, '$.customer.last_name'), `email`:=EXTRACTJSONFIELD(`transaction`, '$.customer.email'))) AS `transaction`" ]
        },
        "formats" : {
          "keyFormat" : {
            "format" : "KAFKA",
            "properties" : { }
          },
          "valueFormat" : {
            "format" : "AVRO",
            "properties" : {
              "fullSchemaName" : "com.acme.namespace.Transaction",
              "schemaId" : "102"
            }
          }
        },
        "topicName" : "model-transaction",
        "timestampColumn" : null
      },
      "queryId" : "CSAS_MODEL_TXS_EVENT_1",
      "runtimeId" : null
    }
  } ],
  "configs" : {
    "ksql.extension.dir" : "ext",
    "ksql.streams.cache.max.bytes.buffering" : "0",
    "metric.reporters" : "",
    "ksql.query.status.running.threshold.seconds" : "300",
    "ksql.connect.basic.auth.credentials.reload" : "false",
    "ksql.output.topic.name.prefix" : "",
    "ksql.query.pull.stream.enabled" : "true",
    "ksql.query.push.v2.interpreter.enabled" : "true",
    "ksql.queryanonymizer.logs_enabled" : "true",
    "ksql.variable.substitution.enable" : "true",
    "ksql.streams.shutdown.timeout.ms" : "300000",
    "ksql.query.pull.max.allowed.offset.lag" : "9223372036854775807",
    "ksql.query.pull.max.qps" : "2147483647",
    "ksql.access.validator.enable" : "auto",
    "ksql.streams.bootstrap.servers" : "localhost:0",
    "ksql.query.pull.metrics.enabled" : "true",
    "ksql.metrics.extension" : null,
    "ksql.query.push.v2.alos.enabled" : "true",
    "ksql.query.push.v2.max.hourly.bandwidth.megabytes" : "2147483647",
    "ksql.query.pull.range.scan.enabled" : "true",
    "ksql.transient.query.cleanup.service.initial.delay.seconds" : "600",
    "ksql.hidden.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.lambdas.enabled" : "true",
    "ksql.source.table.materialization.enabled" : "true",
    "ksql.query.pull.max.hourly.bandwidth.megabytes" : "2147483647",
    "ksql.sink.window.change.log.additional.retention" : "1000000",
    "ksql.query.persistent.active.limit" : "2147483647",
    "ksql.websocket.connection.max.timeout.ms" : "3600000",
    "ksql.persistence.wrap.single.values" : null,
    "ksql.query.transient.max.bytes.buffering.total" : "-1",
    "ksql.connect.basic.auth.credentials.source" : "NONE",
    "ksql.schema.registry.url" : "schema_registry.url:0",
    "ksql.properties.overrides.denylist" : "",
    "ksql.service.id" : "some.ksql.service.id",
    "ksql.query.push.v2.max.catchup.consumers" : "5",
    "ksql.assert.topic.default.timeout.ms" : "1000",
    "ksql.query.push.v2.enabled" : "false",
    "ksql.transient.query.cleanup.service.enable" : "true",
    "ksql.query.push.v2.metrics.enabled" : "true",
    "ksql.streams.commit.interval.ms" : "2000",
    "ksql.query.pull.table.scan.enabled" : "true",
    "ksql.streams.auto.commit.interval.ms" : "0",
    "ksql.streams.topology.optimization" : "all",
    "ksql.endpoint.migrate.query" : "true",
    "ksql.query.push.v2.registry.installed" : "false",
    "ksql.streams.num.stream.threads" : "4",
    "ksql.metrics.tags.custom" : "",
    "ksql.query.push.v2.catchup.consumer.msg.window" : "50",
    "ksql.runtime.feature.shared.enabled" : "false",
    "ksql.udf.collect.metrics" : "false",
    "ksql.new.query.planner.enabled" : "false",
    "ksql.connect.request.headers.plugin" : null,
    "ksql.security.extension.class" : null,
    "ksql.transient.prefix" : "transient_",
    "ksql.headers.columns.enabled" : "true",
    "ksql.streams.default.deserialization.exception.handler" : "io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler",
    "ksql.connect.request.timeout.ms" : "5000",
    "ksql.query.pull.enable.standby.reads" : "false",
    "ksql.persistence.default.format.key" : "KAFKA",
    "ksql.query.persistent.max.bytes.buffering.total" : "-1",
    "ksql.query.error.max.queue.size" : "10",
    "ksql.query.cleanup.shutdown.timeout.ms" : "30000",
    "ksql.internal.topic.min.insync.replicas" : "1",
    "ksql.internal.topic.replicas" : "1",
    "ksql.insert.into.values.enabled" : "true",
    "ksql.queryanonymizer.cluster_namespace" : null,
    "ksql.create.or.replace.enabled" : "true",
    "ksql.shared.runtimes.count" : "2",
    "ksql.cast.strings.preserve.nulls" : "true",
    "ksql.authorization.cache.max.entries" : "10000",
    "ksql.pull.queries.enable" : "true",
    "ksql.transient.query.cleanup.service.period.seconds" : "600",
    "ksql.suppress.enabled" : "true",
    "ksql.readonly.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.connect.basic.auth.credentials.file" : "",
    "ksql.authorization.cache.expiry.time.secs" : "30",
    "ksql.query.retry.backoff.initial.ms" : "15000",
    "ksql.query.pull.max.concurrent.requests" : "2147483647",
    "ksql.streams.auto.offset.reset" : "earliest",
    "ksql.connect.url" : "http://localhost:8083",
    "ksql.query.push.v2.new.latest.delay.ms" : "5000",
    "ksql.query.push.v2.latest.reset.age.ms" : "30000",
    "ksql.streams.default.production.exception.handler" : "io.confluent.ksql.errors.ProductionExceptionHandlerUtil$LogAndFailProductionExceptionHandler",
    "ksql.query.pull.interpreter.enabled" : "true",
    "ksql.json_sr.converter.deserializer.enabled" : "true",
    "ksql.assert.schema.default.timeout.ms" : "1000",
    "ksql.query.pull.limit.clause.enabled" : "true",
    "ksql.query.pull.router.thread.pool.size" : "50",
    "ksql.query.push.v2.continuation.tokens.enabled" : "false",
    "ksql.query.retry.backoff.max.ms" : "900000",
    "ksql.timestamp.throw.on.invalid" : "false",
    "ksql.persistence.default.format.value" : null,
    "ksql.udfs.enabled" : "true",
    "ksql.udf.enable.security.manager" : "true",
    "ksql.connect.worker.config" : "",
    "ksql.nested.error.set.null" : "true",
    "ksql.query.pull.thread.pool.size" : "50",
    "ksql.persistent.prefix" : "query_",
    "ksql.metastore.backup.location" : "",
    "ksql.error.classifier.regex" : "",
    "ksql.suppress.buffer.size.bytes" : "-1"
  }
}