{
  "plan" : [ {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM RUSSELL_3K_TRADES (TICKERID STRING KEY, QUANTITY INTEGER, PRICE INTEGER, BUY BOOLEAN) WITH (KAFKA_TOPIC='test_topic', VALUE_FORMAT='json');",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "RUSSELL_3K_TRADES",
      "schema" : "`TICKERID` STRING KEY, `QUANTITY` INTEGER, `PRICE` INTEGER, `BUY` BOOLEAN",
      "topicName" : "test_topic",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      }
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE TABLE RUSSELL_3K_HOURLY AS SELECT\n  RUSSELL_3K_TRADES.TICKERID TICKERID,\n  COUNT(*) TRADECOUNT,\n  SUM(RUSSELL_3K_TRADES.QUANTITY) TRADEVOLUMN,\n  MIN((CASE WHEN RUSSELL_3K_TRADES.BUY THEN RUSSELL_3K_TRADES.PRICE ELSE null END)) MINBUYPRICE,\n  MAX((CASE WHEN RUSSELL_3K_TRADES.BUY THEN RUSSELL_3K_TRADES.PRICE ELSE null END)) MAXBUYPRICE,\n  MIN((CASE WHEN RUSSELL_3K_TRADES.BUY THEN null ELSE RUSSELL_3K_TRADES.PRICE END)) MINSELLPRICE,\n  MAX((CASE WHEN RUSSELL_3K_TRADES.BUY THEN null ELSE RUSSELL_3K_TRADES.PRICE END)) MAXSELLPRICE\nFROM RUSSELL_3K_TRADES RUSSELL_3K_TRADES\nWINDOW TUMBLING ( SIZE 1 HOURS ) \nGROUP BY RUSSELL_3K_TRADES.TICKERID\nEMIT CHANGES",
    "ddlCommand" : {
      "@type" : "createTableV1",
      "sourceName" : "RUSSELL_3K_HOURLY",
      "schema" : "`TICKERID` STRING KEY, `TRADECOUNT` BIGINT, `TRADEVOLUMN` INTEGER, `MINBUYPRICE` INTEGER, `MAXBUYPRICE` INTEGER, `MINSELLPRICE` INTEGER, `MAXSELLPRICE` INTEGER",
      "topicName" : "RUSSELL_3K_HOURLY",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      },
      "windowInfo" : {
        "type" : "TUMBLING",
        "size" : 3600.000000000
      }
    },
    "queryPlan" : {
      "sources" : [ "RUSSELL_3K_TRADES" ],
      "sink" : "RUSSELL_3K_HOURLY",
      "physicalPlan" : {
        "@type" : "tableSinkV1",
        "properties" : {
          "queryContext" : "RUSSELL_3K_HOURLY"
        },
        "source" : {
          "@type" : "tableSelectV1",
          "properties" : {
            "queryContext" : "Aggregate/Project"
          },
          "source" : {
            "@type" : "streamWindowedAggregateV1",
            "properties" : {
              "queryContext" : "Aggregate/Aggregate"
            },
            "source" : {
              "@type" : "streamGroupByKeyV1",
              "properties" : {
                "queryContext" : "Aggregate/GroupBy"
              },
              "source" : {
                "@type" : "streamSelectV1",
                "properties" : {
                  "queryContext" : "Aggregate/Prepare"
                },
                "source" : {
                  "@type" : "streamSourceV1",
                  "properties" : {
                    "queryContext" : "KsqlTopic/Source"
                  },
                  "topicName" : "test_topic",
                  "formats" : {
                    "keyFormat" : {
                      "format" : "KAFKA"
                    },
                    "valueFormat" : {
                      "format" : "JSON"
                    }
                  },
                  "sourceSchema" : "`TICKERID` STRING KEY, `QUANTITY` INTEGER, `PRICE` INTEGER, `BUY` BOOLEAN"
                },
                "keyColumnNames" : [ "TICKERID" ],
                "selectExpressions" : [ "TICKERID AS TICKERID", "ROWTIME AS ROWTIME", "QUANTITY AS QUANTITY", "BUY AS BUY", "PRICE AS PRICE", "(CASE WHEN BUY THEN PRICE ELSE null END) AS KSQL_INTERNAL_COL_5", "(CASE WHEN BUY THEN null ELSE PRICE END) AS KSQL_INTERNAL_COL_6" ]
              },
              "internalFormats" : {
                "keyFormat" : {
                  "format" : "KAFKA"
                },
                "valueFormat" : {
                  "format" : "JSON"
                }
              }
            },
            "internalFormats" : {
              "keyFormat" : {
                "format" : "KAFKA"
              },
              "valueFormat" : {
                "format" : "JSON"
              }
            },
            "nonAggregateColumns" : [ "TICKERID", "ROWTIME", "QUANTITY", "BUY", "PRICE" ],
            "aggregationFunctions" : [ "COUNT(ROWTIME)", "SUM(QUANTITY)", "MIN(KSQL_INTERNAL_COL_5)", "MAX(KSQL_INTERNAL_COL_5)", "MIN(KSQL_INTERNAL_COL_6)", "MAX(KSQL_INTERNAL_COL_6)" ],
            "windowExpression" : " TUMBLING ( SIZE 1 HOURS ) "
          },
          "keyColumnNames" : [ "TICKERID" ],
          "selectExpressions" : [ "KSQL_AGG_VARIABLE_0 AS TRADECOUNT", "KSQL_AGG_VARIABLE_1 AS TRADEVOLUMN", "KSQL_AGG_VARIABLE_2 AS MINBUYPRICE", "KSQL_AGG_VARIABLE_3 AS MAXBUYPRICE", "KSQL_AGG_VARIABLE_4 AS MINSELLPRICE", "KSQL_AGG_VARIABLE_5 AS MAXSELLPRICE" ]
        },
        "formats" : {
          "keyFormat" : {
            "format" : "KAFKA"
          },
          "valueFormat" : {
            "format" : "JSON"
          }
        },
        "topicName" : "RUSSELL_3K_HOURLY"
      },
      "queryId" : "CTAS_RUSSELL_3K_HOURLY_0"
    }
  } ],
  "configs" : {
    "ksql.extension.dir" : "ext",
    "ksql.streams.cache.max.bytes.buffering" : "0",
    "ksql.security.extension.class" : null,
    "ksql.transient.prefix" : "transient_",
    "ksql.persistence.wrap.single.values" : "true",
    "ksql.authorization.cache.expiry.time.secs" : "30",
    "ksql.schema.registry.url" : "",
    "ksql.streams.default.deserialization.exception.handler" : "io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler",
    "ksql.output.topic.name.prefix" : "",
    "ksql.streams.auto.offset.reset" : "earliest",
    "ksql.query.pull.enable.standby.reads" : "false",
    "ksql.connect.url" : "http://localhost:8083",
    "ksql.service.id" : "some.ksql.service.id",
    "ksql.internal.topic.min.insync.replicas" : "1",
    "ksql.streams.shutdown.timeout.ms" : "300000",
    "ksql.internal.topic.replicas" : "1",
    "ksql.insert.into.values.enabled" : "true",
    "ksql.query.pull.max.allowed.offset.lag" : "9223372036854775807",
    "ksql.query.pull.max.qps" : "2147483647",
    "ksql.streams.default.production.exception.handler" : "io.confluent.ksql.errors.ProductionExceptionHandlerUtil$LogAndFailProductionExceptionHandler",
    "ksql.access.validator.enable" : "auto",
    "ksql.streams.bootstrap.servers" : "localhost:0",
    "ksql.streams.commit.interval.ms" : "2000",
    "ksql.metric.reporters" : "",
    "ksql.query.pull.metrics.enabled" : "false",
    "ksql.streams.auto.commit.interval.ms" : "0",
    "ksql.metrics.extension" : null,
    "ksql.streams.topology.optimization" : "all",
    "ksql.hidden.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.streams.num.stream.threads" : "4",
    "ksql.timestamp.throw.on.invalid" : "false",
    "ksql.authorization.cache.max.entries" : "10000",
    "ksql.metrics.tags.custom" : "",
    "ksql.pull.queries.enable" : "true",
    "ksql.udfs.enabled" : "true",
    "ksql.udf.enable.security.manager" : "true",
    "ksql.connect.worker.config" : "",
    "ksql.sink.window.change.log.additional.retention" : "1000000",
    "ksql.readonly.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.udf.collect.metrics" : "false",
    "ksql.persistent.prefix" : "query_",
    "ksql.query.persistent.active.limit" : "2147483647",
    "ksql.error.classifier.regex" : ""
  }
}