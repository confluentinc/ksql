{
  "plan" : [ {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE TABLE T1 (ID BIGINT PRIMARY KEY, TOTAL INTEGER) WITH (KAFKA_TOPIC='T1', KEY_FORMAT='KAFKA', VALUE_FORMAT='AVRO');",
    "ddlCommand" : {
      "@type" : "createTableV1",
      "sourceName" : "T1",
      "schema" : "`ID` BIGINT KEY, `TOTAL` INTEGER",
      "topicName" : "T1",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "AVRO"
        }
      },
      "orReplace" : false
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE TABLE T2 (ID BIGINT PRIMARY KEY, TOTAL INTEGER) WITH (KAFKA_TOPIC='T2', KEY_FORMAT='KAFKA', VALUE_FORMAT='AVRO');",
    "ddlCommand" : {
      "@type" : "createTableV1",
      "sourceName" : "T2",
      "schema" : "`ID` BIGINT KEY, `TOTAL` INTEGER",
      "topicName" : "T2",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "AVRO"
        }
      },
      "orReplace" : false
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE TABLE OUTPUT AS SELECT\n  T1.ID T1_ID,\n  SUM((T1.TOTAL + (CASE WHEN (T2.TOTAL IS NULL) THEN 0 ELSE T2.TOTAL END))) SUM\nFROM T1 T1\nLEFT OUTER JOIN T2 T2 ON ((T1.ID = T2.ID))\nGROUP BY T1.ID\nHAVING (COUNT(1) > 0)\nEMIT CHANGES",
    "ddlCommand" : {
      "@type" : "createTableV1",
      "sourceName" : "OUTPUT",
      "schema" : "`T1_ID` BIGINT KEY, `SUM` INTEGER",
      "topicName" : "OUTPUT",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "AVRO"
        }
      },
      "orReplace" : false
    },
    "queryPlan" : {
      "sources" : [ "T1", "T2" ],
      "sink" : "OUTPUT",
      "physicalPlan" : {
        "@type" : "tableSinkV1",
        "properties" : {
          "queryContext" : "OUTPUT"
        },
        "source" : {
          "@type" : "tableSelectV1",
          "properties" : {
            "queryContext" : "Aggregate/Project"
          },
          "source" : {
            "@type" : "tableFilterV1",
            "properties" : {
              "queryContext" : "Aggregate/HavingFilter"
            },
            "source" : {
              "@type" : "tableAggregateV1",
              "properties" : {
                "queryContext" : "Aggregate/Aggregate"
              },
              "source" : {
                "@type" : "tableGroupByV2",
                "properties" : {
                  "queryContext" : "Aggregate/GroupBy"
                },
                "source" : {
                  "@type" : "tableSelectV1",
                  "properties" : {
                    "queryContext" : "Aggregate/Prepare"
                  },
                  "source" : {
                    "@type" : "tableTableJoinV1",
                    "properties" : {
                      "queryContext" : "Join"
                    },
                    "joinType" : "LEFT",
                    "leftSource" : {
                      "@type" : "tableSelectV1",
                      "properties" : {
                        "queryContext" : "PrependAliasLeft"
                      },
                      "source" : {
                        "@type" : "tableSourceV1",
                        "properties" : {
                          "queryContext" : "KafkaTopic_Left/Source"
                        },
                        "topicName" : "T1",
                        "formats" : {
                          "keyFormat" : {
                            "format" : "KAFKA"
                          },
                          "valueFormat" : {
                            "format" : "AVRO"
                          }
                        },
                        "sourceSchema" : "`ID` BIGINT KEY, `TOTAL` INTEGER",
                        "forceChangelog" : true
                      },
                      "keyColumnNames" : [ "T1_ID" ],
                      "selectExpressions" : [ "TOTAL AS T1_TOTAL", "ROWTIME AS T1_ROWTIME", "ID AS T1_ID" ]
                    },
                    "rightSource" : {
                      "@type" : "tableSelectV1",
                      "properties" : {
                        "queryContext" : "PrependAliasRight"
                      },
                      "source" : {
                        "@type" : "tableSourceV1",
                        "properties" : {
                          "queryContext" : "KafkaTopic_Right/Source"
                        },
                        "topicName" : "T2",
                        "formats" : {
                          "keyFormat" : {
                            "format" : "KAFKA"
                          },
                          "valueFormat" : {
                            "format" : "AVRO"
                          }
                        },
                        "sourceSchema" : "`ID` BIGINT KEY, `TOTAL` INTEGER",
                        "forceChangelog" : true
                      },
                      "keyColumnNames" : [ "T2_ID" ],
                      "selectExpressions" : [ "TOTAL AS T2_TOTAL", "ROWTIME AS T2_ROWTIME", "ID AS T2_ID" ]
                    },
                    "keyColName" : "T1_ID"
                  },
                  "keyColumnNames" : [ "T1_ID" ],
                  "selectExpressions" : [ "T1_ID AS T1_ID", "T1_TOTAL AS T1_TOTAL", "T2_TOTAL AS T2_TOTAL", "(T1_TOTAL + (CASE WHEN (T2_TOTAL IS NULL) THEN 0 ELSE T2_TOTAL END)) AS KSQL_INTERNAL_COL_3", "1 AS KSQL_INTERNAL_COL_4" ]
                },
                "internalFormats" : {
                  "keyFormat" : {
                    "format" : "KAFKA"
                  },
                  "valueFormat" : {
                    "format" : "AVRO"
                  }
                },
                "groupByExpressions" : [ "T1_ID" ]
              },
              "internalFormats" : {
                "keyFormat" : {
                  "format" : "KAFKA"
                },
                "valueFormat" : {
                  "format" : "AVRO"
                }
              },
              "nonAggregateColumns" : [ "T1_ID", "T1_TOTAL", "T2_TOTAL" ],
              "aggregationFunctions" : [ "SUM(KSQL_INTERNAL_COL_3)", "COUNT(KSQL_INTERNAL_COL_4)" ]
            },
            "filterExpression" : "(KSQL_AGG_VARIABLE_1 > 0)"
          },
          "keyColumnNames" : [ "T1_ID" ],
          "selectExpressions" : [ "KSQL_AGG_VARIABLE_0 AS SUM" ]
        },
        "formats" : {
          "keyFormat" : {
            "format" : "KAFKA"
          },
          "valueFormat" : {
            "format" : "AVRO"
          }
        },
        "topicName" : "OUTPUT"
      },
      "queryId" : "CTAS_OUTPUT_0"
    }
  } ],
  "configs" : {
    "ksql.extension.dir" : "ext",
    "ksql.streams.cache.max.bytes.buffering" : "0",
    "ksql.security.extension.class" : null,
    "metric.reporters" : "",
    "ksql.transient.prefix" : "transient_",
    "ksql.query.status.running.threshold.seconds" : "300",
    "ksql.streams.default.deserialization.exception.handler" : "io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler",
    "ksql.output.topic.name.prefix" : "",
    "ksql.query.pull.enable.standby.reads" : "false",
    "ksql.persistence.default.format.key" : "KAFKA",
    "ksql.query.error.max.queue.size" : "10",
    "ksql.variable.substitution.enable" : "true",
    "ksql.internal.topic.min.insync.replicas" : "1",
    "ksql.streams.shutdown.timeout.ms" : "300000",
    "ksql.internal.topic.replicas" : "1",
    "ksql.insert.into.values.enabled" : "true",
    "ksql.query.pull.max.allowed.offset.lag" : "9223372036854775807",
    "ksql.query.pull.max.qps" : "2147483647",
    "ksql.access.validator.enable" : "auto",
    "ksql.streams.bootstrap.servers" : "localhost:0",
    "ksql.query.pull.metrics.enabled" : "false",
    "ksql.create.or.replace.enabled" : "true",
    "ksql.metrics.extension" : null,
    "ksql.hidden.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.cast.strings.preserve.nulls" : "true",
    "ksql.authorization.cache.max.entries" : "10000",
    "ksql.pull.queries.enable" : "true",
    "ksql.suppress.enabled" : "false",
    "ksql.sink.window.change.log.additional.retention" : "1000000",
    "ksql.readonly.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.query.persistent.active.limit" : "2147483647",
    "ksql.persistence.wrap.single.values" : null,
    "ksql.authorization.cache.expiry.time.secs" : "30",
    "ksql.query.retry.backoff.initial.ms" : "15000",
    "ksql.schema.registry.url" : "",
    "ksql.properties.overrides.denylist" : "",
    "ksql.streams.auto.offset.reset" : "earliest",
    "ksql.connect.url" : "http://localhost:8083",
    "ksql.service.id" : "some.ksql.service.id",
    "ksql.streams.default.production.exception.handler" : "io.confluent.ksql.errors.ProductionExceptionHandlerUtil$LogAndFailProductionExceptionHandler",
    "ksql.streams.commit.interval.ms" : "2000",
    "ksql.streams.auto.commit.interval.ms" : "0",
    "ksql.streams.topology.optimization" : "all",
    "ksql.query.retry.backoff.max.ms" : "900000",
    "ksql.streams.num.stream.threads" : "4",
    "ksql.timestamp.throw.on.invalid" : "false",
    "ksql.metrics.tags.custom" : "",
    "ksql.persistence.default.format.value" : null,
    "ksql.udfs.enabled" : "true",
    "ksql.udf.enable.security.manager" : "true",
    "ksql.connect.worker.config" : "",
    "ksql.udf.collect.metrics" : "false",
    "ksql.query.pull.thread.pool.size" : "100",
    "ksql.persistent.prefix" : "query_",
    "ksql.metastore.backup.location" : "",
    "ksql.error.classifier.regex" : "",
    "ksql.suppress.buffer.size.bytes" : "-1"
  }
}