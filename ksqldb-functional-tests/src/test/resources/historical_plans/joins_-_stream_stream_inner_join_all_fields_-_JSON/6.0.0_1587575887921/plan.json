{
  "plan" : [ {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM TEST (ROWKEY BIGINT KEY, ID BIGINT, NAME STRING) WITH (KAFKA_TOPIC='left_topic', KEY='ID', VALUE_FORMAT='JSON');",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "TEST",
      "schema" : "`ROWKEY` BIGINT KEY, `ID` BIGINT, `NAME` STRING",
      "keyField" : "ID",
      "topicName" : "left_topic",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      }
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM TEST_STREAM (ROWKEY BIGINT KEY, ID BIGINT, F1 STRING) WITH (KAFKA_TOPIC='right_topic', KEY='ID', VALUE_FORMAT='JSON');",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "TEST_STREAM",
      "schema" : "`ROWKEY` BIGINT KEY, `ID` BIGINT, `F1` STRING",
      "keyField" : "ID",
      "topicName" : "right_topic",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      }
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM INNER_JOIN AS SELECT *\nFROM TEST TT\nINNER JOIN TEST_STREAM T WITHIN 11 SECONDS ON ((T.ID = TT.ID))\nEMIT CHANGES",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "INNER_JOIN",
      "schema" : "`ROWKEY` BIGINT KEY, `TT_ROWKEY` BIGINT, `TT_ID` BIGINT, `TT_NAME` STRING, `T_ROWKEY` BIGINT, `T_ID` BIGINT, `T_F1` STRING",
      "keyField" : "TT_ID",
      "topicName" : "INNER_JOIN",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      }
    },
    "queryPlan" : {
      "sources" : [ "TEST", "TEST_STREAM" ],
      "sink" : "INNER_JOIN",
      "physicalPlan" : {
        "@type" : "streamSinkV1",
        "properties" : {
          "queryContext" : "INNER_JOIN"
        },
        "source" : {
          "@type" : "streamSelectV1",
          "properties" : {
            "queryContext" : "Project"
          },
          "source" : {
            "@type" : "streamStreamJoinV1",
            "properties" : {
              "queryContext" : "Join"
            },
            "joinType" : "INNER",
            "leftInternalFormats" : {
              "keyFormat" : {
                "format" : "KAFKA"
              },
              "valueFormat" : {
                "format" : "JSON"
              }
            },
            "rightInternalFormats" : {
              "keyFormat" : {
                "format" : "KAFKA"
              },
              "valueFormat" : {
                "format" : "JSON"
              }
            },
            "leftSource" : {
              "@type" : "streamSelectV1",
              "properties" : {
                "queryContext" : "PrependAliasLeft"
              },
              "source" : {
                "@type" : "streamSourceV1",
                "properties" : {
                  "queryContext" : "KafkaTopic_Left/Source"
                },
                "topicName" : "left_topic",
                "formats" : {
                  "keyFormat" : {
                    "format" : "KAFKA"
                  },
                  "valueFormat" : {
                    "format" : "JSON"
                  }
                },
                "sourceSchema" : "`ROWKEY` BIGINT KEY, `ID` BIGINT, `NAME` STRING"
              },
              "selectExpressions" : [ "ID AS TT_ID", "NAME AS TT_NAME", "ROWTIME AS TT_ROWTIME", "ROWKEY AS TT_ROWKEY" ]
            },
            "rightSource" : {
              "@type" : "streamSelectV1",
              "properties" : {
                "queryContext" : "PrependAliasRight"
              },
              "source" : {
                "@type" : "streamSourceV1",
                "properties" : {
                  "queryContext" : "KafkaTopic_Right/Source"
                },
                "topicName" : "right_topic",
                "formats" : {
                  "keyFormat" : {
                    "format" : "KAFKA"
                  },
                  "valueFormat" : {
                    "format" : "JSON"
                  }
                },
                "sourceSchema" : "`ROWKEY` BIGINT KEY, `ID` BIGINT, `F1` STRING"
              },
              "selectExpressions" : [ "ID AS T_ID", "F1 AS T_F1", "ROWTIME AS T_ROWTIME", "ROWKEY AS T_ROWKEY" ]
            },
            "beforeMillis" : 11.000000000,
            "afterMillis" : 11.000000000
          },
          "selectExpressions" : [ "TT_ROWKEY AS TT_ROWKEY", "TT_ID AS TT_ID", "TT_NAME AS TT_NAME", "T_ROWKEY AS T_ROWKEY", "T_ID AS T_ID", "T_F1 AS T_F1" ]
        },
        "formats" : {
          "keyFormat" : {
            "format" : "KAFKA"
          },
          "valueFormat" : {
            "format" : "JSON"
          }
        },
        "topicName" : "INNER_JOIN"
      },
      "queryId" : "CSAS_INNER_JOIN_0"
    }
  } ],
  "configs" : {
    "ksql.extension.dir" : "ext",
    "ksql.streams.cache.max.bytes.buffering" : "0",
    "ksql.security.extension.class" : null,
    "ksql.transient.prefix" : "transient_",
    "ksql.persistence.wrap.single.values" : "true",
    "ksql.authorization.cache.expiry.time.secs" : "30",
    "ksql.schema.registry.url" : "",
    "ksql.streams.default.deserialization.exception.handler" : "io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler",
    "ksql.output.topic.name.prefix" : "",
    "ksql.streams.auto.offset.reset" : "earliest",
    "ksql.query.pull.enable.standby.reads" : "false",
    "ksql.connect.url" : "http://localhost:8083",
    "ksql.service.id" : "some.ksql.service.id",
    "ksql.internal.topic.min.insync.replicas" : "1",
    "ksql.streams.shutdown.timeout.ms" : "300000",
    "ksql.internal.topic.replicas" : "1",
    "ksql.insert.into.values.enabled" : "true",
    "ksql.query.pull.max.allowed.offset.lag" : "9223372036854775807",
    "ksql.query.pull.max.qps" : "2147483647",
    "ksql.streams.default.production.exception.handler" : "io.confluent.ksql.errors.ProductionExceptionHandlerUtil$LogAndFailProductionExceptionHandler",
    "ksql.access.validator.enable" : "auto",
    "ksql.streams.bootstrap.servers" : "localhost:0",
    "ksql.streams.commit.interval.ms" : "2000",
    "ksql.metric.reporters" : "",
    "ksql.query.pull.metrics.enabled" : "false",
    "ksql.authentication.plugin.class" : null,
    "ksql.streams.auto.commit.interval.ms" : "0",
    "ksql.metrics.extension" : null,
    "ksql.streams.topology.optimization" : "all",
    "ksql.hidden.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.streams.num.stream.threads" : "4",
    "ksql.timestamp.throw.on.invalid" : "false",
    "ksql.authorization.cache.max.entries" : "10000",
    "ksql.metrics.tags.custom" : "",
    "ksql.pull.queries.enable" : "true",
    "ksql.udfs.enabled" : "true",
    "ksql.udf.enable.security.manager" : "true",
    "ksql.connect.worker.config" : "",
    "ksql.any.key.name.enabled" : "false",
    "ksql.sink.window.change.log.additional.retention" : "1000000",
    "ksql.readonly.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.udf.collect.metrics" : "false",
    "ksql.persistent.prefix" : "query_",
    "ksql.query.persistent.active.limit" : "2147483647"
  }
}