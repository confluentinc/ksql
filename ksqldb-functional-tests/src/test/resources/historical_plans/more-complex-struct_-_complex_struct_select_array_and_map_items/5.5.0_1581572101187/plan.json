{
  "plan" : [ {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM FOO (NESTED_STRUCT_FIELD STRUCT<SL1_STRUCT STRUCT<SL2_STRUCT STRUCT<SL3_STRUCT STRUCT<SL4_STRING STRING, SL4_INT INTEGER, SL4_DOUBLE_ARRAY ARRAY<DOUBLE>>, SL3_DOUBLE_ARRAY ARRAY<DOUBLE>, SL3_STRING STRING>, SL2_STRUCT_MAP MAP<STRING, STRUCT<SL2_3_STRING STRING, SL2_3_DOUBLE DOUBLE>>, SL2_DOUBLE DOUBLE, SL2_BOOLEAN BOOLEAN>, SL1_STRING STRING, SL1_STRUCT_ARRAY ARRAY<STRUCT<SL1_2_STRING STRING, SL1_2_DOUBLE DOUBLE>>>, COL1 BIGINT, COL2 STRING) WITH (KAFKA_TOPIC='test_topic', VALUE_FORMAT='json');",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "FOO",
      "schema" : "`ROWKEY` STRING KEY, `NESTED_STRUCT_FIELD` STRUCT<`SL1_STRUCT` STRUCT<`SL2_STRUCT` STRUCT<`SL3_STRUCT` STRUCT<`SL4_STRING` STRING, `SL4_INT` INTEGER, `SL4_DOUBLE_ARRAY` ARRAY<DOUBLE>>, `SL3_DOUBLE_ARRAY` ARRAY<DOUBLE>, `SL3_STRING` STRING>, `SL2_STRUCT_MAP` MAP<STRING, STRUCT<`SL2_3_STRING` STRING, `SL2_3_DOUBLE` DOUBLE>>, `SL2_DOUBLE` DOUBLE, `SL2_BOOLEAN` BOOLEAN>, `SL1_STRING` STRING, `SL1_STRUCT_ARRAY` ARRAY<STRUCT<`SL1_2_STRING` STRING, `SL1_2_DOUBLE` DOUBLE>>>, `COL1` BIGINT, `COL2` STRING",
      "keyField" : null,
      "timestampColumn" : null,
      "topicName" : "test_topic",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA",
          "properties" : { }
        },
        "valueFormat" : {
          "format" : "JSON",
          "properties" : { }
        },
        "options" : [ ]
      },
      "windowInfo" : null
    },
    "queryPlan" : null
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM S3 AS SELECT\n  FOO.NESTED_STRUCT_FIELD->SL1_STRUCT->SL2_STRUCT->SL3_STRUCT->SL4_DOUBLE_ARRAY[1] COL1,\n  FOO.NESTED_STRUCT_FIELD->SL1_STRUCT->SL2_STRUCT_MAP['mapkey'] COL2,\n  FOO.NESTED_STRUCT_FIELD->SL1_STRUCT->SL2_STRUCT->SL3_STRUCT->SL4_DOUBLE_ARRAY[((10 - 5) - 4)] COL3,\n  FOO.NESTED_STRUCT_FIELD->SL1_STRUCT->SL2_STRUCT_MAP['mapkey']->SL2_3_DOUBLE COL4\nFROM FOO FOO\nEMIT CHANGES",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "S3",
      "schema" : "`ROWKEY` STRING KEY, `COL1` DOUBLE, `COL2` STRUCT<`SL2_3_STRING` STRING, `SL2_3_DOUBLE` DOUBLE>, `COL3` DOUBLE, `COL4` DOUBLE",
      "keyField" : null,
      "timestampColumn" : null,
      "topicName" : "S3",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA",
          "properties" : { }
        },
        "valueFormat" : {
          "format" : "JSON",
          "properties" : { }
        },
        "options" : [ ]
      },
      "windowInfo" : null
    },
    "queryPlan" : {
      "sources" : [ "FOO" ],
      "sink" : "S3",
      "physicalPlan" : {
        "@type" : "streamSinkV1",
        "properties" : {
          "queryContext" : "S3"
        },
        "source" : {
          "@type" : "streamSelectV1",
          "properties" : {
            "queryContext" : "Project"
          },
          "source" : {
            "@type" : "streamSourceV1",
            "properties" : {
              "queryContext" : "KsqlTopic/Source"
            },
            "topicName" : "test_topic",
            "formats" : {
              "keyFormat" : {
                "format" : "KAFKA",
                "properties" : { }
              },
              "valueFormat" : {
                "format" : "JSON",
                "properties" : { }
              },
              "options" : [ ]
            },
            "timestampColumn" : null,
            "sourceSchema" : "`ROWKEY` STRING KEY, `NESTED_STRUCT_FIELD` STRUCT<`SL1_STRUCT` STRUCT<`SL2_STRUCT` STRUCT<`SL3_STRUCT` STRUCT<`SL4_STRING` STRING, `SL4_INT` INTEGER, `SL4_DOUBLE_ARRAY` ARRAY<DOUBLE>>, `SL3_DOUBLE_ARRAY` ARRAY<DOUBLE>, `SL3_STRING` STRING>, `SL2_STRUCT_MAP` MAP<STRING, STRUCT<`SL2_3_STRING` STRING, `SL2_3_DOUBLE` DOUBLE>>, `SL2_DOUBLE` DOUBLE, `SL2_BOOLEAN` BOOLEAN>, `SL1_STRING` STRING, `SL1_STRUCT_ARRAY` ARRAY<STRUCT<`SL1_2_STRING` STRING, `SL1_2_DOUBLE` DOUBLE>>>, `COL1` BIGINT, `COL2` STRING"
          },
          "selectExpressions" : [ "NESTED_STRUCT_FIELD->SL1_STRUCT->SL2_STRUCT->SL3_STRUCT->SL4_DOUBLE_ARRAY[1] AS COL1", "NESTED_STRUCT_FIELD->SL1_STRUCT->SL2_STRUCT_MAP['mapkey'] AS COL2", "NESTED_STRUCT_FIELD->SL1_STRUCT->SL2_STRUCT->SL3_STRUCT->SL4_DOUBLE_ARRAY[((10 - 5) - 4)] AS COL3", "NESTED_STRUCT_FIELD->SL1_STRUCT->SL2_STRUCT_MAP['mapkey']->SL2_3_DOUBLE AS COL4" ]
        },
        "formats" : {
          "keyFormat" : {
            "format" : "KAFKA",
            "properties" : { }
          },
          "valueFormat" : {
            "format" : "JSON",
            "properties" : { }
          },
          "options" : [ ]
        },
        "topicName" : "S3"
      },
      "queryId" : "CSAS_S3_0"
    }
  } ],
  "configs" : {
    "ksql.extension.dir" : "ext",
    "ksql.streams.cache.max.bytes.buffering" : "0",
    "ksql.security.extension.class" : null,
    "ksql.transient.prefix" : "transient_",
    "ksql.persistence.wrap.single.values" : "true",
    "ksql.authorization.cache.expiry.time.secs" : "30",
    "ksql.schema.registry.url" : "",
    "ksql.streams.default.deserialization.exception.handler" : "io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler",
    "ksql.output.topic.name.prefix" : "",
    "ksql.streams.auto.offset.reset" : "earliest",
    "ksql.query.pull.enable.standby.reads" : "false",
    "ksql.connect.url" : "http://localhost:8083",
    "ksql.service.id" : "some.ksql.service.id",
    "ksql.internal.topic.min.insync.replicas" : "1",
    "ksql.streams.shutdown.timeout.ms" : "300000",
    "ksql.new.api.enabled" : "false",
    "ksql.streams.state.dir" : "/var/folders/p9/bk8xks6s2lndncftdbq36xh80000gp/T/confluent8393051053551629823",
    "ksql.internal.topic.replicas" : "1",
    "ksql.insert.into.values.enabled" : "true",
    "ksql.query.pull.max.allowed.offset.lag" : "9223372036854775807",
    "ksql.streams.default.production.exception.handler" : "io.confluent.ksql.errors.ProductionExceptionHandlerUtil$LogAndFailProductionExceptionHandler",
    "ksql.access.validator.enable" : "auto",
    "ksql.streams.bootstrap.servers" : "localhost:0",
    "ksql.streams.commit.interval.ms" : "2000",
    "ksql.metric.reporters" : "",
    "ksql.streams.auto.commit.interval.ms" : "0",
    "ksql.metrics.extension" : null,
    "ksql.streams.topology.optimization" : "all",
    "ksql.query.pull.streamsstore.rebalancing.timeout.ms" : "10000",
    "ksql.hidden.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.streams.num.stream.threads" : "4",
    "ksql.authorization.cache.max.entries" : "10000",
    "ksql.metrics.tags.custom" : "",
    "ksql.pull.queries.enable" : "true",
    "ksql.udfs.enabled" : "true",
    "ksql.udf.enable.security.manager" : "true",
    "ksql.connect.worker.config" : "",
    "ksql.sink.window.change.log.additional.retention" : "1000000",
    "ksql.readonly.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.udf.collect.metrics" : "false",
    "ksql.persistent.prefix" : "query_",
    "ksql.query.persistent.active.limit" : "2147483647"
  }
}