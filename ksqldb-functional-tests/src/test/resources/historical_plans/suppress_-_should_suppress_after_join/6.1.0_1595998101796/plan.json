{
  "plan" : [ {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM L (A INTEGER KEY, B INTEGER, C INTEGER) WITH (KAFKA_TOPIC='LEFT', VALUE_FORMAT='JSON');",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "L",
      "schema" : "`A` INTEGER KEY, `B` INTEGER, `C` INTEGER",
      "topicName" : "LEFT",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      },
      "orReplace" : false
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM R (A INTEGER KEY, B INTEGER, C INTEGER) WITH (KAFKA_TOPIC='RIGHT', VALUE_FORMAT='JSON');",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "R",
      "schema" : "`A` INTEGER KEY, `B` INTEGER, `C` INTEGER",
      "topicName" : "RIGHT",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      },
      "orReplace" : false
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE STREAM JOINED_OUTPUT AS SELECT *\nFROM L L\nINNER JOIN R R WITHIN 1 SECONDS ON ((L.A = R.A))\nEMIT CHANGES",
    "ddlCommand" : {
      "@type" : "createStreamV1",
      "sourceName" : "JOINED_OUTPUT",
      "schema" : "`L_A` INTEGER KEY, `L_B` INTEGER, `L_C` INTEGER, `R_A` INTEGER, `R_B` INTEGER, `R_C` INTEGER",
      "topicName" : "JOINED_OUTPUT",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      },
      "orReplace" : false
    },
    "queryPlan" : {
      "sources" : [ "L", "R" ],
      "sink" : "JOINED_OUTPUT",
      "physicalPlan" : {
        "@type" : "streamSinkV1",
        "properties" : {
          "queryContext" : "JOINED_OUTPUT"
        },
        "source" : {
          "@type" : "streamSelectV1",
          "properties" : {
            "queryContext" : "Project"
          },
          "source" : {
            "@type" : "streamStreamJoinV1",
            "properties" : {
              "queryContext" : "Join"
            },
            "joinType" : "INNER",
            "leftInternalFormats" : {
              "keyFormat" : {
                "format" : "KAFKA"
              },
              "valueFormat" : {
                "format" : "JSON"
              }
            },
            "rightInternalFormats" : {
              "keyFormat" : {
                "format" : "KAFKA"
              },
              "valueFormat" : {
                "format" : "JSON"
              }
            },
            "leftSource" : {
              "@type" : "streamSelectV1",
              "properties" : {
                "queryContext" : "PrependAliasLeft"
              },
              "source" : {
                "@type" : "streamSourceV1",
                "properties" : {
                  "queryContext" : "KafkaTopic_Left/Source"
                },
                "topicName" : "LEFT",
                "formats" : {
                  "keyFormat" : {
                    "format" : "KAFKA"
                  },
                  "valueFormat" : {
                    "format" : "JSON"
                  }
                },
                "sourceSchema" : "`A` INTEGER KEY, `B` INTEGER, `C` INTEGER"
              },
              "keyColumnNames" : [ "L_A" ],
              "selectExpressions" : [ "B AS L_B", "C AS L_C", "ROWTIME AS L_ROWTIME", "A AS L_A" ]
            },
            "rightSource" : {
              "@type" : "streamSelectV1",
              "properties" : {
                "queryContext" : "PrependAliasRight"
              },
              "source" : {
                "@type" : "streamSourceV1",
                "properties" : {
                  "queryContext" : "KafkaTopic_Right/Source"
                },
                "topicName" : "RIGHT",
                "formats" : {
                  "keyFormat" : {
                    "format" : "KAFKA"
                  },
                  "valueFormat" : {
                    "format" : "JSON"
                  }
                },
                "sourceSchema" : "`A` INTEGER KEY, `B` INTEGER, `C` INTEGER"
              },
              "keyColumnNames" : [ "R_A" ],
              "selectExpressions" : [ "B AS R_B", "C AS R_C", "ROWTIME AS R_ROWTIME", "A AS R_A" ]
            },
            "beforeMillis" : 1.000000000,
            "afterMillis" : 1.000000000,
            "keyColName" : "L_A"
          },
          "keyColumnNames" : [ "L_A" ],
          "selectExpressions" : [ "L_B AS L_B", "L_C AS L_C", "R_A AS R_A", "R_B AS R_B", "R_C AS R_C" ]
        },
        "formats" : {
          "keyFormat" : {
            "format" : "KAFKA"
          },
          "valueFormat" : {
            "format" : "JSON"
          }
        },
        "topicName" : "JOINED_OUTPUT"
      },
      "queryId" : "CSAS_JOINED_OUTPUT_0"
    }
  }, {
    "@type" : "ksqlPlanV1",
    "statementText" : "CREATE TABLE OUTPUT AS SELECT\n  JOINED_OUTPUT.L_A L_A,\n  COUNT(*) COUNT\nFROM JOINED_OUTPUT JOINED_OUTPUT\nWINDOW TUMBLING ( SIZE 2 MILLISECONDS , GRACE PERIOD 1 MILLISECONDS ) \nGROUP BY JOINED_OUTPUT.L_A\nEMIT FINAL",
    "ddlCommand" : {
      "@type" : "createTableV1",
      "sourceName" : "OUTPUT",
      "schema" : "`L_A` INTEGER KEY, `COUNT` BIGINT",
      "topicName" : "OUTPUT",
      "formats" : {
        "keyFormat" : {
          "format" : "KAFKA"
        },
        "valueFormat" : {
          "format" : "JSON"
        }
      },
      "windowInfo" : {
        "type" : "TUMBLING",
        "size" : 0.002000000
      },
      "orReplace" : false
    },
    "queryPlan" : {
      "sources" : [ "JOINED_OUTPUT" ],
      "sink" : "OUTPUT",
      "physicalPlan" : {
        "@type" : "tableSinkV1",
        "properties" : {
          "queryContext" : "OUTPUT"
        },
        "source" : {
          "@type" : "tableSuppressV1",
          "properties" : {
            "queryContext" : "Suppress"
          },
          "source" : {
            "@type" : "tableSelectV1",
            "properties" : {
              "queryContext" : "Aggregate/Project"
            },
            "source" : {
              "@type" : "streamWindowedAggregateV1",
              "properties" : {
                "queryContext" : "Aggregate/Aggregate"
              },
              "source" : {
                "@type" : "streamGroupByKeyV1",
                "properties" : {
                  "queryContext" : "Aggregate/GroupBy"
                },
                "source" : {
                  "@type" : "streamSelectV1",
                  "properties" : {
                    "queryContext" : "Aggregate/Prepare"
                  },
                  "source" : {
                    "@type" : "streamSourceV1",
                    "properties" : {
                      "queryContext" : "KsqlTopic/Source"
                    },
                    "topicName" : "JOINED_OUTPUT",
                    "formats" : {
                      "keyFormat" : {
                        "format" : "KAFKA"
                      },
                      "valueFormat" : {
                        "format" : "JSON"
                      }
                    },
                    "sourceSchema" : "`L_A` INTEGER KEY, `L_B` INTEGER, `L_C` INTEGER, `R_A` INTEGER, `R_B` INTEGER, `R_C` INTEGER"
                  },
                  "keyColumnNames" : [ "L_A" ],
                  "selectExpressions" : [ "L_A AS L_A", "ROWTIME AS ROWTIME" ]
                },
                "internalFormats" : {
                  "keyFormat" : {
                    "format" : "KAFKA"
                  },
                  "valueFormat" : {
                    "format" : "JSON"
                  }
                }
              },
              "internalFormats" : {
                "keyFormat" : {
                  "format" : "KAFKA"
                },
                "valueFormat" : {
                  "format" : "JSON"
                }
              },
              "nonAggregateColumns" : [ "L_A", "ROWTIME" ],
              "aggregationFunctions" : [ "COUNT(ROWTIME)" ],
              "windowExpression" : " TUMBLING ( SIZE 2 MILLISECONDS , GRACE PERIOD 1 MILLISECONDS ) "
            },
            "keyColumnNames" : [ "L_A" ],
            "selectExpressions" : [ "KSQL_AGG_VARIABLE_0 AS COUNT" ]
          },
          "refinementInfo" : {
            "outputRefinement" : "FINAL"
          },
          "internalFormats" : {
            "keyFormat" : {
              "format" : "KAFKA"
            },
            "valueFormat" : {
              "format" : "JSON"
            }
          }
        },
        "formats" : {
          "keyFormat" : {
            "format" : "KAFKA"
          },
          "valueFormat" : {
            "format" : "JSON"
          }
        },
        "topicName" : "OUTPUT"
      },
      "queryId" : "CTAS_OUTPUT_1"
    }
  } ],
  "configs" : {
    "ksql.extension.dir" : "ext",
    "ksql.streams.cache.max.bytes.buffering" : "0",
    "ksql.security.extension.class" : null,
    "metric.reporters" : "",
    "ksql.transient.prefix" : "transient_",
    "ksql.streams.default.deserialization.exception.handler" : "io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler",
    "ksql.output.topic.name.prefix" : "",
    "ksql.query.pull.enable.standby.reads" : "false",
    "ksql.internal.topic.min.insync.replicas" : "1",
    "ksql.streams.shutdown.timeout.ms" : "300000",
    "ksql.internal.topic.replicas" : "1",
    "ksql.insert.into.values.enabled" : "true",
    "ksql.query.pull.max.allowed.offset.lag" : "9223372036854775807",
    "ksql.query.pull.max.qps" : "2147483647",
    "ksql.access.validator.enable" : "auto",
    "ksql.streams.bootstrap.servers" : "localhost:0",
    "ksql.query.pull.metrics.enabled" : "false",
    "ksql.create.or.replace.enabled" : "false",
    "ksql.metrics.extension" : null,
    "ksql.hidden.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.cast.strings.preserve.nulls" : "true",
    "ksql.authorization.cache.max.entries" : "10000",
    "ksql.pull.queries.enable" : "true",
    "ksql.suppress.enabled" : "false",
    "ksql.sink.window.change.log.additional.retention" : "1000000",
    "ksql.readonly.topics" : "_confluent.*,__confluent.*,_schemas,__consumer_offsets,__transaction_state,connect-configs,connect-offsets,connect-status,connect-statuses",
    "ksql.query.persistent.active.limit" : "2147483647",
    "ksql.persistence.wrap.single.values" : "true",
    "ksql.authorization.cache.expiry.time.secs" : "30",
    "ksql.schema.registry.url" : "",
    "ksql.streams.auto.offset.reset" : "earliest",
    "ksql.connect.url" : "http://localhost:8083",
    "ksql.service.id" : "some.ksql.service.id",
    "ksql.streams.default.production.exception.handler" : "io.confluent.ksql.errors.ProductionExceptionHandlerUtil$LogAndFailProductionExceptionHandler",
    "ksql.enable.metastore.backup" : "false",
    "ksql.streams.commit.interval.ms" : "2000",
    "ksql.streams.auto.commit.interval.ms" : "0",
    "ksql.streams.topology.optimization" : "all",
    "ksql.streams.num.stream.threads" : "4",
    "ksql.timestamp.throw.on.invalid" : "false",
    "ksql.metrics.tags.custom" : "",
    "ksql.udfs.enabled" : "true",
    "ksql.udf.enable.security.manager" : "true",
    "ksql.connect.worker.config" : "",
    "ksql.udf.collect.metrics" : "false",
    "ksql.persistent.prefix" : "query_",
    "ksql.metastore.backup.location" : "",
    "ksql.error.classifier.regex" : ""
  }
}