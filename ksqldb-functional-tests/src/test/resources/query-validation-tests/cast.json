{
  "comments": [
    "Tests covering use of casts"
  ],
  "tests": [
    {
      "name": "non-array to array",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as ARRAY<INTEGER>) FROM TEST;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Invalid Select: Cast of STRING to ARRAY<INTEGER> is not supported"
      }
    },
    {
      "name": "array to array with same schema",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 ARRAY<INTEGER>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as ARRAY<INTEGER>) FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"f0": [1, 3]}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"KSQL_COL_0": [1, 3]}}
      ]
    },
    {
      "name": "array to array with different element type",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 ARRAY<BIGINT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as ARRAY<INTEGER>) FROM TEST;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Invalid Select: Cast of ARRAY<BIGINT> to ARRAY<INTEGER> is not supported"
      }
    },
    {
      "name": "non-map to map",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as MAP<VARCHAR, INTEGER>) FROM TEST;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Invalid Select: Cast of STRING to MAP<STRING, INTEGER> is not supported"
      }
    },
    {
      "name": "map to map with same schema",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 MAP<VARCHAR, INTEGER>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as MAP<VARCHAR, INTEGER>) FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"f0": {"this": 1}}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"KSQL_COL_0": {"this": 1}}}
      ]
    },
    {
      "name": "map to map with different value type",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 MAP<STRING, BIGINT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as MAP<STRING, INTEGER>) FROM TEST;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Invalid Select: Cast of MAP<STRING, BIGINT> to MAP<STRING, INTEGER> is not supported"
      }
    },
    {
      "name": "non-struct to struct",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as STRUCT<F0 VARCHAR, F1 INTEGER>) FROM TEST;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Invalid Select: Cast of STRING to STRUCT<`F0` STRING, `F1` INTEGER> is not supported"
      }
    },
    {
      "name": "struct to struct with same schema",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 STRUCT<F0 INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as STRUCT<F0 INTEGER>) FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"f0": {"f0": 1}}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"KSQL_COL_0": {"F0": 1}}}
      ]
    },
    {
      "name": "struct to struct with different schema",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 STRUCT<F0 BIGINT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as STRUCT<F0 INTEGER>) FROM TEST;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Invalid Select: Cast of STRUCT<`F0` BIGINT> to STRUCT<`F0` INTEGER> is not supported"
      }
    },
    {
      "name": "to null",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as NULL) FROM TEST;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.parser.exception.ParseFailedException",
        "message": "mismatched input 'NULL'"
      }
    },
    {
      "name": "no op",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, b BOOLEAN, i INT, bi BIGINT, d DOUBLE, s VARCHAR) WITH (kafka_topic='test_topic', value_format='DELIMITED');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(b as BOOLEAN), cast(i as INT), cast(bi as BIGINT), cast(d as DOUBLE), cast(s as STRING) FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": "true,10,101,10.3,bob"}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": "true,10,101,10.3,bob"}
      ]
    },
    {
      "name": "of nulls",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, ignored VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(null as BOOLEAN), cast(null as INT), cast(null as BIGINT), cast(null as DOUBLE), cast(null as STRING), cast(null AS ARRAY<INT>), cast(null AS MAP<STRING, INT>), cast(null AS STRUCT<F0 INT>) FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"KQL_COL_0": null, "KQL_COL_1": null, "KQL_COL_2": null, "KQL_COL_3": null, "KQL_COL_4": null, "KQL_COL_5": null, "KQL_COL_6": null, "KQL_COL_7": null}}
      ]
    },
    {
      "name": "cast to null",
      "description": "when casting to a string, null values should remain null",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, f0 DOUBLE) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, cast(f0 as STRING) as VAL FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"f0": null}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"VAL": null}}
      ]
    },
    {
      "name": "decimal to decimal",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, foo DECIMAL(4,2)) WITH (kafka_topic='test_topic', value_format='DELIMITED');",
        "CREATE STREAM OUT AS SELECT ID, cast(foo AS DECIMAL(5,3)) FROM TEST;"
      ],
      "inputs": [
        {"topic":  "test_topic", "value": "10.12"},
        {"topic":  "test_topic", "value": "01.00"},
        {"topic":  "test_topic", "value": "00.00"}
      ],
      "outputs": [
        {"topic":  "OUT", "value": "10.120"},
        {"topic":  "OUT", "value": "1.000"},
        {"topic":  "OUT", "value": "0.000"}
      ]
    },
    {
      "name": "integer to decimal",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, foo INTEGER) WITH (kafka_topic='test_topic', value_format='AVRO');",
        "CREATE STREAM OUT AS SELECT ID, cast(foo AS DECIMAL(2,1)) as VAL FROM TEST;"
      ],
      "inputs": [
        {"topic":  "test_topic", "value": {"foo": 1}},
        {"topic":  "test_topic", "value": {"foo": 0}},
        {"topic":  "test_topic", "value": {"foo": -1}},
        {"topic":  "test_topic", "value": {"foo": 10}}
      ],
      "outputs": [
        {"topic":  "OUT", "value": {"VAL": "1.0"}},
        {"topic":  "OUT", "value": {"VAL": "0.0"}},
        {"topic":  "OUT", "value": {"VAL": "-1.0"}},
        {"topic":  "OUT", "value": {"VAL": null}}
      ]
    },
    {
      "name": "double to decimal",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, foo DOUBLE) WITH (kafka_topic='test_topic', value_format='AVRO');",
        "CREATE STREAM OUT AS SELECT ID, cast(foo AS DECIMAL(2,1)) as VAL FROM TEST;"
      ],
      "inputs": [
        {"topic":  "test_topic", "value": {"foo": 0.1}},
        {"topic":  "test_topic", "value": {"foo": 1.1}},
        {"topic":  "test_topic", "value": {"foo": 0.0}},
        {"topic":  "test_topic", "value": {"foo": 0.99}},
        {"topic":  "test_topic", "value": {"foo": 0.10}},
        {"topic":  "test_topic", "value": {"foo": 0.01}}
      ],
      "outputs": [
        {"topic":  "OUT", "value": {"VAL": "0.1"}},
        {"topic":  "OUT", "value": {"VAL": "1.1"}},
        {"topic":  "OUT", "value": {"VAL": "0.0"}},
        {"topic":  "OUT", "value": {"VAL": "1.0"}},
        {"topic":  "OUT", "value": {"VAL": "0.1"}},
        {"topic":  "OUT", "value": {"VAL": "0.0"}}
      ]
    },
    {
      "name": "string to decimal",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, foo VARCHAR) WITH (kafka_topic='test_topic', value_format='AVRO');",
        "CREATE STREAM OUT AS SELECT ID, cast(foo AS DECIMAL(2,1)) as VAL FROM TEST;"
      ],
      "inputs": [
        {"topic":  "test_topic", "value": {"foo": "0.1"}},
        {"topic":  "test_topic", "value": {"foo": "1.1"}},
        {"topic":  "test_topic", "value": {"foo": "0.0"}},
        {"topic":  "test_topic", "value": {"foo": "0.99"}},
        {"topic":  "test_topic", "value": {"foo": "0.10"}},
        {"topic":  "test_topic", "value": {"foo": "0.01"}}
      ],
      "outputs": [
        {"topic":  "OUT", "value": {"VAL": "0.1"}},
        {"topic":  "OUT", "value": {"VAL": "1.1"}},
        {"topic":  "OUT", "value": {"VAL": "0.0"}},
        {"topic":  "OUT", "value": {"VAL": "1.0"}},
        {"topic":  "OUT", "value": {"VAL": "0.1"}},
        {"topic":  "OUT", "value": {"VAL": "0.0"}}
      ]
    },
    {
      "name": "decimal to other",
      "statements": [
        "CREATE STREAM TEST (ID STRING KEY, val DECIMAL(4,2)) WITH (kafka_topic='test_topic', value_format='AVRO');",
        "CREATE STREAM OUT AS SELECT ID, cast(val AS INT) as i, cast(val AS BIGINT) as l, cast(val as DOUBLE) as d, cast(val AS STRING) as s FROM TEST;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"val": "00.00"}},
        {"topic": "test_topic", "value": {"val": "00.01"}},
        {"topic": "test_topic", "value": {"val": "10.00"}},
        {"topic": "test_topic", "value": {"val": "10.01"}}
      ],
      "outputs": [
        {"topic": "OUT", "value": {"I":  0, "L": 0, "D": 0.00, "S": "0.00"}},
        {"topic": "OUT", "value": {"I":  0, "L": 0, "D": 0.01, "S": "0.01"}},
        {"topic": "OUT", "value": {"I":  10, "L": 10, "D": 10.00, "S": "10.00"}},
        {"topic": "OUT", "value": {"I":  10, "L": 10, "D": 10.01, "S": "10.01"}}
      ]
    },
    {
      "name": "integer to bigint",
      "statements": [
        "CREATE STREAM INPUT (ID STRING KEY, col0 INT, col1 INT) WITH (kafka_topic='test_topic', value_format='AVRO');",
        "CREATE STREAM OUT AS SELECT ID, cast((col0 - col1) AS BIGINT) as VAL FROM INPUT;"
      ],
      "inputs": [
        {"topic":  "test_topic", "value": {"col0": 1, "col1": 2}}
      ],
      "outputs": [
        {"topic":  "OUT", "value": {"VAL": -1}}
      ]
    },
    {
      "name": "integer to string",
      "statements": [
        "CREATE STREAM INPUT (ID STRING KEY, col0 INT, col1 INT) WITH (kafka_topic='test_topic', value_format='AVRO');",
        "CREATE STREAM OUT AS SELECT ID, cast((col0 - col1) AS STRING) as VAL FROM INPUT;"
      ],
      "inputs": [
        {"topic":  "test_topic", "value": {"col0": 1, "col1": 2}}
      ],
      "outputs": [
        {"topic":  "OUT", "value": {"VAL": "-1"}}
      ]
    },
    {
      "name": "double to int",
      "statements": [
        "CREATE STREAM INPUT (ID STRING KEY, col0 DOUBLE, col1 DOUBLE) WITH (kafka_topic='test_topic', value_format='AVRO');",
        "CREATE STREAM OUT AS SELECT ID, cast((col0 - col1) AS INT) as VAL FROM INPUT;"
      ],
      "inputs": [
        {"topic":  "test_topic", "value": {"col0": 3.3, "col1": 2.1}}
      ],
      "outputs": [
        {"topic":  "OUT", "value": {"VAL": 1}}
      ]
    }
  ]
}