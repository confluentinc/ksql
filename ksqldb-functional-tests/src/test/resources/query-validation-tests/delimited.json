{
  "comments": [
    "When using value_format DELIMITED, we can define VALUE_DELIMITER as custom character."
  ],
  "tests": [
    {
      "name": "deserialize anonymous primitive by default - value - DELIMITED",
      "comments": "DELIMITED supports anonymous primitives by default",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT) WITH (kafka_topic='input_topic', value_format='DELIMITED');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "value": "10"},
        {"topic": "input_topic", "value": null}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": "10"},
        {"topic": "OUTPUT", "value": null}
      ]
    },
    {
      "name": "deserialize DELIMITED with WRAP_SINGLE_VALUE true",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT) WITH (WRAP_SINGLE_VALUE=true, kafka_topic='input_topic', value_format='DELIMITED');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Format 'DELIMITED' does not support 'WRAP_SINGLE_VALUE' set to 'true'."
      }
    },
    {
      "name": "deserialize DELIMITED with WRAP_SINGLE_VALUE false",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT) WITH (WRAP_SINGLE_VALUE=false, kafka_topic='input_topic', value_format='DELIMITED');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Format 'DELIMITED' does not support 'WRAP_SINGLE_VALUE' set to 'false'."
      }
    },
    {
      "name": "select delimited value_format",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, NAME varchar, VALUE integer) WITH (kafka_topic='test_topic', value_format='DELIMITED');",
        "CREATE STREAM S2 as SELECT K, id, name, value FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,zero,0", "timestamp": 0},
        {"topic": "test_topic", "key": "0", "value": "0,100,100", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100,100,500", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100,100,100", "timestamp": 0}
      ],
      "outputs": [
        {"topic": "S2", "key": "0", "value": "0,zero,0", "timestamp": 0},
        {"topic": "S2", "key": "0", "value": "0,100,100", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100,100,500", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100,100,100", "timestamp": 0}
      ]
    },
    {
      "name": "select delimited value_format into another format",
      "format": ["JSON", "AVRO", "PROTOBUF"],
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, NAME varchar, VALUE integer) WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter=',');",
        "CREATE STREAM S2 WITH(value_format='{FORMAT}') as SELECT K, id, name, value FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,zero,0", "timestamp": 0}
      ],
      "outputs": [
        {"topic": "S2", "key": "0", "value": {"ID": 0, "NAME": "zero", "VALUE": 0}, "timestamp": 0}
      ]
    },
    {
      "name": "validate value_delimiter to be single character",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter='<~>');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Failed to prepare statement: Configuration VALUE_DELIMITER is invalid: Invalid delimiter value: '<~>'. Delimiter must be a single character or TAB,SPACE\nExample valid value: ';'"
      },
      "inputs": [],
      "outputs": []
    },
    {
      "name": "validate delimiter is not empty",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter='');"
      ],
      "topics": [
        {
          "name": "test_topic",
          "format": "DELIMITED"
        }
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Failed to prepare statement: Configuration VALUE_DELIMITER is invalid: Delimiter cannot be empty, if you meant to have a tab or space for delimiter, please use the special values 'TAB' or 'SPACE'\nExample valid value: ';'"
      },
      "inputs": [],
      "outputs": []
    },
    {
      "name": "validate delimiter is not a space",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter=' ');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Failed to prepare statement: Configuration VALUE_DELIMITER is invalid: Delimiter cannot be empty, if you meant to have a tab or space for delimiter, please use the special values 'TAB' or 'SPACE'\nExample valid value: ';'"
      },
      "inputs": [],
      "outputs": []
    },
    {
      "name": "validate delimiter is not a tab character",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter='\t');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Failed to prepare statement: Configuration VALUE_DELIMITER is invalid: Delimiter cannot be empty, if you meant to have a tab or space for delimiter, please use the special values 'TAB' or 'SPACE'\nExample valid value: ';'"
      },
      "inputs": [],
      "outputs": []
    },
    {
      "name": "select delimited value_format with pipe separated values - should take source delimiter for sink",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, NAME varchar, VALUE integer) WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter='|');",
        "CREATE STREAM S2 as SELECT K, id, name, value FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0|zero|0", "timestamp": 0},
        {"topic": "test_topic", "key": "0", "value": "0|100|100", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100|100|500", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100|100|100", "timestamp": 0}
      ],
      "outputs": [
        {"topic": "S2", "key": "0", "value": "0|zero|0", "timestamp": 0},
        {"topic": "S2", "key": "0", "value": "0|100|100", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100|100|500", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100|100|100", "timestamp": 0}
      ]
    },
    {
      "name": "select delimited value_format with $ separated values using custom delimiter character",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, NAME varchar, VALUE integer) WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter='|');",
        "CREATE STREAM S2 WITH(value_delimiter='$') AS SELECT * FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0|zero|0", "timestamp": 0},
        {"topic": "test_topic", "key": "0", "value": "0|100|100", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100|100|500", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100|100|100", "timestamp": 0}
      ],
      "outputs": [
        {"topic": "S2", "key": "0", "value": "0$zero$0", "timestamp": 0},
        {"topic": "S2", "key": "0", "value": "0$100$100", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100$100$500", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100$100$100", "timestamp": 0}
      ]
    },
    {
      "name": "select delimited value_format with SPACE separated values using custom delimiter character",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, NAME varchar, VALUE integer) WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter='SPACE');",
        "CREATE STREAM S2 as SELECT K, id, name, value FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0 zero 0", "timestamp": 0},
        {"topic": "test_topic", "key": "0", "value": "0 100 100", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100 100 500", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100 100 100", "timestamp": 0}
      ],
      "outputs": [
        {"topic": "S2", "key": "0", "value": "0 zero 0", "timestamp": 0},
        {"topic": "S2", "key": "0", "value": "0 100 100", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100 100 500", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100 100 100", "timestamp": 0}
      ]
    },
    {
      "name": "select delimited value_format with TAB separated values using custom delimiter character",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, NAME varchar, VALUE integer) WITH (kafka_topic='test_topic', value_format='DELIMITED', value_delimiter='TAB');",
        "CREATE STREAM S2 as SELECT K, id, name, value FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0\tzero\t0", "timestamp": 0},
        {"topic": "test_topic", "key": "0", "value": "0\t100\t100", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100\t100\t500", "timestamp": 0},
        {"topic": "test_topic", "key": "100", "value": "100\t100\t100", "timestamp": 0}
      ],
      "outputs": [
        {"topic": "S2", "key": "0", "value": "0\tzero\t0", "timestamp": 0},
        {"topic": "S2", "key": "0", "value": "0\t100\t100", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100\t100\t500", "timestamp": 0},
        {"topic": "S2", "key": "100", "value": "100\t100\t100", "timestamp": 0}
      ]
    },
    {
      "name": "validate cannot specify delimiter with json format",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='test_topic', value_format='JSON', value_delimiter='|');"
      ],
      "topics": [
        {
          "name": "test_topic",
          "format": "JSON"
        }
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "JSON does not support the following configs: [delimiter]"
      },
      "inputs": [],
      "outputs": []
    }
  ]
}