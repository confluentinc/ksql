{
  "comment": "Tests for KAFKA format",
  "tests": [
    {
      "name": "Wrapped single values",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT) WITH (WRAP_SINGLE_VALUE=true, kafka_topic='input', value_format='KAFKA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Format 'KAFKA' does not support 'WRAP_SINGLE_VALUE' set to 'true'."
      }
    },
    {
      "name": "Unwrapped single values",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT) WITH (WRAP_SINGLE_VALUE=false, kafka_topic='input', value_format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "key": "foo", "value": 1}],
      "outputs": [{"topic": "OUTPUT", "key": "foo", "value": 1}]
    },
    {
      "name": "Default single value wrapping",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT) WITH (kafka_topic='input', value_format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "key": "foo", "value": 1}],
      "outputs": [{"topic": "OUTPUT", "key": "foo", "value": 1}]
    },
    {
      "name": "STRING",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo STRING) WITH (kafka_topic='input', value_format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "key": "foo", "value": "bar"}],
      "outputs": [{"topic": "OUTPUT", "key": "foo", "value": "bar"}]
    },
    {
      "name": "INT",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT) WITH (kafka_topic='input', value_format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "key": 1, "value": 2}],
      "outputs": [{"topic": "OUTPUT", "key": 1, "value": 2}]
    },
    {
      "name": "BIGINT",
      "statements": [
        "CREATE STREAM INPUT (K BIGINT KEY, foo BIGINT) WITH (kafka_topic='input', value_format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "key": 1, "value": 2}],
      "outputs": [{"topic": "OUTPUT", "key": 1, "value": 2}]
    },
    {
      "name": "DOUBLE",
      "statements": [
        "CREATE STREAM INPUT (K DOUBLE KEY, foo DOUBLE) WITH (kafka_topic='input', value_format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [{"topic": "input", "key": 1.1, "value": 2.2}],
      "outputs": [{"topic": "OUTPUT", "key": 1.1, "value": 2.2}]
    },
    {
      "name": "ARRAY - C* - value",
      "statements": [
        "CREATE STREAM INPUT (foo ARRAY<INT>) WITH (kafka_topic='input_topic', value_format='KAFKA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'ARRAY'"
      }
    },
    {
      "name": "ARRAY - C*AS - value",
      "statements": [
        "CREATE STREAM INPUT (v INT) WITH (kafka_topic='input_topic', value_format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT ARRAY[v] FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'ARRAY'"
      }
    },
    {
      "name": "MAP - C* - value",
      "statements": [
        "CREATE STREAM INPUT (foo MAP<INT, DOUBLE>) WITH (kafka_topic='input_topic', value_format='KAFKA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'MAP'"
      }
    },
    {
      "name": "MAP - C*AS - value",
      "statements": [
        "CREATE STREAM INPUT (k INT, v DOUBLE) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT WITH (value_format='KAFKA') AS SELECT MAP(k:=v) FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'MAP'"
      }
    },
    {
      "name": "STRUCT - C* - value",
      "statements": [
        "CREATE STREAM INPUT (foo STRUCT<F1 DOUBLE>) WITH (kafka_topic='input_topic', value_format='KAFKA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'STRUCT'"
      }
    },
    {
      "name": "STRUCT - C*AS - value",
      "statements": [
        "CREATE STREAM INPUT (v DOUBLE) WITH (kafka_topic='input_topic', value_format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT STRUCT(k := v) FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'STRUCT'"
      }
    },
    {
      "name": "ARRAY - C* - key",
      "statements": [
        "CREATE STREAM INPUT (K ARRAY<INT> KEY, foo INT) WITH (kafka_topic='input_topic', format='KAFKA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'ARRAY'"
      }
    },
    {
      "name": "ARRAY - C*AS - key",
      "statements": [
        "CREATE STREAM INPUT (v INT) WITH (kafka_topic='input_topic', format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY ARRAY[v];"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'ARRAY'"
      }
    },
    {
      "name": "MAP - C* - key",
      "statements": [
        "CREATE STREAM INPUT (K MAP<INT, DOUBLE> KEY, foo INT) WITH (kafka_topic='input_topic', format='KAFKA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Map keys, including types that contain maps, are not supported as they may lead to unexpected behavior due to inconsistent serialization. Key column name: `K`. Column type: MAP<INTEGER, DOUBLE>. See https://github.com/confluentinc/ksql/issues/6621 for more."
      }
    },
    {
      "name": "MAP - C*AS - key",
      "statements": [
        "CREATE STREAM INPUT (k STRING KEY, v STRING) WITH (kafka_topic='input_topic', format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY MAP(k:=v);"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Map keys, including types that contain maps, are not supported as they may lead to unexpected behavior due to inconsistent serialization. Key column name: `KSQL_COL_0`. Column type: MAP<STRING, STRING>. See https://github.com/confluentinc/ksql/issues/6621 for more."
      }
    },
    {
      "name": "STRUCT - C* - key",
      "statements": [
        "CREATE STREAM INPUT (K STRUCT<F1 DOUBLE> KEY, foo INT) WITH (kafka_topic='input_topic', format='KAFKA');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'STRUCT'"
      }
    },
    {
      "name": "STRUCT - C*AS - key",
      "statements": [
        "CREATE STREAM INPUT (v DOUBLE) WITH (kafka_topic='input_topic', format='KAFKA');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY STRUCT(k := v);"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The 'KAFKA' format does not support type 'STRUCT'"
      }
    }
  ]
}