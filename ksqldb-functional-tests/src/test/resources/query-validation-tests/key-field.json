{
  "comments": [
    "Tests covering handling of key-fields.",
    "The 'key-field' is an optional field within the value that matches the key",
    "",
    "There are several main dimensions to this test suite:",
    " - source type:",
    "   - stream",
    "   - table",
    " - source key:",
    "   - initially null",
    "   - initially set",
    " - explicit changing of key:",
    "   - no key change",
    "   - partition by (same key)",
    "   - partition by (different key)",
    "   - group by (same key)",
    "   - group by (different key)",
    " - key present in target value schema:",
    "   - key in value",
    "   - key not in value",
    " - aliasing of the key field in the value schema",
    "   - no aliasing",
    "   - aliased key field",
    "",
    "Note: Not all combinations are valid, e.g. can not have an alias if there is no key.",
    "Note: There are some tests in joins.json that also test key fields are correctly set",
    "",
    "Most test cases follows the pattern of defining:",
    " INPUT - the initial source",
    " OUTPUT - a source built from INPUT using the dimensions in the title of the test",
    "",
    "Some tests may need intermediate sources to get to the required state. (Which is generally a source table where the key field is not set)",
    "",
    "The main point of the tests to:",
    "  a: test the post conditions in the metastore, i.e. that sources with the correct state are registered.",
    "  b: test the topology of the output"
  ],
  "tests": [
    {
      "name": "stream | initially null | no key change | - | -",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"FOO":1, "BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ],
        "topics": {
          "blacklist": ".*-repartition"
        }
      }
    },
    {
      "name": "stream | initially null | partition by (-) | key in value | no aliasing",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": "foo","value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"BAR":2, "K": "foo"}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": null},
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially null | partition by (-) | key in value | aliasing",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT foo AS ALIASED, bar FROM INPUT PARTITION BY ALIASED;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Line: 5, Col: 14: PARTITION BY column 'INPUT.ALIASED' cannot be resolved."
      }
    },
    {
      "name": "stream | initially null | partition by (-) | key not in value | -",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT foo, bar FROM INPUT PARTITION BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": null},
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially null | group by (-) | key in value | aliasing",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo AS Aliased, COUNT(*) FROM INPUT GROUP BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"KSQL_COL_0": 1}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": null},
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially null | group by (-) | key not in value | -",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo, COUNT(*) FROM INPUT GROUP BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"KSQL_COL_0": 1}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": null},
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially set | no key change | key in value | no aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"FOO":1, "BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "stream", "keyField": "FOO"}
        ]
      }
    },
    {
      "name": "stream | initially set | no key change | key in value | aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT K, foo as aliased, bar FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"ALIASED":1, "BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "stream", "keyField": "ALIASED"}
        ]
      }
    },
    {
      "name": "stream | initially set | no key change | key in value | aliasing + duplicate",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT K, foo as aliased, bar as foo FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"ALIASED":1, "FOO": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "stream", "keyField": "ALIASED"}
        ]
      }
    },
    {
      "name": "stream | initially set | no key change | key not in value | -",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT K, bar FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially set | partition by (same) | key in value | no aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"K":1, "BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "stream", "keyField": null, "schema": "FOO INT KEY, BAR INT, K INT"}
        ],
        "topics": {
          "blacklist": ".*-repartition"
        }
      }
    },
    {
      "name": "stream | initially set | partition by (same) | key in value | aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT foo AS aliased, bar FROM INPUT PARTITION BY aliased;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Line: 5, Col: 14: PARTITION BY column 'INPUT.ALIASED' cannot be resolved"
      }
    },
    {
      "name": "stream | initially set | partition by (same) | key not in value | -",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT foo, bar FROM INPUT PARTITION BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "stream", "keyField": null, "schema": "FOO INT KEY, BAR INT"}
        ],
        "topics": {
          "blacklist": ".*-repartition"
        }
      }
    },
    {
      "name": "stream | initially set | partition by (different) | key in value | no aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY bar;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 2, "value": {"FOO": 1, "K": 1}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially set | partition by (different) | key in value | aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT foo, bar AS aliased FROM INPUT PARTITION BY aliased;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Line: 5, Col: 14: PARTITION BY column 'INPUT.ALIASED' cannot be resolved."
      }
    },
    {
      "name": "stream | initially set | partition by (different) | key not in value | -",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT bar, foo FROM INPUT PARTITION BY bar;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 2, "value": {"FOO":1}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially set | group by (same) | key in value | aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo AS aliased, COUNT(*) FROM INPUT GROUP BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"KSQL_COL_0": 1}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "stream", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ],
        "topics": {
          "blacklist": ".*-repartition"
        }
      }
    },
    {
      "name": "stream | initially set | group by (same) | key not in value | -",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo, COUNT(*) FROM INPUT GROUP BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"KSQL_COL_0": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ],
        "topics": {
          "blacklist": ".*-repartition"
        }
      }
    },
    {
      "name": "stream | initially set | group by (different) | key in value | aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT bar AS aliased, COUNT(*) FROM INPUT GROUP BY bar;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 2, "value": {"KSQL_COL_0": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially set | group by (different) | key not in value | -",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT bar, COUNT(*) FROM INPUT GROUP BY bar;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 2, "value": {"KSQL_COL_0": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "table | initially null | no key change | - | -",
      "statements": [
        "CREATE TABLE INPUT (K STRING PRIMARY KEY, bar INT) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": "x", "value": {"bar": 1}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "x", "value": {"BAR": 1}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "table", "keyField": null},
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "table | initially null | group by (-) | key in value | aliasing",
      "comments": [
        "Note: GROUP BY takes the name of the field from the source schema."
      ],
      "statements": [
        "CREATE TABLE INPUT (K STRING PRIMARY KEY, foo INT) WITH (kafka_topic='input_topic', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo AS aliased, COUNT(*) FROM INPUT GROUP BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": "x", "value": {"foo": 1}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"KSQL_COL_0": 1}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "table", "keyField": null},
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "table | initially set | no key change | key in value | no aliasing",
      "statements": [
        "CREATE TABLE INPUT (K INT PRIMARY KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"FOO": 1, "BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "table", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "table", "keyField": "FOO"}
        ]
      }
    },
    {
      "name": "table | initially set | no key change | key in value | aliasing",
      "statements": [
        "CREATE TABLE INPUT (K INT PRIMARY KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT K, foo AS aliased, bar FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"ALIASED": 1, "BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "INPUT", "type": "table", "keyField": "FOO"},
          {"name": "OUTPUT", "type": "table", "keyField": "ALIASED"}
        ]
      }
    },
    {
      "name": "table | initially set | no key change | key not in value | -",
      "statements": [
        "CREATE TABLE INPUT (K INT PRIMARY KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT K, bar FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"BAR": 2}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "table | initially set | group by (same) | key in value | aliasing",
      "statements": [
        "CREATE TABLE INPUT (K INT PRIMARY KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo AS aliased, COUNT(*) FROM INPUT GROUP BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1,"value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1,"value": {"KSQL_COL_0":  1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "table | initially set | group by (same) | key not in value | -",
      "statements": [
        "CREATE TABLE INPUT (K INT PRIMARY KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo, COUNT(*) FROM INPUT GROUP BY foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1,"value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1,"value": {"KSQL_COL_0":  1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "table | initially set | group by (different) | key in value | aliasing",
      "statements": [
        "CREATE TABLE INPUT (K INT PRIMARY KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT bar AS aliased, COUNT(*) FROM INPUT GROUP BY bar;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 2,"value": {"KSQL_COL_0":  1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "table | initially set | group by (different) | key not in value | -",
      "statements": [
        "CREATE TABLE INPUT (K INT PRIMARY KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT bar, COUNT(*) FROM INPUT GROUP BY bar;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 2,"value": {"KSQL_COL_0":  1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially set | partition by multiple | key in value | no aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY foo, bar;"
      ],
      "comment": [
        "This test is present so that it fails if/when we support PARTITION BY on multiple fields.",
        "If/when we do, this test will fail to remind us to add tests to cover keyFields for new functionality"],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "line 2:61: mismatched input ',' expecting ';'"
      }
    },
    {
      "name": "stream | initially set | group by multiple | key in value | no aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo, bar, COUNT(*) FROM INPUT GROUP BY bar, foo;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key":"2|+|1", "value": {"KSQL_COL_0": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "stream | initially set | group by expression | key in value | no aliasing",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT foo + bar, COUNT(*) FROM INPUT GROUP BY foo + bar;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key":3, "value": {"KSQL_COL_1": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "table", "keyField": null}
        ]
      }
    },
    {
      "name": "where clause",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT K, foo FROM INPUT WHERE bar < 10;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"FOO": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": "FOO"}
        ]
      }
    },
    {
      "name": "where clause with alias",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT K, foo as boo FROM INPUT WHERE bar < 10;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"BOO": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": "BOO"}
        ]
      }
    },
    {
      "name": "using source alias in projection",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT K, i.foo FROM INPUT i WHERE bar < 10;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"FOO": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": "FOO"}
        ]
      }
    },
    {
      "name": "different type to Key",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', value_format='JSON', KEY='Foo');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "The KEY field (FOO) identified in the WITH clause is of a different type to the actual key column.\nUse of the KEY field is deprecated. Remove the KEY field from the WITH clause and specify the name of the key column by adding 'FOO INTEGER KEY' to the schema.\nKEY field type: INTEGER\nkey column type: STRING"
      }
    },
    {
      "name": "using full source name in projection",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT K, input.foo FROM INPUT WHERE bar < 10;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"FOO": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": "FOO"}
        ]
      }
    },
    {
      "name": "multiple copies of key field in projection",
      "statements": [
        "CREATE STREAM INPUT (K INT KEY, foo INT, bar INT) WITH (kafka_topic='input_topic', key='foo', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT K, foo as foo0, foo as foo1, AS_VALUE(K) as foo2, AS_VALUE(K) as foo3 FROM INPUT;"
      ],
      "inputs": [
        {"topic": "input_topic", "key": 1, "value": {"foo": 1, "bar": 2}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"FOO0": 1, "FOO1": 1, "FOO2": 1, "FOO3": 1}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": "FOO0"}
        ]
      }
    }
  ]
}
