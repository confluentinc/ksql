{
  "comments": [
    "Tests covering SQL NULL"
  ],
  "tests": [
    {
      "name": "stream clone row with null value",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": null},
        {"topic": "test_topic", "key": 2, "value": {"NAME": null}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": null},
        {"topic": "OUTPUT", "key": 2, "value": {"NAME": null}}
      ]
    },
    {
      "name": "stream filter with null value",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE NAME IS NULL;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": null},
        {"topic": "test_topic", "key": 2, "value": {"NAME": null}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 2, "value": {"NAME": null}}
      ]
    },
    {
      "name": "stream PARTITION BY with null value",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY NAME;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": null},
        {"topic": "test_topic", "key": 2, "value": {"NAME": null}},
        {"topic": "test_topic", "key": 3, "value": {"NAME": "n"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": null, "value": null},
        {"topic": "OUTPUT", "key": null, "value": {"ID": 2}},
        {"topic": "OUTPUT", "key": "n", "value": {"ID": 3}}
      ]
    },
    {
      "name": "stream PARTITION BY IS NULL with null value",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING, VAL STRING) WITH (kafka_topic='test_topic', format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY (NAME IS NULL);"
      ],
      "inputs": [
        {"topic": "test_topic", "timestamp": 1, "key": 1, "value": null},
        {"topic": "test_topic", "timestamp": 2, "key": 2, "value": {"NAME": null, "VAL": "a"}},
        {"topic": "test_topic", "timestamp": 3, "key": 3, "value": {"NAME": "n", "VAL": "b"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "timestamp": 1, "key": null, "value": null},
        {"topic": "OUTPUT", "timestamp": 2, "key": true, "value": {"NAME": null, "ID": 2, "VAL": "a"}},
        {"topic": "OUTPUT", "timestamp": 3, "key": false, "value": {"NAME": "n", "ID": 3, "VAL": "b"}}
      ]
    },
    {
      "name": "stream GROUP BY with null value",
      "statements": [
        "CREATE STREAM INPUT (NAME STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT NAME, COUNT() AS COUNT FROM INPUT GROUP BY NAME;"
      ],
      "inputs": [
        {"topic": "test_topic", "timestamp": 1, "value": null},
        {"topic": "test_topic", "timestamp": 2, "value": {"NAME": null}},
        {"topic": "test_topic", "timestamp": 3, "value": {"NAME": "n"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "timestamp": 3, "key": "n", "value": {"COUNT": 1}}
      ]
    },
    {
      "name": "stream GROUP BY IS NULL with null value",
      "statements": [
        "CREATE STREAM INPUT (NAME STRING) WITH (kafka_topic='test_topic', format='JSON');",
        "CREATE TABLE OUTPUT AS SELECT NAME IS NULL, COUNT() AS COUNT FROM INPUT GROUP BY (NAME IS NULL);"
      ],
      "inputs": [
        {"topic": "test_topic", "timestamp": 1, "value": null},
        {"topic": "test_topic", "timestamp": 2, "value": {"NAME": null}},
        {"topic": "test_topic", "timestamp": 3, "value": {"NAME": "n"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "timestamp": 2, "key": true, "value": {"COUNT": 1}},
        {"topic": "OUTPUT", "timestamp": 3, "key": false, "value": {"COUNT": 1}}
      ]
    },
    {
      "name": "is null",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, ID IS NULL AS ID_NULL, NAME IS NULL AS NAME_NULL FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": {"NAME": "not null"}},
        {"topic": "test_topic", "key": null, "value": {"NAME": null}},
        {"topic": "test_topic", "key": 0, "value": {}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"ID_NULL": false, "NAME_NULL": false}},
        {"topic": "OUTPUT", "key": null, "value": {"ID_NULL": true, "NAME_NULL": true}},
        {"topic": "OUTPUT", "key": 0, "value": {"ID_NULL": false, "NAME_NULL": true}}
      ]
    },
    {
      "name": "is not null",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, ID IS NOT NULL AS ID_NULL, NAME IS NOT NULL AS NAME_NULL FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": {"NAME": "not null"}},
        {"topic": "test_topic", "key": null, "value": {"NAME": null}},
        {"topic": "test_topic", "key": 0, "value": {}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"ID_NULL": true, "NAME_NULL": true}},
        {"topic": "OUTPUT", "key": null, "value": {"ID_NULL": false, "NAME_NULL": false}},
        {"topic": "OUTPUT", "key": 0, "value": {"ID_NULL": true, "NAME_NULL": false}}
      ]
    },
    {
      "name": "null equals",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, COL0 BIGINT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, ID = COL0, NULL IS NULL FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": null, "value": {"COL0": 12344}},
        {"topic": "test_topic", "key": null, "value": {"COL0": null}},
        {"topic": "test_topic", "key": 0, "value": {}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": null, "value": {"KSQL_COL_0": false, "KSQL_COL_1": true}},
        {"topic": "OUTPUT", "key": null, "value": {"KSQL_COL_0": false, "KSQL_COL_1": true}},
        {"topic": "OUTPUT", "key": 0, "value": {"KSQL_COL_0": false, "KSQL_COL_1": true}}
      ]
    },
    {
      "name": "comparison with null",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, COL0 BIGINT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, NULL <> NULL FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Comparison with NULL not supported: NULL <> NULL"
      }
    },
    {
      "name": "coalesce",
      "statements": [
        "CREATE STREAM INPUT (COL0 INT KEY, COL1 INT, COL2 STRING, COL3 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT COL0, COALESCE(COL0, COL1, COL0, COL1) AS A, COALESCE(COL2, 'x') AS B, COALESCE(COL3, ARRAY[10, 20]) AS C FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": {"COL1": 2, "COL2": "not null", "COL3": [1, 2, 3]}},
        {"topic": "test_topic", "key": null, "value": {}},
        {"topic": "test_topic", "key": null, "value": null},
        {"topic": "test_topic", "key": null, "value": {"COL1": 2, "COL2": "not null", "COL3": [4, 5, 6]}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"A": 1, "B": "not null", "C": [1, 2, 3]}},
        {"topic": "OUTPUT", "key": null, "value": {"A": null, "B": "x", "C": [10, 20]}},
        {"topic": "OUTPUT", "key": null, "value": null},
        {"topic": "OUTPUT", "key": null, "value": {"A": 2, "B": "not null", "C": [4, 5, 6]}}
      ]
    },
    {
      "name": "coalesce - no params",
      "statements": [
        "CREATE STREAM INPUT (COL0 INT KEY, COL1 STRING, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT COL0, COALESCE() FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Function 'COALESCE' does not accept parameters ()"
      }
    },
    {
      "name": "coalesce - with parse_date",
      "statements": [
        "CREATE STREAM INPUT (date_string VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT parse_date(date_string, 'yyyy-MM-dd') as parse_as_date, parse_date(concat(date_string, '-01-01'), 'yyyy-MM-dd') as parse_as_year, coalesce(parse_date(date_string, 'yyyy-MM-dd'),  parse_date(concat(date_string, '-01-01'), 'yyyy-MM-dd')) as parse_as_either FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": null, "value": {"date_string": "2003-12-24"}},
        {"topic": "test_topic", "key": null, "value": {"date_string": "2008-08-13"}},
        {"topic": "test_topic", "key": null, "value": {"date_string": "2004"}},
        {"topic": "test_topic", "key": null, "value": {"date_string": "2012"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": null, "value": {"PARSE_AS_DATE":  12410,
          "PARSE_AS_YEAR": 12410, "PARSE_AS_EITHER": 12410}},
        {"topic": "OUTPUT", "key": null, "value": {"parse_as_date":  14104,
          "parse_as_year": 14104, "parse_as_either": 14104}},
        {"topic": "OUTPUT", "key": null, "value": {"parse_as_date":  null,
          "parse_as_year": 12418, "parse_as_either": 12418}},
        {"topic": "OUTPUT", "key": null, "value": {"parse_as_date":  null,
          "parse_as_year": 15340, "parse_as_either": 15340}}
      ]
    },
    {
      "name": "if null",
      "statements": [
        "CREATE STREAM INPUT (COL0 INT KEY, COL1 STRING, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT COL0, IFNULL(COL0, 10) AS A, IFNULL(COL1, 'x') AS B, IFNULL(COL2, ARRAY[10, 20]) AS C FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": {"COL1": "not null", "COL2": [1, 2, 3]}},
        {"topic": "test_topic", "key": null, "value": {}},
        {"topic": "test_topic", "key": null, "value": null},
        {"topic": "test_topic", "key": 2, "value": {"COL1": "not null", "COL2": [4, 5, 6]}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"A": 1, "B": "not null", "C": [1, 2, 3]}},
        {"topic": "OUTPUT", "key": null, "value": {"A": 10, "B": "x", "C": [10, 20]}},
        {"topic": "OUTPUT", "key": null, "value": null},
        {"topic": "OUTPUT", "key": 2, "value": {"A": 2, "B": "not null", "C": [4, 5, 6]}}
      ]
    },
    {
      "name": "if null with nested structs",
      "statements": [
        "CREATE STREAM INPUT (COL0 INT KEY, COL1 STRUCT<Person STRUCT<Name STRING>>, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT COL0, IFNULL(COL0, 10) AS A, IFNULL(COL1->Person->Name, 'x') AS B, IFNULL(COL2, ARRAY[10, 20]) AS C FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": {"COL1": {"Person":  {"Name": "George"}}, "COL2": [1, 2, 3]}},
        {"topic": "test_topic", "key": null, "value": {}},
        {"topic": "test_topic", "key": null, "value": null},
        {"topic": "test_topic", "key": 2, "value": {"COL1": {"Person":  null}, "COL2": [4, 5, 6]}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"A": 1, "B": "George", "C": [1, 2, 3]}},
        {"topic": "OUTPUT", "key": null, "value": {"A": 10, "B": "x", "C": [10, 20]}},
        {"topic": "OUTPUT", "key": null, "value": null},
        {"topic": "OUTPUT", "key": 2, "value": {"A": 2, "B": "x", "C": [4, 5, 6]}}
      ]
    },
    {
      "name": "dereference nested structs with nulls",
      "statements": [
        "CREATE STREAM INPUT (COL0 INT KEY, COL1 STRUCT<Person STRUCT<Name STRING>>, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT COL0, IFNULL(COL0, 10) AS A, COL1->Person->Name AS B, IFNULL(COL2, ARRAY[10, 20]) AS C FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": {"COL1": {"Person":  {"Name": "George"}}, "COL2": [1, 2, 3]}},
        {"topic": "test_topic", "key": null, "value": {}},
        {"topic": "test_topic", "key": null, "value": null},
        {"topic": "test_topic", "key": 2, "value": {"COL1": {"Person":  null}, "COL2": [4, 5, 6]}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"A": 1, "B": "George", "C": [1, 2, 3]}},
        {"topic": "OUTPUT", "key": null, "value": {"A": 10, "B": null, "C": [10, 20]}},
        {"topic": "OUTPUT", "key": null, "value": null},
        {"topic": "OUTPUT", "key": 2, "value": {"A": 2, "B": null, "C": [4, 5, 6]}}
      ]
    },
    {
      "name": "log no errors when there is a null map",
      "statements": [
        "CREATE STREAM INPUT (ID STRING KEY, A_MAP MAP<STRING, INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, A_MAP['expected'], A_MAP['missing'], IFNULL(A_MAP['expected'], -1), IFNULL(A_MAP['missing'], -1)  FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"A_MAP": {"expected": 10}}},
        {"topic": "test_topic", "value": {"A_MAP": null}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"KSQL_COL_0": 10, "KSQL_COL_1": null, "KSQL_COL_2": 10, "KSQL_COL_3": -1}},
        {"topic": "OUTPUT", "value": {"KSQL_COL_0": null, "KSQL_COL_1": null, "KSQL_COL_2": -1, "KSQL_COL_3": -1}}
      ]
    },
    {
      "name": "log no errors when there is a null array",
      "statements": [
        "CREATE STREAM INPUT (ID STRING KEY, col0 ARRAY<ARRAY<INT>>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT ID, col0[1][2], IFNULL(col0[1][2], -1) FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"col0": [[0, 1],[2]]}},
        {"topic": "test_topic", "value": {"col0": [null, [2]]}},
        {"topic": "test_topic", "value": {"col0": null}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"KSQL_COL_0": 1, "KSQL_COL_1": 1}},
        {"topic": "OUTPUT", "value": {"KSQL_COL_0": null, "KSQL_COL_1": -1}},
        {"topic": "OUTPUT", "value": {"KSQL_COL_0": null, "KSQL_COL_1": -1}}
      ]
    },
    {
      "name": "NULL column",
      "statements": [
        "CREATE STREAM INPUT (ROWKEY INT KEY, COL0 NULL) WITH (kafka_topic='test_topic', value_format='JSON');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.parser.exception.ParseFailedException",
        "message": "Syntax Error"
      }
    },
    {
      "name": "NULL element type",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, COL0 ARRAY<NULL>) WITH (kafka_topic='test_topic', value_format='JSON');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.parser.exception.ParseFailedException",
        "message": "Syntax Error"
      }
    },
    {
      "name": "NULL value type",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, COL0 MAP<STRING, NULL>) WITH (kafka_topic='test_topic', value_format='JSON');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.parser.exception.ParseFailedException",
        "message": "Syntax Error"
      }
    },
    {
      "name": "NULL field type",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, COL0 STRUCT<fo NULL>) WITH (kafka_topic='test_topic', value_format='JSON');"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.parser.exception.ParseFailedException",
        "message": "Syntax Error"
      }
    },
    {
      "name": "null join expression",
      "statements": [
        "CREATE STREAM L (A INT KEY, B INT, C INT) WITH (kafka_topic='LEFT', value_format='JSON');",
        "CREATE STREAM R (A INT KEY, B INT, C INT) WITH (kafka_topic='RIGHT', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM L JOIN R WITHIN 10 SECONDS ON L.A = null;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Invalid comparison expression 'null' in join '(L.A = null)'. Each side of the join comparision must contain references from exactly one source."
      }
    },
    {
      "name": "null as column",
      "statements": [
        "CREATE STREAM INPUT (COL0 INT KEY) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT COL0, null as COL2 FROM INPUT;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Can't infer a type of null. Please explicitly cast it to a required type, e.g. CAST(null AS VARCHAR)."
      }
    },
    {
      "name": "null if",
      "statements": [
        "CREATE STREAM INPUT (COL0 INT KEY, COL1 STRING, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT COL0, NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B, NULLIF(COL2, ARRAY[1, 2, 3]) AS C FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": {"COL1": "not null", "COL2": [1, 2, 3]}},
        {"topic": "test_topic", "key": null, "value": {}},
        {"topic": "test_topic", "key": null, "value": null},
        {"topic": "test_topic", "key": 2, "value": {"COL1": "not null", "COL2": [4, 5, 6]}},
        {"topic": "test_topic", "key": 3, "value": {"COL1": "not null", "COL2": []}},
        {"topic": "test_topic", "key": 4, "value": {"COL1": null, "COL2": [7,8]}},
        {"topic": "test_topic", "key": 10, "value": {"COL1": "x", "COL2": [7,8]}},
        {"topic": "test_topic", "key": 1, "value": {"COL1": "X", "COL2": [7,8]}},
        {"topic": "test_topic", "key": null, "value": {"COL1": "x", "COL2": [7,8]}},
        {"topic": "test_topic", "key": null, "value": {"COL1": null, "COL2": [7,8]}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"A": 1, "B": "not null", "C": null}},
        {"topic": "OUTPUT", "key": null, "value": {"A": null, "B": null, "C": null}},
        {"topic": "OUTPUT", "key": null, "value": null},
        {"topic": "OUTPUT", "key": 2, "value": {"A": 2, "B": "not null", "C": [4, 5, 6]}},
        {"topic": "OUTPUT", "key": 3, "value": {"A": 3, "B": "not null", "C": []}},
        {"topic": "OUTPUT", "key": 4, "value": {"A": 4, "B": null, "C": [7,8]}},
        {"topic": "OUTPUT", "key": 10, "value": {"A": null, "B": null, "C": [7,8]}},
        {"topic": "OUTPUT", "key": 1, "value": {"A": 1, "B": "X", "C": [7,8]}},
        {"topic": "OUTPUT", "key": null, "value": {"A": null, "B": null, "C": [7,8]}},
        {"topic": "OUTPUT", "key": null, "value": {"A": null, "B": null, "C": [7,8]}}
      ]
    }
  ]
}