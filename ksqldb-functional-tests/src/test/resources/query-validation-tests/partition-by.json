{
  "tests": [
    {
      "name": "only key column - select star",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by ID;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [{"topic": "input", "key": 10, "value": {"NAME": "bob"}}],
      "outputs": [{"topic": "OUTPUT", "key": 10, "value": {"NAME": "bob"}}],
      "post": {
        "topics": {
          "blacklist": ".*-repartition"
        },
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "ID INT KEY, NAME STRING"}
        ]
      }
    },
    {
      "name": "single value column - select star",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING, AGE INT) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by NAME;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [{"topic": "input", "key": 10, "value": {"NAME": "bob", "AGE": 22}}],
      "outputs": [{"topic": "OUTPUT", "key": "bob", "value": {"ID": 10, "AGE": 22}}],
      "post": {
        "topics": {
          "blacklist": ".*-repartition"
        },
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "NAME STRING KEY, AGE INT, ID INT"}
        ]
      }
    },
    {
      "name": "struct field - select star",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, ADDRESS STRUCT<STREET STRING, TOWN STRING>, AGE INT) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by ADDRESS->TOWN;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [{"topic": "input", "key": 10, "value": {"ADDRESS": {"STREET": "1st Steet", "Town": "Oxford"}, "AGE": 22}}],
      "outputs": [{"topic": "OUTPUT", "key": "Oxford", "value": {"ID": 10, "ADDRESS": {"STREET": "1st Steet", "TOWN": "Oxford"}, "AGE": 22}}],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "ADDRESS__TOWN STRING KEY, ADDRESS STRUCT<STREET STRING, TOWN STRING>, AGE INT, ID INT"}
        ]
      }
    },
    {
      "name": "struct field - select duplicate",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, ADDRESS STRUCT<STREET STRING, TOWN STRING>, AGE INT) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select ADDRESS->TOWN from INPUT partition by ADDRESS->TOWN;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Value column name(s) `ADDRESS__TOWN` clashes with key column name(s)"
      }
    },
    {
      "name": "expression - select star",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by ABS(ID);"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [{"topic": "input", "key": 10, "value": {"NAME": "bob"}}],
      "outputs": [{"topic": "OUTPUT", "key": 10, "value": {"NAME": "bob", "ID": 10}}],
      "post": {
        "topics": {
          "blacklist": ".*-repartition"
        },
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "KSQL_COL_0 INT KEY, NAME STRING, ID INT"}
        ]
      }
    },
    {
      "name": "only key column - select columns",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING, OTHER INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT NAME FROM INPUT PARTITION BY ID;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [
        {"topic": "test_topic", "key": 11, "value": {"name": "a"}},
        {"topic": "test_topic", "key": 10, "value": {"name": "b"}},
        {"topic": "test_topic", "key": 11, "value": {"name": "c"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 11, "value": {"NAME": "a"}},
        {"topic": "OUTPUT", "key": 10, "value": {"NAME": "b"}},
        {"topic": "OUTPUT", "key": 11, "value": {"NAME": "c"}}
      ],
      "post": {
        "sources": [
          {
            "name": "OUTPUT",
            "type": "stream",
            "keyFormat": {"format": "KAFKA"},
            "schema": "ID INT KEY, NAME STRING"
          }
        ]
      }
    },
    {
      "name": "only key column - select star - with join on keys",
      "statements": [
        "CREATE STREAM L (A INT KEY, B INT, C INT) WITH (kafka_topic='LEFT', value_format='JSON');",
        "CREATE STREAM R (X INT KEY, Y INT, Z INT) WITH (kafka_topic='RIGHT', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM L JOIN R WITHIN 10 SECONDS ON L.A = R.X PARTITION BY L.B;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [
        {"topic": "LEFT", "key": 0, "value": {"B": 1, "C": 2}, "timestamp": 11},
        {"topic": "RIGHT", "key": 0, "value": {"Y": -1, "Z": -2}, "timestamp": 12}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 1, "value": {"L_ROWTIME": 11, "R_ROWTIME": 12, "L_A": 0, "R_X": 0, "R_Y": -1, "L_C": 2, "R_Z": -2}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "L_B INT KEY, L_C INT, L_ROWTIME BIGINT, L_A INT, R_Y INT, R_Z INT, R_ROWTIME BIGINT, R_X INT"}
        ]
      }
    },
    {
      "name": "only key column - select star - with join on value columns",
      "statements": [
        "CREATE STREAM L (A INT KEY, B INT, C INT) WITH (kafka_topic='LEFT', value_format='JSON');",
        "CREATE STREAM R (X INT KEY, Y INT, Z INT) WITH (kafka_topic='RIGHT', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM L JOIN R WITHIN 10 SECONDS ON L.B = R.Y PARTITION BY A;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [
        {"topic": "LEFT", "key": 0, "value": {"B": 1, "C": 2}, "timestamp": 11},
        {"topic": "RIGHT", "key": -1, "value": {"Y": 1, "Z": -2}, "timestamp": 12}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 0, "value": {"L_ROWTIME": 11, "R_ROWTIME": 12, "R_X": -1, "L_B": 1, "R_Y": 1, "L_C": 2, "R_Z": -2}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "L_A INT KEY, L_B INT, L_C INT, L_ROWTIME BIGINT, R_Y INT, R_Z INT, R_ROWTIME BIGINT, R_X INT"}
        ]
      }
    },
    {
      "name": "nulls",
      "statements": [
        "CREATE STREAM TEST (ROWKEY BIGINT KEY, ID bigint, NAME varchar) with (kafka_topic='test_topic', value_format = 'delimited');",
        "CREATE STREAM REPARTITIONED AS select id from TEST partition by name;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [
        {"topic": "test_topic", "key": 1, "value": null},
        {"topic": "test_topic", "key": 2, "value": "4,"},
        {"topic": "test_topic", "key": 3, "value": "5,zero"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": null, "value": null},
        {"topic": "REPARTITIONED", "key": null, "value": "4"},
        {"topic": "REPARTITIONED", "key": "zero", "value": "5"}
      ]
    },
    {
      "name": "partition by with projection select some",
      "statements": [
        "CREATE STREAM TEST (ID bigint, NAME varchar, VALUE bigint) with (kafka_topic='test_topic', value_format = 'delimited');",
        "CREATE STREAM REPARTITIONED AS select name,id from TEST partition by name;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,zero,50"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "zero", "value": "zero,0"}
      ],
      "post": {
        "sources": [
          {
            "name": "REPARTITIONED",
            "type": "stream",
            "keyFormat": {"format": "KAFKA"},
            "schema": "ROWKEY STRING KEY, NAME STRING, ID BIGINT"
          }
        ]
      }
    },
    {
      "name": "int column",
      "statements": [
        "CREATE STREAM TEST (ROWKEY STRING KEY, ID bigint) with (kafka_topic='test_topic', value_format = 'delimited');",
        "CREATE STREAM OUTPUT AS SELECT * from TEST partition by id;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "a", "value": "10"}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 10, "value": "10"}
      ],
      "post": {
        "sources": [
          {
            "name": "OUTPUT",
            "type": "stream",
            "keyFormat": {"format": "KAFKA"},
            "schema": "ROWKEY BIGINT KEY, ID BIGINT"
          }
        ]
      }
    },
    {
      "name": "bigint key field",
      "statements": [
        "CREATE STREAM TEST (ROWKEY BIGINT KEY, ID BIGINT) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM OUTPUT AS select * from TEST partition by ID;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 0, "value": "0"}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 0, "value": "0"}
      ],
      "post": {
        "sources": [
          {
            "name": "OUTPUT",
            "type": "stream",
            "keyFormat": {"format": "KAFKA"},
            "schema": "ROWKEY BIGINT KEY, ID BIGINT"
          }
        ]
      }
    },
    {
      "name": "partition by - KAFKA",
      "statements": [
        "CREATE STREAM INPUT (ID int) with (kafka_topic='input', value_format = 'KAFKA');",
        "CREATE STREAM OUTPUT AS select ID from INPUT partition by ID;"
      ],
      "inputs": [
        {"topic": "input", "key": "0", "value": 10}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 10, "value": 10}
      ],
      "post": {
        "sources": [
          {
            "name": "OUTPUT",
            "type": "stream",
            "keyFormat": {"format": "KAFKA"},
            "schema": "ROWKEY INT KEY, ID INT"
          }
        ]
      }
    },
    {
      "name": "partition by with projection select all",
      "statements": [
        "CREATE STREAM TEST (ID bigint, NAME varchar, VALUE bigint) with (kafka_topic='test_topic', value_format = 'delimited');",
        "CREATE STREAM REPARTITIONED AS select * from TEST partition by name;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,zero,50"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "zero", "value": "0,zero,50"}
      ]
    },
    {
      "name": "partition by with null value",
      "statements": [
        "CREATE STREAM TEST (ROWKEY BIGINT KEY, ID bigint, NAME varchar, VALUE bigint) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select name,id from TEST partition by name;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": 0, "value": null},
        {"topic": "test_topic", "key": 0, "value": "0,zero,50"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "zero", "value": "zero,0"}
      ]
    },
    {
      "name": "partition by with null partition by value",
      "statements": [
        "CREATE STREAM TEST (ID bigint, NAME varchar, VALUE bigint) with (kafka_topic='test_topic', value_format = 'delimited');",
        "CREATE STREAM REPARTITIONED AS select name,id from TEST partition by name;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,,1"},
        {"topic": "test_topic", "key": "0", "value": "0,zero,50"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "zero", "value": "zero,0"}
      ]
    },
    {
      "name": "aliased key field - different name",
      "statements": [
        "CREATE STREAM TEST (ID varchar, NAME varchar) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select ID + '_new' AS ID_new, NAME from TEST partition by ID_NEW;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Invalid identifier for PARTITION BY clause: 'ID_NEW'"
      }
    },
    {
      "name": "aliased key field - same name",
      "comments": [
        "See https://github.com/confluentinc/ksql/issues/2525"
      ],
      "statements": [
        "CREATE STREAM TEST (ID varchar, NAME varchar) with (kafka_topic='test_topic', value_format = 'delimited', key='ID');",
        "CREATE STREAM REPARTITIONED AS select ID + '_new' AS ID, NAME from TEST partition by ID;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "0", "value": "0,a"},
        {"topic": "test_topic", "key": "1", "value": "1,b"}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "0", "value": "0_new,a"},
        {"topic": "REPARTITIONED", "key": "1", "value": "1_new,b"}
      ],
      "post": {
        "sources": [
          {"name": "REPARTITIONED", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "partition by project ROWKEY",
      "statements": [
        "CREATE STREAM INPUT (ID bigint) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select ROWKEY AS OLDKEY from INPUT partition by ID;"
      ],
      "inputs": [{"topic": "input", "key": "foo", "value": {"ID":  10}}],
      "outputs": [{"topic": "OUTPUT", "key": 10, "value": {"OLDKEY": "foo"}}]
    },
    {
      "name": "partition by ROWKEY",
      "statements": [
        "CREATE STREAM INPUT (ID bigint) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by ROWKEY;"
      ],
      "inputs": [{"topic": "input", "key": "10", "value": {"ID":  22}}],
      "outputs": [{"topic": "OUTPUT", "key": "10", "value": {"ID":  22}}],
      "post": {
        "topics": {
          "blacklist": ".*-repartition"
        },
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "ROWKEY STRING KEY, ID BIGINT"}
        ]
      }
    },
    {
      "name": "partition by only key column",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by ID;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [{"topic": "input", "key": 10, "value": {"NAME": "bob"}}],
      "outputs": [{"topic": "OUTPUT", "key": 10, "value": {"NAME": "bob"}}],
      "post": {
        "topics": {
          "blacklist": ".*-repartition"
        },
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "ID INT KEY, NAME STRING"}
        ]
      }
    },
    {
      "name": "partition by ROWTIME",
      "statements": [
        "CREATE STREAM INPUT (ID bigint) with (kafka_topic='input', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select * from INPUT partition by ROWTIME;"
      ],
      "inputs": [{"topic": "input", "value": {"ID":  22}, "timestamp": 10}],
      "outputs": [{"topic": "OUTPUT", "key": 10, "value": {"ID":  22}, "timestamp": 10}]
    },
    {
      "name": "partition by ROWKEY in join on ROWKEY",
      "statements": [
        "CREATE STREAM L (A STRING, B STRING) WITH (kafka_topic='LEFT', value_format='JSON', KEY='A');",
        "CREATE STREAM R (C STRING, D STRING) WITH (kafka_topic='RIGHT', value_format='JSON', KEY='C');",
        "CREATE STREAM OUTPUT AS SELECT L.ROWKEY, R.ROWKEY FROM L JOIN R WITHIN 10 SECONDS ON L.A = R.C PARTITION BY L.ROWKEY;"
      ],
      "inputs": [
        {"topic": "LEFT", "key": "join", "value": {"A": "join", "B": "b"}},
        {"topic": "RIGHT", "key": "join", "value": {"C": "join", "D": "d"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "join", "value": {"L_ROWKEY": "join", "R_ROWKEY": "join"}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": "L_ROWKEY"}
        ],
        "topics": {
          "blacklist": ".*-repartition"
        }
      }
    },
    {
      "name": "partition by ROWKEY in join on non-ROWKEY",
      "statements": [
        "CREATE STREAM L (A STRING, B STRING) WITH (kafka_topic='LEFT', value_format='JSON', KEY='A');",
        "CREATE STREAM R (C STRING, D STRING) WITH (kafka_topic='RIGHT', value_format='JSON', KEY='C');",
        "CREATE STREAM OUTPUT AS SELECT L.ROWKEY, R.ROWKEY FROM L JOIN R WITHIN 10 SECONDS ON L.B = R.D PARTITION BY L.ROWKEY;"
      ],
      "inputs": [
        {"topic": "LEFT", "key": "a", "value": {"A": "a", "B": "join"}},
        {"topic": "RIGHT", "key": "c", "value": {"C": "c", "D": "join"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "a", "value": {"L_ROWKEY": "a", "R_ROWKEY": "c"}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": "L_ROWKEY"}
        ]
      }
    },
    {
      "name": "partition by ROWKEY in join on ROWKEY ALIASED",
      "statements": [
        "CREATE STREAM L (A STRING, B STRING) WITH (kafka_topic='LEFT', value_format='JSON', KEY='A');",
        "CREATE STREAM R (C STRING, D STRING) WITH (kafka_topic='RIGHT', value_format='JSON', KEY='C');",
        "CREATE STREAM OUTPUT AS SELECT L.ROWKEY, R.ROWKEY FROM L JOIN R WITHIN 10 SECONDS ON L.A = R.C PARTITION BY L.A;"
      ],
      "inputs": [
        {"topic": "LEFT", "key": "join", "value": {"A": "join", "B": "b"}},
        {"topic": "RIGHT", "key": "join", "value": {"C": "join", "D": "d"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "join", "value": {"L_ROWKEY": "join", "R_ROWKEY": "join"}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ],
        "topics": {
          "blacklist": ".*-repartition"
        }
      }
    },
    {
      "name": "partition by non-ROWKEY in join on ROWKEY",
      "statements": [
        "CREATE STREAM L (A STRING, B STRING) WITH (kafka_topic='LEFT', value_format='JSON', KEY='A');",
        "CREATE STREAM R (C STRING, D STRING) WITH (kafka_topic='RIGHT', value_format='JSON', KEY='C');",
        "CREATE STREAM OUTPUT AS SELECT L.ROWKEY, R.ROWKEY FROM L JOIN R WITHIN 10 SECONDS ON L.A = R.C PARTITION BY L.B;"
      ],
      "inputs": [
        {"topic": "LEFT", "key": "join", "value": {"A": "join", "B": "b"}},
        {"topic": "RIGHT", "key": "join", "value": {"C": "join", "D": "d"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "b", "value": {"L_ROWKEY": "join", "R_ROWKEY": "join"}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "partition by non-ROWKEY in join on non-ROWKEY",
      "statements": [
        "CREATE STREAM L (A STRING, B STRING) WITH (kafka_topic='LEFT', value_format='JSON', KEY='A');",
        "CREATE STREAM R (C STRING, D STRING) WITH (kafka_topic='RIGHT', value_format='JSON', KEY='C');",
        "CREATE STREAM OUTPUT AS SELECT L.ROWKEY, R.ROWKEY FROM L JOIN R WITHIN 10 SECONDS ON L.B = R.D PARTITION BY L.B;"
      ],
      "inputs": [
        {"topic": "LEFT", "key": "a", "value": {"A": "a", "B": "join"}},
        {"topic": "RIGHT", "key": "c", "value": {"C": "c", "D": "join"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "join", "value": {"L_ROWKEY": "a", "R_ROWKEY": "c"}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "keyField": null}
        ]
      }
    },
    {
      "name": "only key column",
      "statements": [
        "CREATE STREAM INPUT (ID INT KEY, NAME STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT PARTITION BY ID;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [
        {"topic": "test_topic", "timestamp": 12345, "key": 11, "value": {"name": "a"}},
        {"topic": "test_topic", "timestamp": 12365, "key": 10, "value": {"name": "b"}},
        {"topic": "test_topic", "timestamp": 12375, "key": 11, "value": {"name": "c"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": 11, "value": {"NAME": "a"}},
        {"topic": "OUTPUT", "key": 10, "value": {"NAME": "b"}},
        {"topic": "OUTPUT", "key": 11, "value": {"NAME": "c"}}
      ],
      "post": {
        "sources": [
          {
            "name": "OUTPUT",
            "type": "stream",
            "keyFormat": {"format": "KAFKA"},
            "schema": "ID INT KEY, NAME STRING"
          }
        ]
      }
    },
    {
      "name": "should handled quoted key and value",
      "statements": [
        "CREATE STREAM INPUT (`Key` STRING KEY, `Name` STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT *, `Name` AS `Name2` FROM INPUT PARTITION BY `Key`;"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [
        {"topic": "test_topic", "timestamp": 12345, "key": "x", "value": {"Name": "a"}},
        {"topic": "test_topic", "timestamp": 12365, "key": "y", "value": {"Name": "b"}},
        {"topic": "test_topic", "timestamp": 12375, "key": "x", "value": {"Name": "c"}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "key": "x", "value": {"Name": "a", "Name2": "a"}},
        {"topic": "OUTPUT", "key": "y", "value": {"Name": "b", "Name2": "b"}},
        {"topic": "OUTPUT", "key": "x", "value": {"Name": "c", "Name2": "c"}}
      ],
      "post": {
        "sources": [
          {
            "name": "OUTPUT",
            "type": "stream",
            "keyFormat": {"format": "KAFKA"},
            "schema": "`Key` STRING KEY, `Name` STRING, `Name2` STRING"
          }
        ]
      }
    },
    {
      "name": "nulls using coalesce",
      "statements": [
        "CREATE STREAM TEST (ID BIGINT KEY, NAME varchar) with (kafka_topic='test_topic', value_format = 'json');",
        "CREATE STREAM REPARTITIONED AS select id from TEST partition by COALESCE(name, 'default');"
      ],
      "properties": {
        "ksql.any.key.name.enabled": true
      },
      "inputs": [
        {"topic": "test_topic", "key": 0, "value": {"NAME": "fred"}},
        {"topic": "test_topic", "key": 1, "value": {"NAME": null}},
        {"topic": "test_topic", "key": 2, "value": {}}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": "fred", "value": {"ID": 0}},
        {"topic": "REPARTITIONED", "key": "default", "value": {"ID": 1}},
        {"topic": "REPARTITIONED", "key": "default", "value": {"ID": 2}}
      ]
    },
    {
      "name": "should handle PARTITION BY that throws",
      "statements": [
        "CREATE STREAM TEST (ID bigint, shouldThrow BOOLEAN) with (kafka_topic='test_topic', value_format = 'json');",
        "CREATE STREAM REPARTITIONED AS select ID from TEST partition by bad_udf(shouldThrow);"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "a", "value": {"ID": 1, "shouldThrow": false}},
        {"topic": "test_topic", "key": "b", "value": {"ID": 2, "shouldThrow": true}},
        {"topic": "test_topic", "key": "c", "value": {"ID": 3, "shouldThrow": false}}
      ],
      "outputs": [
        {"topic": "REPARTITIONED", "key": 0, "value": {"ID": 1}},
        {"topic": "REPARTITIONED", "key": 0, "value": {"ID": 3}}
      ]
    }
  ]
}
