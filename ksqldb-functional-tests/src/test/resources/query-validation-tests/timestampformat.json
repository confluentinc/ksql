{
  "comments": [
    "You can specify multiple statements per test case, i.e., to set up the various streams needed",
    "for joins etc, but currently only the final topology will be verified. This should be enough",
    "for most tests as we can simulate the outputs from previous stages into the final stage. If we",
    "take a modular approach to testing we can still verify that it all works correctly, i.e, if we",
    "verify the output of a select or aggregate is correct, we can use simulated output to feed into",
    "a join or another aggregate."
  ],
  "tests": [
    {
      "name": "timestamp format",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, event_timestamp VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='event_timestamp', timestamp_format='yyyy-MM-dd''T''HH:mm:ssX');",
        "CREATE STREAM TS AS select K, id, stringtotimestamp(event_timestamp, 'yyyy-MM-dd''T''HH:mm:ssX') as ets from test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "event_timestamp": "2018-05-11T21:58:33Z"}, "timestamp": 10},
        {"topic": "test_topic", "value": {"ID": 1, "event_timestamp": "2019-05-11T21:58:33Z"}, "timestamp": 10},
        {"topic": "test_topic", "value": {"ID": 1, "event_timestamp": "2020-05-11T21:58:33Z"}, "timestamp": 10}
      ],
      "outputs": [
        {"topic": "TS", "value": {"ID": 1, "ETS": 1526075913000}, "timestamp": 1526075913000},
        {"topic": "TS", "value": {"ID": 1, "ETS": 1557611913000}, "timestamp": 1557611913000},
        {"topic": "TS", "value": {"ID": 1, "ETS": 1589234313000}, "timestamp": 1589234313000}
      ]
    },
    {
      "name": "with single digit ms and numeric tz",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, event_timestamp VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='event_timestamp', timestamp_format='yyyy-MM-dd''T''HH:mm:ss.SX');",
        "CREATE STREAM TS AS select K, stringtotimestamp(event_timestamp, 'yyyy-MM-dd''T''HH:mm:ss.SX') as ets from test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"event_timestamp": "2019-08-27T13:31:09.2+0000"}, "timestamp": 10}
      ],
      "outputs": [
        {"topic": "TS", "value": {"ETS": 1566912669200}, "timestamp": 1566912669200}
      ]
    },
    {
      "name": "override output timestamp for CSAS",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM TS WITH (timestamp='sink_ts') AS SELECT K, id as sink_ts, id FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1}, "timestamp": 1526075913000},
        {"topic": "test_topic", "value": {"ID": -2}, "timestamp": 1526075913000},
        {"topic": "test_topic", "value": {"ID": 3}, "timestamp": 1589234313000}
      ],
      "outputs": [
        {"topic": "TS", "value": {"SINK_TS":1, "ID": 1}, "timestamp": 1},
        {"topic": "TS", "value": {"SINK_TS":3, "ID": 3}, "timestamp": 3}
      ]
    },
    {
      "name": "override output timestamp for CSAS using a string TIMESTAMP_FORMAT",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, EVENT_TS varchar) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM TS WITH (timestamp='event_ts', timestamp_format='yyyy-MM-dd''T''HH:mm:ssX') AS SELECT K, id, event_ts FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "EVENT_TS": "2018-05-11T21:58:33Z"}, "timestamp": 10},
        {"topic": "test_topic", "value": {"ID": 2, "EVENT_TS": "not a timestamp"}, "timestamp": 10},
        {"topic": "test_topic", "value": {"ID": 3, "EVENT_TS": "2019-05-11T21:58:33Z"}, "timestamp": 10}
      ],
      "outputs": [
        {"topic": "TS", "value": {"ID": 1, "EVENT_TS": "2018-05-11T21:58:33Z"}, "timestamp": 1526075913000},
        {"topic": "TS", "value": {"ID": 3, "EVENT_TS": "2019-05-11T21:58:33Z"}, "timestamp": 1557611913000}
      ]
    },
    {
      "name": "override output timestamp for CTAS",
      "statements": [
        "CREATE TABLE TEST (K STRING PRIMARY KEY, ID bigint) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE TABLE TS WITH (timestamp='sink_ts') AS SELECT K, id as sink_ts, id FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "key": "a", "value": {"ID": 1}, "timestamp": 1526075913000},
        {"topic": "test_topic", "key": "a", "value": {"ID": -2}, "timestamp": 1526075913000},
        {"topic": "test_topic", "key": "a", "value": {"ID": 3}, "timestamp": 1589234313000}
      ],
      "outputs": [
        {"topic": "TS", "key": "a", "value": {"SINK_TS":1, "ID": 1}, "timestamp": 1},
        {"topic": "TS", "key": "a", "value": {"SINK_TS":3, "ID": 3}, "timestamp": 3}
      ]
    },
    {
      "name": "override output timestamp for CTAS using a string TIMESTAMP_FORMAT",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, EVENT_TS varchar) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM TS WITH (timestamp='event_ts', timestamp_format='yyyy-MM-dd''T''HH:mm:ssX') AS SELECT K, id, event_ts FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "EVENT_TS": "2018-05-11T21:58:33Z"}, "timestamp": 10},
        {"topic": "test_topic", "value": {"ID": 2, "EVENT_TS": "not a timestamp"}, "timestamp": 10},
        {"topic": "test_topic", "value": {"ID": 3, "EVENT_TS": "2019-05-11T21:58:33Z"}, "timestamp": 10}
      ],
      "outputs": [
        {"topic": "TS", "value": {"ID": 1, "EVENT_TS": "2018-05-11T21:58:33Z"}, "timestamp": 1526075913000},
        {"topic": "TS", "value": {"ID": 3, "EVENT_TS": "2019-05-11T21:58:33Z"}, "timestamp": 1557611913000}
      ]
    },
    {
      "name": "timestamp column of source should not influence sink",
      "statements": [
        "CREATE STREAM INPUT (K STRING KEY, ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');",
        "CREATE STREAM OUTPUT AS SELECT K, id as EVENT_TS FROM INPUT;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "EVENT_TS":  1526075913000}},
        {"topic": "test_topic", "value": {"ID": 2, "EVENT_TS":  1589234313000}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"EVENT_TS":1}, "timestamp": 1526075913000},
        {"topic": "OUTPUT", "value": {"EVENT_TS":2}, "timestamp": 1589234313000}
      ]
    },
    {
      "name": "Invalid timestamp value should throw an exception",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, EVENT_TS string) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM TS WITH (timestamp='event_ts', timestamp_format='yyyy-MM-dd''T''HH:mm:ssX') AS SELECT K, id, event_ts FROM test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "EVENT_TS":  "not a timestamp"}}
      ]
    },
    {
      "name": "timestamp with column that does not exist should throw exception",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM TS WITH (timestamp='invalid_ts') AS SELECT id, event_ts FROM test;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "The TIMESTAMP column set in the WITH clause does not exist in the schema: 'INVALID_TS'"
      }
    },
    {
      "name": "timestamp column with invalid data type should throw exception",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID bigint, EVENT_TS int) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM TS WITH (timestamp='event_ts') AS SELECT K, id, event_ts FROM test;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Timestamp column, `EVENT_TS`, should be LONG(INT64) or a String with a timestamp_format specified"
      }
    }
  ]
}


