{
  "tests": [
    {
      "name": "int literal -> double",
      "statements": [
        "CREATE STREAM TEST (ID bigint, LAT1 double, LON1 double) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM DISTANCE_STREAM AS select ID, geo_distance(LAT1, LON1, 51, 0) as CALCULATED_DISTANCE from test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "LAT1": 37.4439, "LON1": -122.1663}}
      ],
      "outputs": [
        {"topic": "DISTANCE_STREAM", "value": {"ID": 1, "CALCULATED_DISTANCE": 8682.459061368269}}
      ]
    },
    {
      "name": "int field -> double",
      "statements": [
        "CREATE STREAM TEST (ID bigint, LAT1 double, LON1 double, LAT2 int) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM DISTANCE_STREAM AS select ID, geo_distance(LAT1, LON1, LAT2, 0) as CALCULATED_DISTANCE from test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "LAT1": 37.4439, "LON1": -122.1663, "LAT2": 51}}
      ],
      "outputs": [
        {"topic": "DISTANCE_STREAM", "value": {"ID": 1, "CALCULATED_DISTANCE": 8682.459061368269}}
      ]
    },
    {
      "name": "long field -> double",
      "statements": [
        "CREATE STREAM TEST (ID bigint, LAT1 double, LON1 double, LAT2 bigint) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM DISTANCE_STREAM AS select ID, geo_distance(LAT1, LON1, LAT2, 0) as CALCULATED_DISTANCE from test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "LAT1": 37.4439, "LON1": -122.1663, "LAT2": 51}}
      ],
      "outputs": [
        {"topic": "DISTANCE_STREAM", "value": {"ID": 1, "CALCULATED_DISTANCE": 8682.459061368269}}
      ]
    },
    {
      "name": "decimal literal -> double",
      "statements": [
        "CREATE STREAM TEST (ID bigint, LAT1 double, LON1 double) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM DISTANCE_STREAM AS select ID, geo_distance(LAT1, LON1, 51.0, 0) as CALCULATED_DISTANCE from test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "LAT1": 37.4439, "LON1": -122.1663}}
      ],
      "outputs": [
        {"topic": "DISTANCE_STREAM", "value": {"ID": 1, "CALCULATED_DISTANCE": 8682.459061368269}}
      ]
    },
    {
      "name": "decimal field -> double",
      "statements": [
        "CREATE STREAM TEST (ID bigint, LAT1 double, LON1 double, LAT2 decimal(3, 1)) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM DISTANCE_STREAM AS select ID, geo_distance(LAT1, LON1, LAT2, 0) as CALCULATED_DISTANCE from test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1, "LAT1": 37.4439, "LON1": -122.1663, "LAT2": 51.0}}
      ],
      "outputs": [
        {"topic": "DISTANCE_STREAM", "value": {"ID": 1, "CALCULATED_DISTANCE": 8682.459061368269}}
      ]
    },
    {
      "name": "choose the exact match first",
      "statements": [
        "CREATE STREAM TEST (ID int) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS select ID, test_udf(ID, 'foo') as foo from test;"
      ],
      "inputs": [
        {"topic": "test_topic", "value": {"ID": 1}}
      ],
      "outputs": [
        {"topic": "OUTPUT", "value": {"ID": 1, "FOO": "doStuffIntString"}}
      ]
    },
    {
      "name": "string literal -> double",
      "statements": [
        "CREATE STREAM TEST (ID bigint, LAT1 double, LON1 double) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM DISTANCE_STREAM AS select ID, geo_distance(LAT1, LON1, 'foo', 0) as CALCULATED_DISTANCE from test;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "Function 'geo_distance' does not accept parameters"
      }
    }
  ]
}