{
  "comments": [
    "These tests cover the execution portion of CREATE OR REPLACE to ensure that the validation ",
    "passes for upgrades that are expected to be compatible and fails for those that are",
    "incompatible. This test does not pipe any data through the statements because the testing",
    "framework does not support running statements after piping some data through and the change",
    "is not trivial to implement."
  ],
  "tests": [
    {
      "name": "DDL - STREAM - add fields",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE OR REPLACE STREAM foo (id VARCHAR KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT * FROM foo;"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DDL - STREAM - remove fields",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE OR REPLACE STREAM foo (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT * FROM foo;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Cannot REPLACE data source: DataSource '`FOO`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING. (The following columns are changed or missing: [`COL2` STRING])"
      }
    },
    {
      "name": "DDL - TABLE - add fields",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE OR REPLACE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar AS SELECT * FROM foo;"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DDL - TABLE - remove fields",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE OR REPLACE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar AS SELECT * FROM foo;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Cannot REPLACE data source: DataSource '`FOO`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING. (The following columns are changed or missing: [`COL2` STRING])"
      }
    },
    {
      "name": "DML - STREAM - add filter",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT * FROM foo;",
        "CREATE OR REPLACE STREAM bar AS SELECT * FROM foo WHERE col1 = '123';"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DML - STREAM - change filter",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT * FROM foo WHERE col1 = '321';",
        "CREATE OR REPLACE STREAM bar AS SELECT * FROM foo WHERE col1 = '123';"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DML - STREAM - remove filter",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT * FROM foo WHERE col1 = '321';",
        "CREATE OR REPLACE STREAM bar AS SELECT * FROM foo;"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DML - STREAM - add column",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE STREAM bar AS SELECT id, col1, col2 FROM foo;"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DML - STREAM - add column via select *",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE STREAM bar AS SELECT * FROM foo;"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DML - STREAM - remove column",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT id, col1, col2 FROM foo;",
        "CREATE OR REPLACE STREAM bar AS SELECT id, col1 FROM foo;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING. (The following columns are changed or missing: [`COL2` STRING])"
      }
    },
    {
      "name": "DML - STREAM - change column",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT id, col1, col2 FROM foo;",
        "CREATE OR REPLACE STREAM bar AS SELECT id, col1, col2 AS col3 FROM foo;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING, `COL3` STRING. (The following columns are changed or missing: [`COL2` STRING])"
      }
    },
    {
      "name": "DML - STREAM - change key same schema",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT col1 AS id, col2 FROM foo PARTITION BY col1;",
        "CREATE OR REPLACE STREAM bar AS SELECT id, col2 FROM foo;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Upgrades not yet supported for StreamSelectKey"
      }
    },
    {
      "name": "DML - STREAM - change source",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM baz (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='baz', value_format='JSON');",
        "CREATE STREAM bar AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE STREAM bar AS SELECT id, col1 FROM baz;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Query is not upgradeable. Plan step of type StreamSource must have matching topicName. Values differ: foo vs. baz"
      }
    },
    {
      "name": "DML - STREAM - change timestampColumn",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE STREAM foo (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE STREAM bar WITH (timestamp='col1', timestamp_format='YYYY') AS SELECT id, col1 FROM bar;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = Optional.empty which is not upgradeable to Optional[TimestampColumn{column=`COL1`, format=Optional[YYYY]}]"
      }
    },
    {
      "name": "DML - TABLE - add filter",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar AS SELECT * FROM foo;",
        "CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DML - TABLE - add column",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DML - TABLE - add column via select *",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;"
      ],
      "inputs": [],
      "outputs": []
    },
    {
      "name": "DML - TABLE - remove column",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;",
        "CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING. (The following columns are changed or missing: [`COL2` STRING])"
      }
    },
    {
      "name": "DML - TABLE - change source",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE baz (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='baz', value_format='JSON');",
        "CREATE TABLE bar AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM baz;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Query is not upgradeable. Plan step of type TableSource must have matching topicName. Values differ: foo vs. baz"
      }
    },
    {
      "name": "DML - TABLE - change timestampColumn",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE TABLE bar WITH (timestamp='col1', timestamp_format='YYYY') AS SELECT id, col1 FROM bar;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = Optional.empty which is not upgradeable to Optional[TimestampColumn{column=`COL1`, format=Optional[YYYY]}]"
      }
    },
    {
      "name": "DML - TABLE - change timestampFormat",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar WITH (timestamp='col1', timestamp_format='YYYY-DD-MM') AS SELECT id, col1 FROM foo;",
        "CREATE OR REPLACE TABLE bar WITH (timestamp='col1', timestamp_format='YYYY') AS SELECT id, col1 FROM bar;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = Optional[TimestampColumn{column=`COL1`, format=Optional[YYYY-DD-MM]}] which is not upgradeable to Optional[TimestampColumn{column=`COL1`, format=Optional[YYYY]}]"
      }
    },
    {
      "name": "DML - TABLE - add column in group by",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE TABLE bar AS SELECT col1, count(*) FROM foo GROUP BY col1;",
        "CREATE OR REPLACE TABLE bar AS SELECT col1, count(*), count(col2) FROM foo GROUP BY col1;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Upgrades not yet supported for TableAggregate"
      }
    },
    {
      "name": "DML - STREAM TABLE - add column in join",
      "properties": {
        "ksql.create.or.replace.enabled": true
      },
      "statements": [
        "CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');",
        "CREATE STREAM bar (id VARCHAR KEY, col1 VARCHAR) WITH (kafka_topic='bar', value_format='JSON');",
        "CREATE STREAM baz AS SELECT foo.id, foo.col1, bar.col1 FROM bar JOIN foo ON foo.id = bar.id;",
        "CREATE OR REPLACE STREAM baz AS SELECT foo.id, foo.col1, bar.col1, foo.col2 FROM bar JOIN foo ON foo.id = bar.id;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlException",
        "message": "Upgrades not yet supported for StreamTableJoin"
      }
    }
  ]
}