{
  "comments": [
    "Tests covering general WHERE clause handling"
  ],
  "tests": [
    {
      "name": "on key column",
      "statements": [
        "CREATE STREAM INPUT (id int KEY, name STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE id < 10;"
      ],
      "inputs": [
        {"topic":  "test_topic", "key": 8, "value": {"name": "a"}},
        {"topic":  "test_topic", "key": 9, "value": {"name": "a"}},
        {"topic":  "test_topic", "key": 10, "value": {"name": "b"}},
        {"topic":  "test_topic", "key": 11, "value": {"name": "c"}}
      ],
      "outputs": [
        {"topic":  "OUTPUT", "key": 8, "value": {"NAME": "a"}},
        {"topic":  "OUTPUT", "key": 9, "value": {"NAME": "a"}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "ID INT KEY, NAME STRING"}
        ]
      }
    },
    {
      "name": "on value column",
      "statements": [
        "CREATE STREAM INPUT (id int KEY, name STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE name not like '%not%';"
      ],
      "inputs": [
        {"topic":  "test_topic", "key": 8, "value": {"name": "this one"}},
        {"topic":  "test_topic", "key": 9, "value": {"name": "not this one"}},
        {"topic":  "test_topic", "key": 10, "value": {"name": "and this one"}},
        {"topic":  "test_topic", "key": 11, "value": {"name": "but not this one"}}
      ],
      "outputs": [
        {"topic":  "OUTPUT", "key": 8, "value": {"NAME": "this one"}},
        {"topic":  "OUTPUT", "key": 10, "value": {"NAME": "and this one"}}
      ],
      "post": {
        "sources": [
          {"name": "OUTPUT", "type": "stream", "schema": "ID INT KEY, NAME STRING"}
        ]
      }
    },
    {
      "name": "on unknown column",
      "statements": [
        "CREATE STREAM INPUT (id int KEY, name STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "CREATE STREAM OUTPUT AS SELECT * FROM INPUT WHERE ABS(BOB) < 10;"
      ],
      "expectedException": {
        "type": "io.confluent.ksql.util.KsqlStatementException",
        "message": "WHERE column 'BOB' cannot be resolved."
      }
    }
  ]
}