{
  "comments": [
    "Tests covering the INSERT VALUES functionality"
  ],
  "tests": [
    {
      "name": "explicitly supply all column values",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ROWTIME, K, ID) VALUES (1234, 'key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": {"ID": 10}}
      ],
      "responses": [
        {"admin": {"@type": "currentStatus"}}
      ]
    },
    {
      "name": "explicitly supply values out of order",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ID, ROWTIME, K) VALUES (10, 1234, 'key');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "explicitly supply default set of column values",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K, ID) VALUES ('key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "implicitly supply default set of column values",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST VALUES ('key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "implicitly all columns where source has value columns defined before key",
      "statements": [
        "CREATE STREAM TEST (ID INT, K STRING KEY) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST VALUES ('key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "should insert nulls for any fields not provided",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K) VALUES ('10');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "10", "value": {"ID": null}}
      ]
    },
    {
      "name": "should insert null key",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ID) VALUES (10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"ID": 10}}
      ]
    },
    {
      "name": "key and key field should match when stream has int key",
      "statements": [
        "CREATE STREAM TEST (K INT KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K, ID) VALUES (10, 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 10, "value": {"ID": 10}}
      ]
    },
    {
      "name": "key and key field should match when stream has String key",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K, ID) VALUES ('10', '10');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "10", "value": {"ID": "10"}}
      ]
    },
    {
      "name": "key and key field should match when stream has double key",
      "statements": [
        "CREATE STREAM TEST (K DOUBLE KEY, ID DOUBLE) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K, ID) VALUES (1.23, 1.23);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1.23, "value": {"ID": 1.23}}
      ]
    },
    {
      "name": "key and key field should match when stream has bigint key",
      "statements": [
        "CREATE STREAM TEST (K BIGINT KEY, ID BIGINT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K, ID) VALUES (10, 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 10, "value": {"ID": 10}}
      ]
    },
    {
      "name": "should fail on mismatch between explicit columns and value counts",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K, ID) VALUES ('10');"
      ],
      "expectedError": {
        "type": "io.confluent.ksql.rest.entity.KsqlStatementErrorMessage",
        "message": "Failed to prepare statement: Expected number columns and values to match: [K, ID], ['10']",
        "status": 400
      }
    },
    {
      "name": "should fail on mismatch between key and key field values when stream has key",
      "statements": [
        "CREATE STREAM TEST (K INT KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K, ID) VALUES (10, 5);"
      ],
      "expectedError": {
        "type": "io.confluent.ksql.rest.entity.KsqlStatementErrorMessage",
        "message": "Failed to insert values into 'TEST'. Expected K and ID to match but got 10 and 5 respectively.",
        "status": 400
      }
    },
    {
      "name": "should coerce numbers",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, I INT, BI BIGINT, D DOUBLE) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (I, BI, D) VALUES (1, 2, 3);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"I": 1, "BI": 2, "D": 3.0}}
      ]
    },
    {
      "name": "should handle arbitrary expressions",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, I INT, A ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (I, A) VALUES (-1, ARRAY[1, 1 + 1, 3]);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"I": -1, "A": [1, 2, 3]}}
      ]
    },
    {
      "name": "should handle arbitrary nested expressions",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, I INT, A ARRAY<ARRAY<BIGINT>>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (I, A) VALUES (-1, ARRAY[ARRAY[1]]);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"I": -1, "A": [[1]]}}
      ]
    },
    {
      "name": "should handle map expressions",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, I INT, A MAP<VARCHAR, BIGINT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (I, A) VALUES (-1, MAP('a':=0, 'b':=1));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"I": -1, "A": {"a": 0, "b": 1}}}
      ]
    },
    {
      "name": "should handle quoted identifiers",
      "statements": [
        "CREATE STREAM `test` (`@key` STRING KEY, `id!` INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO `test` (ROWTIME, `@key`, `id!`) VALUES (1234, 'key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": {"id!": 10}}
      ],
      "responses": [
        {"admin": {"@type": "currentStatus"}}
      ]
    },
    {
      "name": "should handle struct expressions",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, val STRUCT<foo DECIMAL(2, 1), `bar` ARRAY<VARCHAR>>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (val) VALUES (STRUCT(FOO := 2.1, `bar` := ARRAY['bar']));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"VAL": {"FOO": 2.1, "bar": ["bar"]}}}
      ]
    },
    {
      "name": "should handle struct coercion",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, val STRUCT<foo BIGINT, bar ARRAY<BIGINT>, baz DOUBLE>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (val) VALUES (STRUCT(FOO := 2, BAR := ARRAY[2], BAZ := 2));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"VAL": {"FOO": 2, "BAR": [2], "BAZ": 2.0}}}
      ]
    },
    {
      "name": "should handle empty struct expressions",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, val STRUCT<foo DECIMAL(2, 1), `bar` ARRAY<VARCHAR>>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (val) VALUES (STRUCT());"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"VAL": {"FOO": null, "bar": null}}}
      ]
    },
    {
      "name": "should handled quoted key and value",
      "statements": [
        "CREATE STREAM TEST (`Key` STRING KEY, `Value` INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (`Key`, `Value`) VALUES ('key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "key", "value": {"Value": 10}}
      ]
    },
    {
      "name": "should insert nulls",
      "statements": [
        "CREATE STREAM S (ID INT KEY, NAME STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO S (ID, NAME) VALUES (NULL, NULL);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"NAME": null}}
      ]
    },
    {
      "name": "should insert array with null elements",
      "statements": [
        "CREATE STREAM S (ID INT KEY, V0 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO S (ID, V0) VALUES (1, ARRAY[CAST(null AS INT)]);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1, "value": {"V0": [null]}}
      ]
    },
    {
      "name": "should insert map with null values",
      "statements": [
        "CREATE STREAM S (ID INT KEY, V0 MAP<STRING, INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO S (ID, V0) VALUES (1, MAP('k1' := CAST(null AS INT)));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1, "value": {"V0": {"k1": null}}}
      ]
    },
    {
      "name": "should insert map with null keys",
      "statements": [
        "CREATE STREAM S (ID INT KEY, V0 MAP<STRING, INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO S (ID, V0) VALUES (1, MAP(CAST(NULL AS STRING) := 1));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1, "value": {"V0": {"null": 1}}}
      ]
    },
    {
      "name": "should insert struct with null values",
      "statements": [
        "CREATE STREAM S (ID INT KEY, V0 STRUCT<f0 INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO S (ID, V0) VALUES (1, STRUCT(f0 := CAST(null AS INT)));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1, "value": {"V0": {"F0": null}}}
      ]
    },
    {
      "name": "should insert into stream without key",
      "statements": [
        "CREATE STREAM S (ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO S (ID) VALUES (1);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"ID": 1}}
      ]
    },
    {
      "name": "should insert decimals that equal zero",
      "statements": [
        "CREATE STREAM S (ID INT KEY, V0 DECIMAL(12, 2))  WITH (kafka_topic='test_topic',partitions = 1, value_format='JSON');",
        "INSERT INTO S (ID,V0) VALUES (1,0.00);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1, "value": {"V0": 0.00}}
      ]
    },
    {
      "name": "should insert decimals between zero and one",
      "statements": [
        "CREATE STREAM S (ID INT KEY, V0 DECIMAL(12, 2))  WITH (kafka_topic='test_topic',partitions = 1, value_format='JSON');",
        "INSERT INTO S (ID,V0) VALUES (1,0.05);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1, "value": {"V0": 0.05}}
      ]
    },
    {
      "name": "should fail on column reference",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (K, ID) VALUES (FOO.bar, '10');"
      ],
      "expectedError": {
        "type": "io.confluent.ksql.rest.entity.KsqlStatementErrorMessage",
        "message": "Failed to prepare statement: 'FOO' is not a valid stream/table name or alias.",
        "status": 400
      }
    },
    {
      "name": "should insert unwrapped value with SR integration",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', value_format='Avro', wrap_single_value=false);",
        "INSERT INTO TEST (ROWTIME, K, ID) VALUES (1234, 'key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": 10}
      ],
      "responses": [
        {"admin": {"@type": "currentStatus"}}
      ]
    },
    {
      "name": "non-KAFKA key format",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', format='JSON');",
        "INSERT INTO TEST (ID, ROWTIME, K) VALUES (10, 1234, 'key');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "AVRO key format",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', format='AVRO');",
        "INSERT INTO TEST (ID, ROWTIME, K) VALUES (10, 1234, 'key');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "AVRO array key format",
      "statements": [
        "CREATE STREAM TEST (K ARRAY<INT> KEY, ID INT) WITH (kafka_topic='test_topic', format='AVRO');",
        "INSERT INTO TEST (ID, ROWTIME, K) VALUES (10, 1234, ARRAY[12, 22]);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": [12, 22], "value": {"ID": 10}}
      ]
    },
    {
      "name": "multi-key insert - AVRO",
      "statements": [
        "CREATE STREAM INPUT (COL1 VARCHAR KEY, COL2 INT KEY, COL3 VARCHAR) WITH (kafka_topic='input_topic', VALUE_FORMAT='AVRO', KEY_FORMAT='AVRO', PARTITIONS=1);",
        "INSERT INTO INPUT (COL1, COL2, COL3) VALUES ('1', 1, '1');",
        "INSERT INTO INPUT (COL1, COL2, COL3) VALUES ('2', 2, '2');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "input_topic", "key": {"COL1": "1", "COL2": 1}, "value": {"COL3": "1"}},
        {"topic": "input_topic", "key": {"COL1": "2", "COL2": 2}, "value": {"COL3": "2"}}
      ]
    },
    {
      "name": "AVRO struct key format",
      "statements": [
        "CREATE STREAM TEST (K STRUCT<F1 STRING> KEY, ID INT) WITH (kafka_topic='test_topic', format='AVRO');",
        "INSERT INTO TEST (ID, ROWTIME, K) VALUES (10, 1234, STRUCT(f1:='key'));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": {"F1": "key"}, "value": {"ID": 10}}
      ]
    },
    {
      "name": "PROTOBUF key and value format",
      "statements": [
        "CREATE STREAM TEST (K STRING KEY, ID INT) WITH (kafka_topic='test_topic', format='PROTOBUF');",
        "INSERT INTO TEST (ID, ROWTIME, K) VALUES (10, 1234, 'key');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": {"K": "key"}, "value": {"ID": 10}}
      ]
    },
    {
      "name": "PROTOBUF array key and value format",
      "statements": [
        "CREATE STREAM TEST (K ARRAY<INT> KEY, V ARRAY<INT>) WITH (kafka_topic='test_topic', format='PROTOBUF');",
        "INSERT INTO TEST (V, ROWTIME, K) VALUES (ARRAY[10, 20], 1234, ARRAY[12, 22]);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": {"K": [12, 22]}, "value": {"V": [10, 20]}}
      ]
    },
    {
      "name": "multi-key insert - PROTOBUF",
      "statements": [
        "CREATE STREAM INPUT (COL1 VARCHAR KEY, COL2 INT KEY, COL3 VARCHAR) WITH (kafka_topic='input_topic', VALUE_FORMAT='PROTOBUF', KEY_FORMAT='PROTOBUF', PARTITIONS=1);",
        "INSERT INTO INPUT (COL1, COL2, COL3) VALUES ('1', 1, '1');",
        "INSERT INTO INPUT (COL1, COL2, COL3) VALUES ('2', 2, '2');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "input_topic", "key": {"COL1": "1", "COL2": 1}, "value": {"COL3": "1"}},
        {"topic": "input_topic", "key": {"COL1": "2", "COL2": 2}, "value": {"COL3": "2"}}
      ]
    },
    {
      "name": "PROTOBUF struct key and value format",
      "statements": [
        "CREATE STREAM TEST (K STRUCT<F1 STRING> KEY, V STRUCT<V1 STRING>) WITH (kafka_topic='test_topic', format='PROTOBUF');",
        "INSERT INTO TEST (V, ROWTIME, K) VALUES (STRUCT(v1:='value'), 1234, STRUCT(f1:='key'));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": {"K": {"F1": "key"}}, "value": {"V": {"V1":  "value"}}}
      ]
    },
    {
      "name": "PROTOBUF with schema full name",
      "statements": [
        "CREATE STREAM TEST (K STRUCT<F1 STRING> KEY, V STRUCT<V1 STRING>) WITH (kafka_topic='test_topic', format='PROTOBUF', key_schema_full_name='io.test.key', value_schema_full_name='io.test.value');",
        "INSERT INTO TEST (V, ROWTIME, K) VALUES (STRUCT(v1:='value'), 1234, STRUCT(f1:='key'));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": {"K": {"F1": "key"}}, "value": {"V": {"V1":  "value"}}}
      ]
    },
    {
      "name": "PROTOBUF with deep schema",
      "statements": [
        "CREATE STREAM TEST (K0 STRUCT<ID INT> KEY, V0 STRUCT<id INT>, V1 ARRAY<STRUCT<NAME STRING>>, V2 MAP<STRING, STRUCT<ADDRESS STRING>>) WITH (kafka_topic='test_topic', format='PROTOBUF', value_schema_full_name='io.test.value');",
        "INSERT INTO TEST (ROWTIME, K0, V0, V1, V2) VALUES (1234, STRUCT(id:=1), STRUCT(id:=1), ARRAY[struct(name:='n1'), STRUCT(name:='n2')], MAP('k0':=STRUCT(address:='addr1')));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": {"K0": {"ID": 1}}, "value": {"V0": {"ID": 1}, "V1": [{"NAME": "n1"}, {"NAME": "n2"}], "V2": {"k0": {"ADDRESS": "addr1"}}}}
      ]
    },
    {
      "name": "PROTOBUF from multiple schema definitions",
      "statements": [
        "CREATE STREAM TEST WITH (kafka_topic='test_topic', format='PROTOBUF', key_schema_full_name='ProtobufKey2', value_schema_full_name='ProtobufValue2');",
        "INSERT INTO TEST (ROWTIME, K1, C2) VALUES (1234, 'key', 1);"
      ],
      "topics": [
        {
          "name": "test_topic",
          "keyFormat": "PROTOBUF",
          "keySchema": "syntax = \"proto3\"; message ProtobufKey1 {uint32 K1 = 1;} message ProtobufKey2 {string K1 = 1;}",
          "valueFormat": "PROTOBUF",
          "valueSchema": "syntax = \"proto3\"; message ProtobufValue1 {float C1 = 1; uint32 C2 = 2;} message ProtobufValue2 {uint32 C2 = 1;}"
        }
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": {"K1": "key"}, "value": {"C2":  1}}
      ]
    },
    {
      "name": "verify INSERT VALUES fails for ROWPARTITION",
      "statements": [
        "CREATE STREAM input (id INT KEY, val STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO input (id, val, ROWPARTITION) VALUES (1, 'hello', 5);"
      ],
      "expectedError": {
        "type": "io.confluent.ksql.rest.entity.KsqlStatementErrorMessage",
        "message": "Inserting into column `ROWPARTITION` is not allowed.",
        "status": 400
      }
    },
    {
      "name": "verify INSERT VALUES fails for ROWOFFSET",
      "statements": [
        "CREATE STREAM input (id INT KEY, val STRING) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO input (id, val, ROWOFFSET) VALUES (1, 'hello', 5);"
      ],
      "expectedError": {
        "type": "io.confluent.ksql.rest.entity.KsqlStatementErrorMessage",
        "message": "Inserting into column `ROWOFFSET` is not allowed.",
        "status": 400
      }
    }
  ]
}