{
  "comments": [
    "Tests covering the INSERT VALUES functionality"
  ],
  "tests": [
    {
      "name": "explicitly supply all column values",
      "statements": [
        "CREATE STREAM TEST (ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ROWTIME, ROWKEY, ID) VALUES (1234, 'key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": {"ID": 10}}
      ],
      "responses": [
        {"admin": {"@type": "currentStatus", "statementText": "{STATEMENT}"}}
      ]
    },
    {
      "name": "explicitly supply values out of order",
      "statements": [
        "CREATE STREAM TEST (ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ID, ROWTIME, ROWKEY) VALUES (10, 1234, 'key');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "explicitly supply default set of column values",
      "statements": [
        "CREATE STREAM TEST (ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ROWKEY, ID) VALUES ('key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "implicitly supply default set of column values",
      "statements": [
        "CREATE STREAM TEST (ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST VALUES ('key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "key", "value": {"ID": 10}}
      ]
    },
    {
      "name": "should insert nulls for any fields not provided",
      "statements": [
        "CREATE STREAM TEST (ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ROWKEY) VALUES ('10');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "10", "value": {"ID": null}}
      ]
    },
    {
      "name": "should insert null key",
      "statements": [
        "CREATE STREAM TEST (ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ID) VALUES (10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"ID": 10}}
      ]
    },
    {
      "name": "rowkey should be set when stream has int key and only key specified in insert",
      "statements": [
        "CREATE STREAM TEST (ROWKEY INT KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ID) VALUES (10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 10, "value": {"ID": 10}}
      ]
    },
    {
      "name": "rowkey should be set when stream has String key and only key specified in insert",
      "statements": [
        "CREATE STREAM TEST (ID VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ID) VALUES ('10');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "10", "value": {"ID": "10"}}
      ]
    },
    {
      "name": "rowkey should be set when stream has double key and only key specified in insert",
      "statements": [
        "CREATE STREAM TEST (ROWKEY DOUBLE KEY, ID DOUBLE) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ID) VALUES (1.23);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1.23, "value": {"ID": 1.23}}
      ]
    },
    {
      "name": "rowkey should be set when stream has bigint key and only key specified in insert",
      "statements": [
        "CREATE STREAM TEST (ROWKEY BIGINT KEY, ID BIGINT) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ID) VALUES (10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 10, "value": {"ID": 10}}
      ]
    },
    {
      "name": "keyfield should be set when stream has string key and only rowkey specified in insert",
      "statements": [
        "CREATE STREAM TEST (ID STRING) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ROWKEY) VALUES ('10');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "10", "value": {"ID": "10"}}
      ]
    },
    {
      "name": "rowkey and key should match when stream has int key",
      "statements": [
        "CREATE STREAM TEST (ROWKEY INT KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ROWKEY, ID) VALUES (10, 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 10, "value": {"ID": 10}}
      ]
    },
    {
      "name": "rowkey and key should match when stream has String key",
      "statements": [
        "CREATE STREAM TEST (ID STRING) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ROWKEY, ID) VALUES ('10', '10');"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": "10", "value": {"ID": "10"}}
      ]
    },
    {
      "name": "rowkey and key should match when stream has double key",
      "statements": [
        "CREATE STREAM TEST (ROWKEY DOUBLE KEY, ID DOUBLE) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ROWKEY, ID) VALUES (1.23, 1.23);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 1.23, "value": {"ID": 1.23}}
      ]
    },
    {
      "name": "rowkey and key should match when stream has bigint key",
      "statements": [
        "CREATE STREAM TEST (ROWKEY BIGINT KEY, ID BIGINT) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ROWKEY, ID) VALUES (10, 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": 10, "value": {"ID": 10}}
      ]
    },
    {
      "name": "should fail on mismatch between explicit columns and value counts",
      "statements": [
        "CREATE STREAM TEST (ID INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (ROWKEY, ID) VALUES ('10');"
      ],
      "expectedError": {
        "type": "io.confluent.ksql.rest.entity.KsqlStatementErrorMessage",
        "message": "Failed to prepare statement: Expected number columns and values to match: [ROWKEY, ID], ['10']",
        "status": 400
      }
    },
    {
      "name": "should fail on mismatch between rowkey and key values when stream has key",
      "statements": [
        "CREATE STREAM TEST (ROWKEY INT KEY, ID INT) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');",
        "INSERT INTO TEST (ROWKEY, ID) VALUES (10, 5);"
      ],
      "expectedError": {
        "type": "io.confluent.ksql.rest.entity.KsqlStatementErrorMessage",
        "message": "Failed to insert values into 'TEST'. Expected ROWKEY and ID to match but got 10 and 5 respectively.",
        "status": 400
      }
    },
    {
      "name": "should coerce numbers",
      "statements": [
        "CREATE STREAM TEST (I INT, BI BIGINT, D DOUBLE) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (I, BI, D) VALUES (1, 2, 3);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"I": 1, "BI": 2, "D": 3.0}}
      ]
    },
    {
      "name": "should handle arbitrary expressions",
      "statements": [
        "CREATE STREAM TEST (I INT, A ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (I, A) VALUES (-1, ARRAY[1, 1 + 1, 3]);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"I": -1, "A": [1, 2, 3]}}
      ]
    },
    {
      "name": "should handle arbitrary nested expressions",
      "statements": [
        "CREATE STREAM TEST (I INT, A ARRAY<ARRAY<BIGINT>>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (I, A) VALUES (-1, ARRAY[ARRAY[1]]);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"I": -1, "A": [[1]]}}
      ]
    },
    {
      "name": "should handle map expressions",
      "statements": [
        "CREATE STREAM TEST (I INT, A MAP<VARCHAR, BIGINT>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (I, A) VALUES (-1, MAP('a':=0, 'b':=1));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"I": -1, "A": {"a": 0, "b": 1}}}
      ]
    },
    {
      "name": "should handle quoted identifiers",
      "statements": [
        "CREATE STREAM `test` (`id!` INT) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO `test` (ROWTIME, ROWKEY, `id!`) VALUES (1234, 'key', 10);"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "timestamp": 1234, "key": "key", "value": {"id!": 10}}
      ],
      "responses": [
        {"admin": {"@type": "currentStatus", "statementText": "{STATEMENT}"}}
      ]
    },
    {
      "name": "should handle struct expressions",
      "statements": [
        "CREATE STREAM TEST (val STRUCT<foo DECIMAL(2, 1), `bar` ARRAY<VARCHAR>>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (val) VALUES (STRUCT(FOO := 2.1, `bar` := ARRAY['bar']));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"VAL": {"FOO": 2.1, "bar": ["bar"]}}}
      ]
    },
    {
      "name": "should handle struct coercion",
      "statements": [
        "CREATE STREAM TEST (val STRUCT<foo BIGINT, bar ARRAY<BIGINT>, baz DOUBLE>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (val) VALUES (STRUCT(FOO := 2, BAR := ARRAY[2], BAZ := 2));"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"VAL": {"FOO": 2, "BAR": [2], "BAZ": 2.0}}}
      ]
    },
    {
      "name": "should handle empty struct expressions",
      "statements": [
        "CREATE STREAM TEST (val STRUCT<foo DECIMAL(2, 1), `bar` ARRAY<VARCHAR>>) WITH (kafka_topic='test_topic', value_format='JSON');",
        "INSERT INTO TEST (val) VALUES (STRUCT());"
      ],
      "inputs": [
      ],
      "outputs": [
        {"topic": "test_topic", "key": null, "value": {"VAL": {"FOO": null, "bar": null}}}
      ]
    }
  ]
}